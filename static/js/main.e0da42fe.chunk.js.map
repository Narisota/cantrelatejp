{"version":3,"sources":["accessToken.ts","CheckAuth.ts","generated/graphql.tsx","components/navbar/AnnouncementBar.tsx","components/navbar/Logo.tsx","components/navbar/Navbar.tsx","components/footer/CopyrightBar.tsx","components/footer/Footer.tsx","components/products/Products.tsx","components/UsersOrders.tsx","Sorting.ts","redux/actions/userAction.ts","components/products/ProductDetails.tsx","components/checkout/Cart.tsx","components/checkout/Paid.tsx","components/checkout/Checkout.tsx","components/FAQ.tsx","components/Contact.tsx","components/ShippingPolicy.tsx","components/OrderSuccess.tsx","components/Sections/ViewSection.tsx","routes/Routes.tsx","App.tsx","components/Preloader.tsx","URI.ts","AppWrapper.tsx","GetMaintenance.ts","redux/RootReducer.tsx","redux/ReduxStore.tsx","index.tsx"],"names":["accessToken","setAccessToken","s","getAccessToken","checkAuth","token","exp","jwtDecode","Date","now","AddPaypalOrderDocument","gql","CheckoutDocument","GetAnnouncementsDocument","GetCurrUserDocument","GetMaintenanceDocument","useGetMaintenanceQuery","baseOptions","Apollo","GetProductDocument","GetProductsDocument","GetProductsByIdsDocument","GetProductsOptionsDocument","GetSectionByIdDocument","GetSectionsDocument","GetSectionsProductsDocument","GetSocialsDocument","useGetSocialsQuery","GetUsersOrdersDocument","LoginDocument","PaypalCheckoutDocument","ValidateCouponDocument","AnnouncementBar","variables","component","sdata","data","sloading","loading","GetSocials","error","useEffect","document","getElementById","i","getAnnouncements","length","textWrapper","innerHTML","textContent","replace","tl","anime","timeline","loop","loopBegin","style","display","loopComplete","add","targets","translateY","translateZ","opacity","easing","duration","delay","el","translateX","width","backgroundColor","color","zIndex","position","className","justifyContent","id","map","_val","text","getSocials","href","social_url","height","marginRight","social_logo","marginLeft","SocialIcon","Logo","Navbar","elems","querySelectorAll","M","Sidenav","init","login","handler","res","a","user_id","googleId","email","profileObj","response","localStorage","setItem","refreshToken","window","location","reload","signIn","useGoogleLogin","clientId","onSuccess","logout","top","data-target","left","transform","onClick","paddingTop","textAlign","CopyrightBar","border","marginTop","marginBottom","fontSize","fontWeight","Footer","GetSections","Products","classList","remove","_t","value","scale","stagger","start","getSections","section","margin","section_id","src","thumbnail","alt","name","getProducts","product","product_id","images","img_url","Number","price","toFixed","showDetails","tmp","contains","products","Subtotal","sTotal","productSubtotal","quantityOrdered","productsSubtotal","shippingTotal","calcSubtotals","UsersOrders","useLocation","sortByProp","arr","prop","invert","props","forEach","sort","reverse","j","slice","pop","state","console","log","sortedOrders","getUsersOrders","minHeight","str","dateOfPurchase","amountOff","order_total","discount","date_of_purchase","split","shipping","JSON","parse","padding","borderLeft","paddingBottom","paddingRight","paddingLeft","order_id","coupon","line1","city","postal_code","country","flexDirection","tracking_num","borderBottom","addProductToCart","type","changeQuantityOnProduct","newQuantity","productIndex","GetProductOptions","odata","oloading","ProductDetails","dispatch","useDispatch","useState","option_id","option_price","option_stock","option","setOption","Tooltip","Carousel","Dropdown","getProduct","org_stock","stock","to","maxHeight","getInstance","prev","next","maxWidth","desc","getProductsOptions","data-position","data-tooltip","toast","html","percent","Cart","useSelector","productsInCart","product_ids","push","products_str","stringify","refresh","quantities","setState","total","setTotal","tmp_total","quantity","getProductsByIds","options","ii","minLength","maxLength","pattern","onBlur","e","target","splice","complete","onChange","match","foo","z","Paid","CardSection","iconStyle","hidePostalCode","base","iconColor","fontFamily","fontSmoothing","invalid","Checkout","useCheckoutMutation","checkout","useValidateCouponMutation","validateCoupon","usePaypalCheckoutMutation","paypalCheckout","useAddPaypalOrderMutation","addPaypalOrder","discountPH","setDiscountPH","setCoupon","subtotal","setSubtotal","Total","setShipping","address","zip","billing","setBilling","paidFor","setPaidFor","err","setError","setAddress","paypalRef","useRef","couponRef","current","Autocomplete","Alabama","Alaska","Arizona","Arkansas","California","Colorado","Connecticut","Delaware","Florida","Georgia","Hawaii","Idaho","Illinois","Indiana","Iowa","Kansas","Kentucky","Louisiana","Maine","Maryland","Massachusettes","Michigan","Minnesota","Mississippi","Missouri","Montana","Nebraska","Nevada","Ohio","Oklahoma","Oregon","Pennsylvania","Tennessee","Texas","Utah","Vermont","Virginia","Washington","Wisconsin","Wyoming","win","children","paypal","Buttons","createOrder","actions","order","create","purchase_units","description","amount","currency_code","onApprove","_ppdata","capture","purchaseUnits_str","getCurrUser","payee","email_address","onError","render","handleSubmit","payBtn","stripe","elements","card","getElement","CardElement","createToken","result","message","token_str","shipping_str","billing_str","shipping_info","billing_info","tmp_subtotal","shipping_total","tax","Math","round","focusable","viewBox","d","fillRule","letterSpacing","toLowerCase","htmlFor","data-error","coupon_name","attributes","nodeValue","percentage","ref","borderRadius","tmp_email","validateForm","FAQ","eyeColors","eyeColor","floor","random","Contact","ShippingPolicy","OrderSuccess","GetSection","ViewSection","getSectionById","getSectionsProducts","Routes","stripePromise","loadStripe","exact","path","App","Preloader","setTimeout","_el","elasticity","getMaintenance","URI","AppWrapper","maintance","GetMaintenance","pageLoader","setPageLoader","getItem","fetch","method","credentials","headers","then","json","loadState","serializedState","initState","store","createStore","action","newProduct","composeWithDevTools","subscribe","saveState","getState","cache","InMemoryCache","requestLink","ApolloLink","operation","forward","Observable","observer","handle","Promise","resolve","setContext","authorization","bind","catch","unsubscribe","client","ApolloClient","link","from","TokenRefreshLink","accessTokenField","isTokenValidOrUndefined","fetchAccessToken","handleFetch","handleError","warn","graphQLErrors","networkError","HttpLink","uri","ReactDOM"],"mappings":"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","file":"static/js/main.e0da42fe.chunk.js","sourcesContent":["export let accessToken = \"\";\r\n\r\nexport const setAccessToken = (s: string) => {\r\n    accessToken = s;\r\n};\r\n\r\nexport const getAccessToken = () => {\r\n    return accessToken;\r\n};\r\n\r\nexport const setMainAccessToken = (s: string) => {\r\n    accessToken = s;\r\n};\r\n\r\nexport const getMainAccessToken = () => {\r\n    return accessToken;\r\n};\r\n","import { getAccessToken, getMainAccessToken } from \"./accessToken\";\r\nimport jwtDecode from \"jwt-decode\";\r\n\r\nexport const checkAuth = () => {\r\n    const token = getAccessToken();\r\n    if (!token) {\r\n        return false;\r\n    }\r\n    try {\r\n        const { exp } = jwtDecode(token) as any;\r\n        if (Date.now() >= exp * 1000) {\r\n            return false;\r\n        } else {\r\n            return true;\r\n        }\r\n    } catch {\r\n        return false;\r\n    }\r\n};\r\n\r\nexport const checkMainAuth = () => {\r\n    const token = getMainAccessToken();\r\n    if (!token) {\r\n        return false;\r\n    }\r\n    try {\r\n        const { exp } = jwtDecode(token) as any;\r\n        if (Date.now() >= exp * 1000) {\r\n            return false;\r\n        } else {\r\n            return true;\r\n        }\r\n    } catch {\r\n        return false;\r\n    }\r\n};\r\n\r\nexport default checkAuth();\r\n","import { gql } from '@apollo/client';\r\nimport * as Apollo from '@apollo/client';\r\nexport type Maybe<T> = T | null;\r\nexport type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };\r\nexport type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };\r\nexport type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };\r\n/** All built-in and custom scalars, mapped to their actual values */\r\nexport type Scalars = {\r\n  ID: string;\r\n  String: string;\r\n  Boolean: boolean;\r\n  Int: number;\r\n  Float: number;\r\n};\r\n\r\nexport type Query = {\r\n  __typename?: 'Query';\r\n  getUsersOrders: Array<GetOrdersResponse>;\r\n  getOrders: Array<GetOrdersResponse>;\r\n  getOrderById: GetOrdersResponse;\r\n  getProducts: Array<ProductsWithImages>;\r\n  getProductsByIds: Array<ProductsWithOptionAndImages>;\r\n  apiGetProducts: Array<ProductsWithImages>;\r\n  getProduct: ProductsWithImages;\r\n  apiGetProduct: ProductsWithImages;\r\n  getApiUsers: Array<ApiUser>;\r\n  getCurrUser: Users;\r\n  getCoupons: Array<Coupons>;\r\n  getAnnouncements: Array<Announcements>;\r\n  getMaintenance: Scalars['Boolean'];\r\n  getSocials: Array<Socials>;\r\n  getSections: Array<Sections>;\r\n  getSectionById: Sections;\r\n  getProductsSections: Array<SectionsOrNull>;\r\n  getSectionsProducts: Array<ProductsWithImages>;\r\n  getProductsOptions: Array<Options>;\r\n};\r\n\r\n\r\nexport type QueryGetOrderByIdArgs = {\r\n  order_id: Scalars['Float'];\r\n};\r\n\r\n\r\nexport type QueryGetProductsByIdsArgs = {\r\n  products_str: Scalars['String'];\r\n};\r\n\r\n\r\nexport type QueryGetProductArgs = {\r\n  product_id: Scalars['Float'];\r\n};\r\n\r\n\r\nexport type QueryApiGetProductArgs = {\r\n  product_id: Scalars['Float'];\r\n};\r\n\r\n\r\nexport type QueryGetSocialsArgs = {\r\n  component: Scalars['String'];\r\n};\r\n\r\n\r\nexport type QueryGetSectionByIdArgs = {\r\n  section_id: Scalars['Float'];\r\n};\r\n\r\n\r\nexport type QueryGetProductsSectionsArgs = {\r\n  product_id: Scalars['Float'];\r\n};\r\n\r\n\r\nexport type QueryGetSectionsProductsArgs = {\r\n  section_id: Scalars['Float'];\r\n};\r\n\r\n\r\nexport type QueryGetProductsOptionsArgs = {\r\n  product_id: Scalars['Float'];\r\n};\r\n\r\nexport type GetOrdersResponse = {\r\n  __typename?: 'GetOrdersResponse';\r\n  products?: Maybe<Array<OrdersProductsWithImages>>;\r\n  order_id: Scalars['Float'];\r\n  tracking_num?: Maybe<Scalars['String']>;\r\n  order_total?: Maybe<Scalars['Float']>;\r\n  coupon?: Maybe<Scalars['String']>;\r\n  discount?: Maybe<Scalars['String']>;\r\n  shipping?: Maybe<Scalars['String']>;\r\n  warning?: Maybe<Scalars['String']>;\r\n  date_of_purchase?: Maybe<Scalars['String']>;\r\n};\r\n\r\nexport type OrdersProductsWithImages = {\r\n  __typename?: 'OrdersProductsWithImages';\r\n  product_id: Scalars['Int'];\r\n  name: Scalars['String'];\r\n  desc: Scalars['String'];\r\n  price: Scalars['Int'];\r\n  stock: Scalars['Int'];\r\n  org_stock?: Maybe<Scalars['Int']>;\r\n  exp_date?: Maybe<Scalars['String']>;\r\n  quantityOrdered: Scalars['Float'];\r\n  productSubtotal?: Maybe<Scalars['Float']>;\r\n  images?: Maybe<Array<Images>>;\r\n};\r\n\r\nexport type Images = {\r\n  __typename?: 'Images';\r\n  img_id: Scalars['Float'];\r\n  img_url: Scalars['String'];\r\n  index: Scalars['Float'];\r\n};\r\n\r\nexport type ProductsWithImages = {\r\n  __typename?: 'ProductsWithImages';\r\n  product_id: Scalars['Int'];\r\n  name: Scalars['String'];\r\n  desc: Scalars['String'];\r\n  price: Scalars['Int'];\r\n  stock: Scalars['Int'];\r\n  org_stock?: Maybe<Scalars['Int']>;\r\n  exp_date?: Maybe<Scalars['String']>;\r\n  images?: Maybe<Array<Images>>;\r\n  hidden: Scalars['Boolean'];\r\n};\r\n\r\nexport type ProductsWithOptionAndImages = {\r\n  __typename?: 'ProductsWithOptionAndImages';\r\n  product_id: Scalars['Int'];\r\n  name: Scalars['String'];\r\n  desc: Scalars['String'];\r\n  price: Scalars['Int'];\r\n  stock: Scalars['Int'];\r\n  org_stock?: Maybe<Scalars['Int']>;\r\n  exp_date?: Maybe<Scalars['String']>;\r\n  images?: Maybe<Array<Images>>;\r\n  options?: Maybe<Array<Options>>;\r\n};\r\n\r\nexport type Options = {\r\n  __typename?: 'Options';\r\n  option_id: Scalars['Int'];\r\n  name: Scalars['String'];\r\n  price: Scalars['Int'];\r\n  stock: Scalars['Int'];\r\n  index: Scalars['Int'];\r\n};\r\n\r\nexport type ApiUser = {\r\n  __typename?: 'ApiUser';\r\n  uuid: Scalars['Float'];\r\n  username: Scalars['String'];\r\n  password: Scalars['String'];\r\n};\r\n\r\nexport type Users = {\r\n  __typename?: 'Users';\r\n  uuid: Scalars['Float'];\r\n  user_id?: Maybe<Scalars['String']>;\r\n  email?: Maybe<Scalars['String']>;\r\n};\r\n\r\nexport type Coupons = {\r\n  __typename?: 'Coupons';\r\n  coupon_id: Scalars['String'];\r\n  coupon_name: Scalars['String'];\r\n  discount?: Maybe<Scalars['String']>;\r\n};\r\n\r\nexport type Announcements = {\r\n  __typename?: 'Announcements';\r\n  id: Scalars['String'];\r\n  text: Scalars['String'];\r\n};\r\n\r\nexport type Socials = {\r\n  __typename?: 'Socials';\r\n  id: Scalars['Int'];\r\n  index: Scalars['Int'];\r\n  component: Scalars['String'];\r\n  display: Scalars['Boolean'];\r\n  social_logo: Scalars['String'];\r\n  social_url: Scalars['String'];\r\n};\r\n\r\nexport type Sections = {\r\n  __typename?: 'Sections';\r\n  section_id: Scalars['Int'];\r\n  name: Scalars['String'];\r\n  thumbnail: Scalars['String'];\r\n};\r\n\r\nexport type SectionsOrNull = {\r\n  __typename?: 'SectionsOrNull';\r\n  section_id?: Maybe<Scalars['Int']>;\r\n  name?: Maybe<Scalars['String']>;\r\n  thumbnail?: Maybe<Scalars['String']>;\r\n};\r\n\r\nexport type Mutation = {\r\n  __typename?: 'Mutation';\r\n  editTracking: Scalars['Boolean'];\r\n  paypalCheckout: Scalars['String'];\r\n  addPaypalOrder: Scalars['Boolean'];\r\n  checkout: Scalars['String'];\r\n  toggleProductDisplay: Scalars['Boolean'];\r\n  addProduct: Scalars['String'];\r\n  deleteProduct: Scalars['Boolean'];\r\n  updateProduct: Scalars['Boolean'];\r\n  addImgToProduct: Scalars['Boolean'];\r\n  removeImgFromProduct: Scalars['Boolean'];\r\n  apiLogin: AuthResponse;\r\n  deleteApiUser: Scalars['Boolean'];\r\n  addApiUser: Scalars['Boolean'];\r\n  removeWarning: Scalars['Boolean'];\r\n  login: AuthResponse;\r\n  addCoupon: Scalars['Boolean'];\r\n  deleteCoupon: Scalars['Boolean'];\r\n  validateCoupon: Scalars['String'];\r\n  addAnnouncement: Scalars['Boolean'];\r\n  deleteAnnouncement: Scalars['Boolean'];\r\n  toggleMaintenance: Scalars['Boolean'];\r\n  maintenanceLogin: AuthResponse;\r\n  updateSocialUrl: Scalars['Boolean'];\r\n  toggleSocialDisplay: Scalars['Boolean'];\r\n  initSocials: Scalars['Boolean'];\r\n  addSection: Scalars['Boolean'];\r\n  deleteSection: Scalars['Boolean'];\r\n  addProductToSection: Scalars['String'];\r\n  removeProductFromSection: Scalars['Boolean'];\r\n  updateSection: Scalars['Boolean'];\r\n  addOptionToProduct: Scalars['Boolean'];\r\n  updateOptions: Scalars['Boolean'];\r\n  deleteOptions: Scalars['Boolean'];\r\n};\r\n\r\n\r\nexport type MutationEditTrackingArgs = {\r\n  order_id: Scalars['Float'];\r\n  new_tracking_num: Scalars['String'];\r\n};\r\n\r\n\r\nexport type MutationPaypalCheckoutArgs = {\r\n  coupon: Scalars['String'];\r\n  products: Scalars['String'];\r\n};\r\n\r\n\r\nexport type MutationAddPaypalOrderArgs = {\r\n  purchase_units: Scalars['String'];\r\n  products: Scalars['String'];\r\n  coupon: Scalars['String'];\r\n  user_id: Scalars['String'];\r\n};\r\n\r\n\r\nexport type MutationCheckoutArgs = {\r\n  coupon: Scalars['String'];\r\n  billing_info: Scalars['String'];\r\n  shipping_info: Scalars['String'];\r\n  products: Scalars['String'];\r\n  user_id: Scalars['String'];\r\n  token: Scalars['String'];\r\n};\r\n\r\n\r\nexport type MutationToggleProductDisplayArgs = {\r\n  product_id: Scalars['Float'];\r\n};\r\n\r\n\r\nexport type MutationAddProductArgs = {\r\n  stock: Scalars['Float'];\r\n  price: Scalars['Float'];\r\n  desc: Scalars['String'];\r\n  name: Scalars['String'];\r\n};\r\n\r\n\r\nexport type MutationDeleteProductArgs = {\r\n  product_id: Scalars['Float'];\r\n};\r\n\r\n\r\nexport type MutationUpdateProductArgs = {\r\n  stock: Scalars['Float'];\r\n  price: Scalars['Float'];\r\n  desc: Scalars['String'];\r\n  product_id: Scalars['Float'];\r\n  name: Scalars['String'];\r\n};\r\n\r\n\r\nexport type MutationAddImgToProductArgs = {\r\n  product_id: Scalars['Float'];\r\n  img_url: Scalars['String'];\r\n};\r\n\r\n\r\nexport type MutationRemoveImgFromProductArgs = {\r\n  img_id: Scalars['Float'];\r\n};\r\n\r\n\r\nexport type MutationApiLoginArgs = {\r\n  password: Scalars['String'];\r\n  username: Scalars['String'];\r\n};\r\n\r\n\r\nexport type MutationDeleteApiUserArgs = {\r\n  uuid: Scalars['Float'];\r\n};\r\n\r\n\r\nexport type MutationAddApiUserArgs = {\r\n  password: Scalars['String'];\r\n  username: Scalars['String'];\r\n};\r\n\r\n\r\nexport type MutationRemoveWarningArgs = {\r\n  order_id: Scalars['Float'];\r\n};\r\n\r\n\r\nexport type MutationLoginArgs = {\r\n  email: Scalars['String'];\r\n  user_id: Scalars['String'];\r\n};\r\n\r\n\r\nexport type MutationAddCouponArgs = {\r\n  discount: Scalars['String'];\r\n  coupon_name: Scalars['String'];\r\n};\r\n\r\n\r\nexport type MutationDeleteCouponArgs = {\r\n  coupon_name: Scalars['String'];\r\n};\r\n\r\n\r\nexport type MutationValidateCouponArgs = {\r\n  coupon_name: Scalars['String'];\r\n};\r\n\r\n\r\nexport type MutationAddAnnouncementArgs = {\r\n  text: Scalars['String'];\r\n};\r\n\r\n\r\nexport type MutationDeleteAnnouncementArgs = {\r\n  id: Scalars['String'];\r\n};\r\n\r\n\r\nexport type MutationMaintenanceLoginArgs = {\r\n  password: Scalars['String'];\r\n  access_id: Scalars['String'];\r\n};\r\n\r\n\r\nexport type MutationUpdateSocialUrlArgs = {\r\n  id: Scalars['Float'];\r\n  url: Scalars['String'];\r\n};\r\n\r\n\r\nexport type MutationToggleSocialDisplayArgs = {\r\n  id: Scalars['Float'];\r\n};\r\n\r\n\r\nexport type MutationAddSectionArgs = {\r\n  thumbnail: Scalars['String'];\r\n  name: Scalars['String'];\r\n};\r\n\r\n\r\nexport type MutationDeleteSectionArgs = {\r\n  section_id: Scalars['Float'];\r\n};\r\n\r\n\r\nexport type MutationAddProductToSectionArgs = {\r\n  section_id: Scalars['Float'];\r\n  product_id: Scalars['Float'];\r\n};\r\n\r\n\r\nexport type MutationRemoveProductFromSectionArgs = {\r\n  section_id: Scalars['Float'];\r\n  product_id: Scalars['Float'];\r\n};\r\n\r\n\r\nexport type MutationUpdateSectionArgs = {\r\n  section_id: Scalars['Float'];\r\n  thumbnail: Scalars['String'];\r\n  name: Scalars['String'];\r\n};\r\n\r\n\r\nexport type MutationAddOptionToProductArgs = {\r\n  product_id: Scalars['Float'];\r\n  options_str: Scalars['String'];\r\n};\r\n\r\n\r\nexport type MutationUpdateOptionsArgs = {\r\n  options_str: Scalars['String'];\r\n};\r\n\r\n\r\nexport type MutationDeleteOptionsArgs = {\r\n  options_str: Scalars['String'];\r\n};\r\n\r\nexport type AuthResponse = {\r\n  __typename?: 'AuthResponse';\r\n  accessToken?: Maybe<Scalars['String']>;\r\n  refreshToken?: Maybe<Scalars['String']>;\r\n};\r\n\r\nexport type AddPaypalOrderMutationVariables = Exact<{\r\n  user_id: Scalars['String'];\r\n  coupon: Scalars['String'];\r\n  products: Scalars['String'];\r\n  purchase_units: Scalars['String'];\r\n}>;\r\n\r\n\r\nexport type AddPaypalOrderMutation = (\r\n  { __typename?: 'Mutation' }\r\n  & Pick<Mutation, 'addPaypalOrder'>\r\n);\r\n\r\nexport type CheckoutMutationVariables = Exact<{\r\n  token: Scalars['String'];\r\n  user_id: Scalars['String'];\r\n  products: Scalars['String'];\r\n  shipping_info: Scalars['String'];\r\n  billing_info: Scalars['String'];\r\n  coupon: Scalars['String'];\r\n}>;\r\n\r\n\r\nexport type CheckoutMutation = (\r\n  { __typename?: 'Mutation' }\r\n  & Pick<Mutation, 'checkout'>\r\n);\r\n\r\nexport type GetAnnouncementsQueryVariables = Exact<{ [key: string]: never; }>;\r\n\r\n\r\nexport type GetAnnouncementsQuery = (\r\n  { __typename?: 'Query' }\r\n  & { getAnnouncements: Array<(\r\n    { __typename?: 'Announcements' }\r\n    & Pick<Announcements, 'id' | 'text'>\r\n  )> }\r\n);\r\n\r\nexport type GetCurrUserQueryVariables = Exact<{ [key: string]: never; }>;\r\n\r\n\r\nexport type GetCurrUserQuery = (\r\n  { __typename?: 'Query' }\r\n  & { getCurrUser: (\r\n    { __typename?: 'Users' }\r\n    & Pick<Users, 'email' | 'uuid' | 'user_id'>\r\n  ) }\r\n);\r\n\r\nexport type GetMaintenanceQueryVariables = Exact<{ [key: string]: never; }>;\r\n\r\n\r\nexport type GetMaintenanceQuery = (\r\n  { __typename?: 'Query' }\r\n  & Pick<Query, 'getMaintenance'>\r\n);\r\n\r\nexport type GetProductQueryVariables = Exact<{\r\n  product_id: Scalars['Float'];\r\n}>;\r\n\r\n\r\nexport type GetProductQuery = (\r\n  { __typename?: 'Query' }\r\n  & { getProduct: (\r\n    { __typename?: 'ProductsWithImages' }\r\n    & Pick<ProductsWithImages, 'product_id' | 'name' | 'desc' | 'price' | 'stock' | 'org_stock' | 'exp_date'>\r\n    & { images?: Maybe<Array<(\r\n      { __typename?: 'Images' }\r\n      & Pick<Images, 'img_id' | 'img_url'>\r\n    )>> }\r\n  ) }\r\n);\r\n\r\nexport type GetProductsQueryVariables = Exact<{ [key: string]: never; }>;\r\n\r\n\r\nexport type GetProductsQuery = (\r\n  { __typename?: 'Query' }\r\n  & { getProducts: Array<(\r\n    { __typename?: 'ProductsWithImages' }\r\n    & Pick<ProductsWithImages, 'product_id' | 'name' | 'desc' | 'price' | 'stock' | 'org_stock' | 'exp_date'>\r\n    & { images?: Maybe<Array<(\r\n      { __typename?: 'Images' }\r\n      & Pick<Images, 'img_id' | 'img_url'>\r\n    )>> }\r\n  )> }\r\n);\r\n\r\nexport type GetProductsByIdsQueryVariables = Exact<{\r\n  products_str: Scalars['String'];\r\n}>;\r\n\r\n\r\nexport type GetProductsByIdsQuery = (\r\n  { __typename?: 'Query' }\r\n  & { getProductsByIds: Array<(\r\n    { __typename?: 'ProductsWithOptionAndImages' }\r\n    & Pick<ProductsWithOptionAndImages, 'product_id' | 'name' | 'desc' | 'price' | 'stock' | 'org_stock' | 'exp_date'>\r\n    & { images?: Maybe<Array<(\r\n      { __typename?: 'Images' }\r\n      & Pick<Images, 'img_id' | 'img_url'>\r\n    )>>, options?: Maybe<Array<(\r\n      { __typename?: 'Options' }\r\n      & Pick<Options, 'option_id' | 'name' | 'price' | 'stock' | 'index'>\r\n    )>> }\r\n  )> }\r\n);\r\n\r\nexport type GetProductsOptionsQueryVariables = Exact<{\r\n  product_id: Scalars['Float'];\r\n}>;\r\n\r\n\r\nexport type GetProductsOptionsQuery = (\r\n  { __typename?: 'Query' }\r\n  & { getProductsOptions: Array<(\r\n    { __typename?: 'Options' }\r\n    & Pick<Options, 'option_id' | 'name' | 'price' | 'stock' | 'index'>\r\n  )> }\r\n);\r\n\r\nexport type GetSectionByIdQueryVariables = Exact<{\r\n  section_id: Scalars['Float'];\r\n}>;\r\n\r\n\r\nexport type GetSectionByIdQuery = (\r\n  { __typename?: 'Query' }\r\n  & { getSectionById: (\r\n    { __typename?: 'Sections' }\r\n    & Pick<Sections, 'section_id' | 'thumbnail' | 'name'>\r\n  ) }\r\n);\r\n\r\nexport type GetSectionsQueryVariables = Exact<{ [key: string]: never; }>;\r\n\r\n\r\nexport type GetSectionsQuery = (\r\n  { __typename?: 'Query' }\r\n  & { getSections: Array<(\r\n    { __typename?: 'Sections' }\r\n    & Pick<Sections, 'section_id' | 'name' | 'thumbnail'>\r\n  )> }\r\n);\r\n\r\nexport type GetSectionsProductsQueryVariables = Exact<{\r\n  section_id: Scalars['Float'];\r\n}>;\r\n\r\n\r\nexport type GetSectionsProductsQuery = (\r\n  { __typename?: 'Query' }\r\n  & { getSectionsProducts: Array<(\r\n    { __typename?: 'ProductsWithImages' }\r\n    & Pick<ProductsWithImages, 'product_id' | 'name' | 'desc' | 'price' | 'stock' | 'org_stock'>\r\n    & { images?: Maybe<Array<(\r\n      { __typename?: 'Images' }\r\n      & Pick<Images, 'img_id' | 'img_url' | 'index'>\r\n    )>> }\r\n  )> }\r\n);\r\n\r\nexport type GetSocialsQueryVariables = Exact<{\r\n  component: Scalars['String'];\r\n}>;\r\n\r\n\r\nexport type GetSocialsQuery = (\r\n  { __typename?: 'Query' }\r\n  & { getSocials: Array<(\r\n    { __typename?: 'Socials' }\r\n    & Pick<Socials, 'id' | 'index' | 'social_url' | 'social_logo' | 'display'>\r\n  )> }\r\n);\r\n\r\nexport type GetUsersOrdersQueryVariables = Exact<{ [key: string]: never; }>;\r\n\r\n\r\nexport type GetUsersOrdersQuery = (\r\n  { __typename?: 'Query' }\r\n  & { getUsersOrders: Array<(\r\n    { __typename?: 'GetOrdersResponse' }\r\n    & Pick<GetOrdersResponse, 'order_id' | 'tracking_num' | 'order_total' | 'coupon' | 'discount' | 'shipping' | 'date_of_purchase'>\r\n    & { products?: Maybe<Array<(\r\n      { __typename?: 'OrdersProductsWithImages' }\r\n      & Pick<OrdersProductsWithImages, 'product_id' | 'name' | 'desc' | 'price' | 'stock' | 'exp_date' | 'quantityOrdered' | 'productSubtotal'>\r\n      & { images?: Maybe<Array<(\r\n        { __typename?: 'Images' }\r\n        & Pick<Images, 'img_id' | 'img_url' | 'index'>\r\n      )>> }\r\n    )>> }\r\n  )> }\r\n);\r\n\r\nexport type LoginMutationVariables = Exact<{\r\n  user_id: Scalars['String'];\r\n  email: Scalars['String'];\r\n}>;\r\n\r\n\r\nexport type LoginMutation = (\r\n  { __typename?: 'Mutation' }\r\n  & { login: (\r\n    { __typename?: 'AuthResponse' }\r\n    & Pick<AuthResponse, 'accessToken' | 'refreshToken'>\r\n  ) }\r\n);\r\n\r\nexport type MaintenanceLoginMutationVariables = Exact<{\r\n  access_id: Scalars['String'];\r\n  password: Scalars['String'];\r\n}>;\r\n\r\n\r\nexport type MaintenanceLoginMutation = (\r\n  { __typename?: 'Mutation' }\r\n  & { maintenanceLogin: (\r\n    { __typename?: 'AuthResponse' }\r\n    & Pick<AuthResponse, 'refreshToken' | 'accessToken'>\r\n  ) }\r\n);\r\n\r\nexport type PaypalCheckoutMutationVariables = Exact<{\r\n  products: Scalars['String'];\r\n  coupon: Scalars['String'];\r\n}>;\r\n\r\n\r\nexport type PaypalCheckoutMutation = (\r\n  { __typename?: 'Mutation' }\r\n  & Pick<Mutation, 'paypalCheckout'>\r\n);\r\n\r\nexport type ValidateCouponMutationVariables = Exact<{\r\n  coupon_name: Scalars['String'];\r\n}>;\r\n\r\n\r\nexport type ValidateCouponMutation = (\r\n  { __typename?: 'Mutation' }\r\n  & Pick<Mutation, 'validateCoupon'>\r\n);\r\n\r\n\r\nexport const AddPaypalOrderDocument = gql`\r\n    mutation addPaypalOrder($user_id: String!, $coupon: String!, $products: String!, $purchase_units: String!) {\r\n  addPaypalOrder(\r\n    user_id: $user_id\r\n    coupon: $coupon\r\n    products: $products\r\n    purchase_units: $purchase_units\r\n  )\r\n}\r\n    `;\r\nexport type AddPaypalOrderMutationFn = Apollo.MutationFunction<AddPaypalOrderMutation, AddPaypalOrderMutationVariables>;\r\n\r\n/**\r\n * __useAddPaypalOrderMutation__\r\n *\r\n * To run a mutation, you first call `useAddPaypalOrderMutation` within a React component and pass it any options that fit your needs.\r\n * When your component renders, `useAddPaypalOrderMutation` returns a tuple that includes:\r\n * - A mutate function that you can call at any time to execute the mutation\r\n * - An object with fields that represent the current status of the mutation's execution\r\n *\r\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\r\n *\r\n * @example\r\n * const [addPaypalOrderMutation, { data, loading, error }] = useAddPaypalOrderMutation({\r\n *   variables: {\r\n *      user_id: // value for 'user_id'\r\n *      coupon: // value for 'coupon'\r\n *      products: // value for 'products'\r\n *      purchase_units: // value for 'purchase_units'\r\n *   },\r\n * });\r\n */\r\nexport function useAddPaypalOrderMutation(baseOptions?: Apollo.MutationHookOptions<AddPaypalOrderMutation, AddPaypalOrderMutationVariables>) {\r\n        return Apollo.useMutation<AddPaypalOrderMutation, AddPaypalOrderMutationVariables>(AddPaypalOrderDocument, baseOptions);\r\n      }\r\nexport type AddPaypalOrderMutationHookResult = ReturnType<typeof useAddPaypalOrderMutation>;\r\nexport type AddPaypalOrderMutationResult = Apollo.MutationResult<AddPaypalOrderMutation>;\r\nexport type AddPaypalOrderMutationOptions = Apollo.BaseMutationOptions<AddPaypalOrderMutation, AddPaypalOrderMutationVariables>;\r\nexport const CheckoutDocument = gql`\r\n    mutation checkout($token: String!, $user_id: String!, $products: String!, $shipping_info: String!, $billing_info: String!, $coupon: String!) {\r\n  checkout(\r\n    token: $token\r\n    user_id: $user_id\r\n    products: $products\r\n    shipping_info: $shipping_info\r\n    billing_info: $billing_info\r\n    coupon: $coupon\r\n  )\r\n}\r\n    `;\r\nexport type CheckoutMutationFn = Apollo.MutationFunction<CheckoutMutation, CheckoutMutationVariables>;\r\n\r\n/**\r\n * __useCheckoutMutation__\r\n *\r\n * To run a mutation, you first call `useCheckoutMutation` within a React component and pass it any options that fit your needs.\r\n * When your component renders, `useCheckoutMutation` returns a tuple that includes:\r\n * - A mutate function that you can call at any time to execute the mutation\r\n * - An object with fields that represent the current status of the mutation's execution\r\n *\r\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\r\n *\r\n * @example\r\n * const [checkoutMutation, { data, loading, error }] = useCheckoutMutation({\r\n *   variables: {\r\n *      token: // value for 'token'\r\n *      user_id: // value for 'user_id'\r\n *      products: // value for 'products'\r\n *      shipping_info: // value for 'shipping_info'\r\n *      billing_info: // value for 'billing_info'\r\n *      coupon: // value for 'coupon'\r\n *   },\r\n * });\r\n */\r\nexport function useCheckoutMutation(baseOptions?: Apollo.MutationHookOptions<CheckoutMutation, CheckoutMutationVariables>) {\r\n        return Apollo.useMutation<CheckoutMutation, CheckoutMutationVariables>(CheckoutDocument, baseOptions);\r\n      }\r\nexport type CheckoutMutationHookResult = ReturnType<typeof useCheckoutMutation>;\r\nexport type CheckoutMutationResult = Apollo.MutationResult<CheckoutMutation>;\r\nexport type CheckoutMutationOptions = Apollo.BaseMutationOptions<CheckoutMutation, CheckoutMutationVariables>;\r\nexport const GetAnnouncementsDocument = gql`\r\n    query getAnnouncements {\r\n  getAnnouncements {\r\n    id\r\n    text\r\n  }\r\n}\r\n    `;\r\n\r\n/**\r\n * __useGetAnnouncementsQuery__\r\n *\r\n * To run a query within a React component, call `useGetAnnouncementsQuery` and pass it any options that fit your needs.\r\n * When your component renders, `useGetAnnouncementsQuery` returns an object from Apollo Client that contains loading, error, and data properties\r\n * you can use to render your UI.\r\n *\r\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\r\n *\r\n * @example\r\n * const { data, loading, error } = useGetAnnouncementsQuery({\r\n *   variables: {\r\n *   },\r\n * });\r\n */\r\nexport function useGetAnnouncementsQuery(baseOptions?: Apollo.QueryHookOptions<GetAnnouncementsQuery, GetAnnouncementsQueryVariables>) {\r\n        return Apollo.useQuery<GetAnnouncementsQuery, GetAnnouncementsQueryVariables>(GetAnnouncementsDocument, baseOptions);\r\n      }\r\nexport function useGetAnnouncementsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetAnnouncementsQuery, GetAnnouncementsQueryVariables>) {\r\n          return Apollo.useLazyQuery<GetAnnouncementsQuery, GetAnnouncementsQueryVariables>(GetAnnouncementsDocument, baseOptions);\r\n        }\r\nexport type GetAnnouncementsQueryHookResult = ReturnType<typeof useGetAnnouncementsQuery>;\r\nexport type GetAnnouncementsLazyQueryHookResult = ReturnType<typeof useGetAnnouncementsLazyQuery>;\r\nexport type GetAnnouncementsQueryResult = Apollo.QueryResult<GetAnnouncementsQuery, GetAnnouncementsQueryVariables>;\r\nexport const GetCurrUserDocument = gql`\r\n    query getCurrUser {\r\n  getCurrUser {\r\n    email\r\n    uuid\r\n    user_id\r\n  }\r\n}\r\n    `;\r\n\r\n/**\r\n * __useGetCurrUserQuery__\r\n *\r\n * To run a query within a React component, call `useGetCurrUserQuery` and pass it any options that fit your needs.\r\n * When your component renders, `useGetCurrUserQuery` returns an object from Apollo Client that contains loading, error, and data properties\r\n * you can use to render your UI.\r\n *\r\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\r\n *\r\n * @example\r\n * const { data, loading, error } = useGetCurrUserQuery({\r\n *   variables: {\r\n *   },\r\n * });\r\n */\r\nexport function useGetCurrUserQuery(baseOptions?: Apollo.QueryHookOptions<GetCurrUserQuery, GetCurrUserQueryVariables>) {\r\n        return Apollo.useQuery<GetCurrUserQuery, GetCurrUserQueryVariables>(GetCurrUserDocument, baseOptions);\r\n      }\r\nexport function useGetCurrUserLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetCurrUserQuery, GetCurrUserQueryVariables>) {\r\n          return Apollo.useLazyQuery<GetCurrUserQuery, GetCurrUserQueryVariables>(GetCurrUserDocument, baseOptions);\r\n        }\r\nexport type GetCurrUserQueryHookResult = ReturnType<typeof useGetCurrUserQuery>;\r\nexport type GetCurrUserLazyQueryHookResult = ReturnType<typeof useGetCurrUserLazyQuery>;\r\nexport type GetCurrUserQueryResult = Apollo.QueryResult<GetCurrUserQuery, GetCurrUserQueryVariables>;\r\nexport const GetMaintenanceDocument = gql`\r\n    query getMaintenance {\r\n  getMaintenance\r\n}\r\n    `;\r\n\r\n/**\r\n * __useGetMaintenanceQuery__\r\n *\r\n * To run a query within a React component, call `useGetMaintenanceQuery` and pass it any options that fit your needs.\r\n * When your component renders, `useGetMaintenanceQuery` returns an object from Apollo Client that contains loading, error, and data properties\r\n * you can use to render your UI.\r\n *\r\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\r\n *\r\n * @example\r\n * const { data, loading, error } = useGetMaintenanceQuery({\r\n *   variables: {\r\n *   },\r\n * });\r\n */\r\nexport function useGetMaintenanceQuery(baseOptions?: Apollo.QueryHookOptions<GetMaintenanceQuery, GetMaintenanceQueryVariables>) {\r\n        return Apollo.useQuery<GetMaintenanceQuery, GetMaintenanceQueryVariables>(GetMaintenanceDocument, baseOptions);\r\n      }\r\nexport function useGetMaintenanceLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetMaintenanceQuery, GetMaintenanceQueryVariables>) {\r\n          return Apollo.useLazyQuery<GetMaintenanceQuery, GetMaintenanceQueryVariables>(GetMaintenanceDocument, baseOptions);\r\n        }\r\nexport type GetMaintenanceQueryHookResult = ReturnType<typeof useGetMaintenanceQuery>;\r\nexport type GetMaintenanceLazyQueryHookResult = ReturnType<typeof useGetMaintenanceLazyQuery>;\r\nexport type GetMaintenanceQueryResult = Apollo.QueryResult<GetMaintenanceQuery, GetMaintenanceQueryVariables>;\r\nexport const GetProductDocument = gql`\r\n    query getProduct($product_id: Float!) {\r\n  getProduct(product_id: $product_id) {\r\n    product_id\r\n    name\r\n    desc\r\n    price\r\n    stock\r\n    org_stock\r\n    exp_date\r\n    images {\r\n      img_id\r\n      img_url\r\n    }\r\n  }\r\n}\r\n    `;\r\n\r\n/**\r\n * __useGetProductQuery__\r\n *\r\n * To run a query within a React component, call `useGetProductQuery` and pass it any options that fit your needs.\r\n * When your component renders, `useGetProductQuery` returns an object from Apollo Client that contains loading, error, and data properties\r\n * you can use to render your UI.\r\n *\r\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\r\n *\r\n * @example\r\n * const { data, loading, error } = useGetProductQuery({\r\n *   variables: {\r\n *      product_id: // value for 'product_id'\r\n *   },\r\n * });\r\n */\r\nexport function useGetProductQuery(baseOptions: Apollo.QueryHookOptions<GetProductQuery, GetProductQueryVariables>) {\r\n        return Apollo.useQuery<GetProductQuery, GetProductQueryVariables>(GetProductDocument, baseOptions);\r\n      }\r\nexport function useGetProductLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetProductQuery, GetProductQueryVariables>) {\r\n          return Apollo.useLazyQuery<GetProductQuery, GetProductQueryVariables>(GetProductDocument, baseOptions);\r\n        }\r\nexport type GetProductQueryHookResult = ReturnType<typeof useGetProductQuery>;\r\nexport type GetProductLazyQueryHookResult = ReturnType<typeof useGetProductLazyQuery>;\r\nexport type GetProductQueryResult = Apollo.QueryResult<GetProductQuery, GetProductQueryVariables>;\r\nexport const GetProductsDocument = gql`\r\n    query getProducts {\r\n  getProducts {\r\n    product_id\r\n    name\r\n    desc\r\n    price\r\n    stock\r\n    org_stock\r\n    exp_date\r\n    images {\r\n      img_id\r\n      img_url\r\n    }\r\n  }\r\n}\r\n    `;\r\n\r\n/**\r\n * __useGetProductsQuery__\r\n *\r\n * To run a query within a React component, call `useGetProductsQuery` and pass it any options that fit your needs.\r\n * When your component renders, `useGetProductsQuery` returns an object from Apollo Client that contains loading, error, and data properties\r\n * you can use to render your UI.\r\n *\r\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\r\n *\r\n * @example\r\n * const { data, loading, error } = useGetProductsQuery({\r\n *   variables: {\r\n *   },\r\n * });\r\n */\r\nexport function useGetProductsQuery(baseOptions?: Apollo.QueryHookOptions<GetProductsQuery, GetProductsQueryVariables>) {\r\n        return Apollo.useQuery<GetProductsQuery, GetProductsQueryVariables>(GetProductsDocument, baseOptions);\r\n      }\r\nexport function useGetProductsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetProductsQuery, GetProductsQueryVariables>) {\r\n          return Apollo.useLazyQuery<GetProductsQuery, GetProductsQueryVariables>(GetProductsDocument, baseOptions);\r\n        }\r\nexport type GetProductsQueryHookResult = ReturnType<typeof useGetProductsQuery>;\r\nexport type GetProductsLazyQueryHookResult = ReturnType<typeof useGetProductsLazyQuery>;\r\nexport type GetProductsQueryResult = Apollo.QueryResult<GetProductsQuery, GetProductsQueryVariables>;\r\nexport const GetProductsByIdsDocument = gql`\r\n    query getProductsByIds($products_str: String!) {\r\n  getProductsByIds(products_str: $products_str) {\r\n    product_id\r\n    name\r\n    desc\r\n    price\r\n    stock\r\n    org_stock\r\n    exp_date\r\n    images {\r\n      img_id\r\n      img_url\r\n    }\r\n    options {\r\n      option_id\r\n      name\r\n      price\r\n      stock\r\n      index\r\n    }\r\n  }\r\n}\r\n    `;\r\n\r\n/**\r\n * __useGetProductsByIdsQuery__\r\n *\r\n * To run a query within a React component, call `useGetProductsByIdsQuery` and pass it any options that fit your needs.\r\n * When your component renders, `useGetProductsByIdsQuery` returns an object from Apollo Client that contains loading, error, and data properties\r\n * you can use to render your UI.\r\n *\r\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\r\n *\r\n * @example\r\n * const { data, loading, error } = useGetProductsByIdsQuery({\r\n *   variables: {\r\n *      products_str: // value for 'products_str'\r\n *   },\r\n * });\r\n */\r\nexport function useGetProductsByIdsQuery(baseOptions: Apollo.QueryHookOptions<GetProductsByIdsQuery, GetProductsByIdsQueryVariables>) {\r\n        return Apollo.useQuery<GetProductsByIdsQuery, GetProductsByIdsQueryVariables>(GetProductsByIdsDocument, baseOptions);\r\n      }\r\nexport function useGetProductsByIdsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetProductsByIdsQuery, GetProductsByIdsQueryVariables>) {\r\n          return Apollo.useLazyQuery<GetProductsByIdsQuery, GetProductsByIdsQueryVariables>(GetProductsByIdsDocument, baseOptions);\r\n        }\r\nexport type GetProductsByIdsQueryHookResult = ReturnType<typeof useGetProductsByIdsQuery>;\r\nexport type GetProductsByIdsLazyQueryHookResult = ReturnType<typeof useGetProductsByIdsLazyQuery>;\r\nexport type GetProductsByIdsQueryResult = Apollo.QueryResult<GetProductsByIdsQuery, GetProductsByIdsQueryVariables>;\r\nexport const GetProductsOptionsDocument = gql`\r\n    query getProductsOptions($product_id: Float!) {\r\n  getProductsOptions(product_id: $product_id) {\r\n    option_id\r\n    name\r\n    price\r\n    stock\r\n    index\r\n  }\r\n}\r\n    `;\r\n\r\n/**\r\n * __useGetProductsOptionsQuery__\r\n *\r\n * To run a query within a React component, call `useGetProductsOptionsQuery` and pass it any options that fit your needs.\r\n * When your component renders, `useGetProductsOptionsQuery` returns an object from Apollo Client that contains loading, error, and data properties\r\n * you can use to render your UI.\r\n *\r\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\r\n *\r\n * @example\r\n * const { data, loading, error } = useGetProductsOptionsQuery({\r\n *   variables: {\r\n *      product_id: // value for 'product_id'\r\n *   },\r\n * });\r\n */\r\nexport function useGetProductsOptionsQuery(baseOptions: Apollo.QueryHookOptions<GetProductsOptionsQuery, GetProductsOptionsQueryVariables>) {\r\n        return Apollo.useQuery<GetProductsOptionsQuery, GetProductsOptionsQueryVariables>(GetProductsOptionsDocument, baseOptions);\r\n      }\r\nexport function useGetProductsOptionsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetProductsOptionsQuery, GetProductsOptionsQueryVariables>) {\r\n          return Apollo.useLazyQuery<GetProductsOptionsQuery, GetProductsOptionsQueryVariables>(GetProductsOptionsDocument, baseOptions);\r\n        }\r\nexport type GetProductsOptionsQueryHookResult = ReturnType<typeof useGetProductsOptionsQuery>;\r\nexport type GetProductsOptionsLazyQueryHookResult = ReturnType<typeof useGetProductsOptionsLazyQuery>;\r\nexport type GetProductsOptionsQueryResult = Apollo.QueryResult<GetProductsOptionsQuery, GetProductsOptionsQueryVariables>;\r\nexport const GetSectionByIdDocument = gql`\r\n    query getSectionById($section_id: Float!) {\r\n  getSectionById(section_id: $section_id) {\r\n    section_id\r\n    thumbnail\r\n    name\r\n  }\r\n}\r\n    `;\r\n\r\n/**\r\n * __useGetSectionByIdQuery__\r\n *\r\n * To run a query within a React component, call `useGetSectionByIdQuery` and pass it any options that fit your needs.\r\n * When your component renders, `useGetSectionByIdQuery` returns an object from Apollo Client that contains loading, error, and data properties\r\n * you can use to render your UI.\r\n *\r\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\r\n *\r\n * @example\r\n * const { data, loading, error } = useGetSectionByIdQuery({\r\n *   variables: {\r\n *      section_id: // value for 'section_id'\r\n *   },\r\n * });\r\n */\r\nexport function useGetSectionByIdQuery(baseOptions: Apollo.QueryHookOptions<GetSectionByIdQuery, GetSectionByIdQueryVariables>) {\r\n        return Apollo.useQuery<GetSectionByIdQuery, GetSectionByIdQueryVariables>(GetSectionByIdDocument, baseOptions);\r\n      }\r\nexport function useGetSectionByIdLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetSectionByIdQuery, GetSectionByIdQueryVariables>) {\r\n          return Apollo.useLazyQuery<GetSectionByIdQuery, GetSectionByIdQueryVariables>(GetSectionByIdDocument, baseOptions);\r\n        }\r\nexport type GetSectionByIdQueryHookResult = ReturnType<typeof useGetSectionByIdQuery>;\r\nexport type GetSectionByIdLazyQueryHookResult = ReturnType<typeof useGetSectionByIdLazyQuery>;\r\nexport type GetSectionByIdQueryResult = Apollo.QueryResult<GetSectionByIdQuery, GetSectionByIdQueryVariables>;\r\nexport const GetSectionsDocument = gql`\r\n    query getSections {\r\n  getSections {\r\n    section_id\r\n    name\r\n    thumbnail\r\n  }\r\n}\r\n    `;\r\n\r\n/**\r\n * __useGetSectionsQuery__\r\n *\r\n * To run a query within a React component, call `useGetSectionsQuery` and pass it any options that fit your needs.\r\n * When your component renders, `useGetSectionsQuery` returns an object from Apollo Client that contains loading, error, and data properties\r\n * you can use to render your UI.\r\n *\r\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\r\n *\r\n * @example\r\n * const { data, loading, error } = useGetSectionsQuery({\r\n *   variables: {\r\n *   },\r\n * });\r\n */\r\nexport function useGetSectionsQuery(baseOptions?: Apollo.QueryHookOptions<GetSectionsQuery, GetSectionsQueryVariables>) {\r\n        return Apollo.useQuery<GetSectionsQuery, GetSectionsQueryVariables>(GetSectionsDocument, baseOptions);\r\n      }\r\nexport function useGetSectionsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetSectionsQuery, GetSectionsQueryVariables>) {\r\n          return Apollo.useLazyQuery<GetSectionsQuery, GetSectionsQueryVariables>(GetSectionsDocument, baseOptions);\r\n        }\r\nexport type GetSectionsQueryHookResult = ReturnType<typeof useGetSectionsQuery>;\r\nexport type GetSectionsLazyQueryHookResult = ReturnType<typeof useGetSectionsLazyQuery>;\r\nexport type GetSectionsQueryResult = Apollo.QueryResult<GetSectionsQuery, GetSectionsQueryVariables>;\r\nexport const GetSectionsProductsDocument = gql`\r\n    query getSectionsProducts($section_id: Float!) {\r\n  getSectionsProducts(section_id: $section_id) {\r\n    product_id\r\n    name\r\n    desc\r\n    price\r\n    stock\r\n    org_stock\r\n    images {\r\n      img_id\r\n      img_url\r\n      index\r\n    }\r\n  }\r\n}\r\n    `;\r\n\r\n/**\r\n * __useGetSectionsProductsQuery__\r\n *\r\n * To run a query within a React component, call `useGetSectionsProductsQuery` and pass it any options that fit your needs.\r\n * When your component renders, `useGetSectionsProductsQuery` returns an object from Apollo Client that contains loading, error, and data properties\r\n * you can use to render your UI.\r\n *\r\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\r\n *\r\n * @example\r\n * const { data, loading, error } = useGetSectionsProductsQuery({\r\n *   variables: {\r\n *      section_id: // value for 'section_id'\r\n *   },\r\n * });\r\n */\r\nexport function useGetSectionsProductsQuery(baseOptions: Apollo.QueryHookOptions<GetSectionsProductsQuery, GetSectionsProductsQueryVariables>) {\r\n        return Apollo.useQuery<GetSectionsProductsQuery, GetSectionsProductsQueryVariables>(GetSectionsProductsDocument, baseOptions);\r\n      }\r\nexport function useGetSectionsProductsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetSectionsProductsQuery, GetSectionsProductsQueryVariables>) {\r\n          return Apollo.useLazyQuery<GetSectionsProductsQuery, GetSectionsProductsQueryVariables>(GetSectionsProductsDocument, baseOptions);\r\n        }\r\nexport type GetSectionsProductsQueryHookResult = ReturnType<typeof useGetSectionsProductsQuery>;\r\nexport type GetSectionsProductsLazyQueryHookResult = ReturnType<typeof useGetSectionsProductsLazyQuery>;\r\nexport type GetSectionsProductsQueryResult = Apollo.QueryResult<GetSectionsProductsQuery, GetSectionsProductsQueryVariables>;\r\nexport const GetSocialsDocument = gql`\r\n    query getSocials($component: String!) {\r\n  getSocials(component: $component) {\r\n    id\r\n    index\r\n    social_url\r\n    social_logo\r\n    display\r\n  }\r\n}\r\n    `;\r\n\r\n/**\r\n * __useGetSocialsQuery__\r\n *\r\n * To run a query within a React component, call `useGetSocialsQuery` and pass it any options that fit your needs.\r\n * When your component renders, `useGetSocialsQuery` returns an object from Apollo Client that contains loading, error, and data properties\r\n * you can use to render your UI.\r\n *\r\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\r\n *\r\n * @example\r\n * const { data, loading, error } = useGetSocialsQuery({\r\n *   variables: {\r\n *      component: // value for 'component'\r\n *   },\r\n * });\r\n */\r\nexport function useGetSocialsQuery(baseOptions: Apollo.QueryHookOptions<GetSocialsQuery, GetSocialsQueryVariables>) {\r\n        return Apollo.useQuery<GetSocialsQuery, GetSocialsQueryVariables>(GetSocialsDocument, baseOptions);\r\n      }\r\nexport function useGetSocialsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetSocialsQuery, GetSocialsQueryVariables>) {\r\n          return Apollo.useLazyQuery<GetSocialsQuery, GetSocialsQueryVariables>(GetSocialsDocument, baseOptions);\r\n        }\r\nexport type GetSocialsQueryHookResult = ReturnType<typeof useGetSocialsQuery>;\r\nexport type GetSocialsLazyQueryHookResult = ReturnType<typeof useGetSocialsLazyQuery>;\r\nexport type GetSocialsQueryResult = Apollo.QueryResult<GetSocialsQuery, GetSocialsQueryVariables>;\r\nexport const GetUsersOrdersDocument = gql`\r\n    query getUsersOrders {\r\n  getUsersOrders {\r\n    products {\r\n      product_id\r\n      name\r\n      desc\r\n      price\r\n      stock\r\n      exp_date\r\n      quantityOrdered\r\n      productSubtotal\r\n      images {\r\n        img_id\r\n        img_url\r\n        index\r\n      }\r\n    }\r\n    order_id\r\n    tracking_num\r\n    order_total\r\n    coupon\r\n    discount\r\n    shipping\r\n    date_of_purchase\r\n  }\r\n}\r\n    `;\r\n\r\n/**\r\n * __useGetUsersOrdersQuery__\r\n *\r\n * To run a query within a React component, call `useGetUsersOrdersQuery` and pass it any options that fit your needs.\r\n * When your component renders, `useGetUsersOrdersQuery` returns an object from Apollo Client that contains loading, error, and data properties\r\n * you can use to render your UI.\r\n *\r\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\r\n *\r\n * @example\r\n * const { data, loading, error } = useGetUsersOrdersQuery({\r\n *   variables: {\r\n *   },\r\n * });\r\n */\r\nexport function useGetUsersOrdersQuery(baseOptions?: Apollo.QueryHookOptions<GetUsersOrdersQuery, GetUsersOrdersQueryVariables>) {\r\n        return Apollo.useQuery<GetUsersOrdersQuery, GetUsersOrdersQueryVariables>(GetUsersOrdersDocument, baseOptions);\r\n      }\r\nexport function useGetUsersOrdersLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetUsersOrdersQuery, GetUsersOrdersQueryVariables>) {\r\n          return Apollo.useLazyQuery<GetUsersOrdersQuery, GetUsersOrdersQueryVariables>(GetUsersOrdersDocument, baseOptions);\r\n        }\r\nexport type GetUsersOrdersQueryHookResult = ReturnType<typeof useGetUsersOrdersQuery>;\r\nexport type GetUsersOrdersLazyQueryHookResult = ReturnType<typeof useGetUsersOrdersLazyQuery>;\r\nexport type GetUsersOrdersQueryResult = Apollo.QueryResult<GetUsersOrdersQuery, GetUsersOrdersQueryVariables>;\r\nexport const LoginDocument = gql`\r\n    mutation login($user_id: String!, $email: String!) {\r\n  login(user_id: $user_id, email: $email) {\r\n    accessToken\r\n    refreshToken\r\n  }\r\n}\r\n    `;\r\nexport type LoginMutationFn = Apollo.MutationFunction<LoginMutation, LoginMutationVariables>;\r\n\r\n/**\r\n * __useLoginMutation__\r\n *\r\n * To run a mutation, you first call `useLoginMutation` within a React component and pass it any options that fit your needs.\r\n * When your component renders, `useLoginMutation` returns a tuple that includes:\r\n * - A mutate function that you can call at any time to execute the mutation\r\n * - An object with fields that represent the current status of the mutation's execution\r\n *\r\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\r\n *\r\n * @example\r\n * const [loginMutation, { data, loading, error }] = useLoginMutation({\r\n *   variables: {\r\n *      user_id: // value for 'user_id'\r\n *      email: // value for 'email'\r\n *   },\r\n * });\r\n */\r\nexport function useLoginMutation(baseOptions?: Apollo.MutationHookOptions<LoginMutation, LoginMutationVariables>) {\r\n        return Apollo.useMutation<LoginMutation, LoginMutationVariables>(LoginDocument, baseOptions);\r\n      }\r\nexport type LoginMutationHookResult = ReturnType<typeof useLoginMutation>;\r\nexport type LoginMutationResult = Apollo.MutationResult<LoginMutation>;\r\nexport type LoginMutationOptions = Apollo.BaseMutationOptions<LoginMutation, LoginMutationVariables>;\r\nexport const MaintenanceLoginDocument = gql`\r\n    mutation maintenanceLogin($access_id: String!, $password: String!) {\r\n  maintenanceLogin(access_id: $access_id, password: $password) {\r\n    refreshToken\r\n    accessToken\r\n  }\r\n}\r\n    `;\r\nexport type MaintenanceLoginMutationFn = Apollo.MutationFunction<MaintenanceLoginMutation, MaintenanceLoginMutationVariables>;\r\n\r\n/**\r\n * __useMaintenanceLoginMutation__\r\n *\r\n * To run a mutation, you first call `useMaintenanceLoginMutation` within a React component and pass it any options that fit your needs.\r\n * When your component renders, `useMaintenanceLoginMutation` returns a tuple that includes:\r\n * - A mutate function that you can call at any time to execute the mutation\r\n * - An object with fields that represent the current status of the mutation's execution\r\n *\r\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\r\n *\r\n * @example\r\n * const [maintenanceLoginMutation, { data, loading, error }] = useMaintenanceLoginMutation({\r\n *   variables: {\r\n *      access_id: // value for 'access_id'\r\n *      password: // value for 'password'\r\n *   },\r\n * });\r\n */\r\nexport function useMaintenanceLoginMutation(baseOptions?: Apollo.MutationHookOptions<MaintenanceLoginMutation, MaintenanceLoginMutationVariables>) {\r\n        return Apollo.useMutation<MaintenanceLoginMutation, MaintenanceLoginMutationVariables>(MaintenanceLoginDocument, baseOptions);\r\n      }\r\nexport type MaintenanceLoginMutationHookResult = ReturnType<typeof useMaintenanceLoginMutation>;\r\nexport type MaintenanceLoginMutationResult = Apollo.MutationResult<MaintenanceLoginMutation>;\r\nexport type MaintenanceLoginMutationOptions = Apollo.BaseMutationOptions<MaintenanceLoginMutation, MaintenanceLoginMutationVariables>;\r\nexport const PaypalCheckoutDocument = gql`\r\n    mutation paypalCheckout($products: String!, $coupon: String!) {\r\n  paypalCheckout(products: $products, coupon: $coupon)\r\n}\r\n    `;\r\nexport type PaypalCheckoutMutationFn = Apollo.MutationFunction<PaypalCheckoutMutation, PaypalCheckoutMutationVariables>;\r\n\r\n/**\r\n * __usePaypalCheckoutMutation__\r\n *\r\n * To run a mutation, you first call `usePaypalCheckoutMutation` within a React component and pass it any options that fit your needs.\r\n * When your component renders, `usePaypalCheckoutMutation` returns a tuple that includes:\r\n * - A mutate function that you can call at any time to execute the mutation\r\n * - An object with fields that represent the current status of the mutation's execution\r\n *\r\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\r\n *\r\n * @example\r\n * const [paypalCheckoutMutation, { data, loading, error }] = usePaypalCheckoutMutation({\r\n *   variables: {\r\n *      products: // value for 'products'\r\n *      coupon: // value for 'coupon'\r\n *   },\r\n * });\r\n */\r\nexport function usePaypalCheckoutMutation(baseOptions?: Apollo.MutationHookOptions<PaypalCheckoutMutation, PaypalCheckoutMutationVariables>) {\r\n        return Apollo.useMutation<PaypalCheckoutMutation, PaypalCheckoutMutationVariables>(PaypalCheckoutDocument, baseOptions);\r\n      }\r\nexport type PaypalCheckoutMutationHookResult = ReturnType<typeof usePaypalCheckoutMutation>;\r\nexport type PaypalCheckoutMutationResult = Apollo.MutationResult<PaypalCheckoutMutation>;\r\nexport type PaypalCheckoutMutationOptions = Apollo.BaseMutationOptions<PaypalCheckoutMutation, PaypalCheckoutMutationVariables>;\r\nexport const ValidateCouponDocument = gql`\r\n    mutation validateCoupon($coupon_name: String!) {\r\n  validateCoupon(coupon_name: $coupon_name)\r\n}\r\n    `;\r\nexport type ValidateCouponMutationFn = Apollo.MutationFunction<ValidateCouponMutation, ValidateCouponMutationVariables>;\r\n\r\n/**\r\n * __useValidateCouponMutation__\r\n *\r\n * To run a mutation, you first call `useValidateCouponMutation` within a React component and pass it any options that fit your needs.\r\n * When your component renders, `useValidateCouponMutation` returns a tuple that includes:\r\n * - A mutate function that you can call at any time to execute the mutation\r\n * - An object with fields that represent the current status of the mutation's execution\r\n *\r\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\r\n *\r\n * @example\r\n * const [validateCouponMutation, { data, loading, error }] = useValidateCouponMutation({\r\n *   variables: {\r\n *      coupon_name: // value for 'coupon_name'\r\n *   },\r\n * });\r\n */\r\nexport function useValidateCouponMutation(baseOptions?: Apollo.MutationHookOptions<ValidateCouponMutation, ValidateCouponMutationVariables>) {\r\n        return Apollo.useMutation<ValidateCouponMutation, ValidateCouponMutationVariables>(ValidateCouponDocument, baseOptions);\r\n      }\r\nexport type ValidateCouponMutationHookResult = ReturnType<typeof useValidateCouponMutation>;\r\nexport type ValidateCouponMutationResult = Apollo.MutationResult<ValidateCouponMutation>;\r\nexport type ValidateCouponMutationOptions = Apollo.BaseMutationOptions<ValidateCouponMutation, ValidateCouponMutationVariables>;","import { FaInstagram, FaEnvelope, FaTwitter, FaFacebook } from \"react-icons/fa\";\r\nimport {\r\n    useGetAnnouncementsQuery,\r\n    useGetSocialsQuery,\r\n} from \"../../generated/graphql\";\r\nimport anime from \"animejs\";\r\nimport { useEffect } from \"react\";\r\n\r\n// const pickIntro = () => {\r\n//     const animations = [\r\n//         {\r\n//             targets: \".announcement-1 .letter\",\r\n//             translateX: [40, 0],\r\n//             translateZ: 0,\r\n//             opacity: [0, 1],\r\n//             easing: \"easeOutExpo\",\r\n//             duration: 1200,\r\n//             delay: (el, i) => 500 + 30 * i,\r\n//         },\r\n//     ]; //define animations here\r\n//     let index = Math.floor(Math.random() * animations.length - 1 + 1);\r\n//     return animations[index];\r\n// };\r\n\r\n// const pickOutro = () => {\r\n//     const animations = [\r\n//         {\r\n//             targets: \".announcement-1 .letter\",\r\n//             translateY: [0, -100],\r\n//             opacity: [1, 0],\r\n//             easing: \"easeInExpo\",\r\n//             duration: 1200,\r\n//             delay: (el, i) => 100 + 30 * i,\r\n//         },\r\n//     ]; //define animations here\r\n//     let index = Math.floor(Math.random() * animations.length - 1 + 1);\r\n//     return animations[index];\r\n// };\r\n\r\nconst GetSocials = () => {\r\n    const { data, loading } = useGetSocialsQuery({\r\n        variables: {\r\n            component: \"footer\",\r\n        },\r\n    });\r\n    const sdata = data,\r\n        sloading = loading;\r\n    return { sdata, sloading };\r\n};\r\n\r\nconst AnnouncementBar = () => {\r\n    const { sdata, sloading } = GetSocials();\r\n    const { data, loading, error } = useGetAnnouncementsQuery();\r\n\r\n    useEffect(() => {\r\n        // let timelines = [] as any[];\r\n\r\n        if (!!data && !!document.getElementById(`announcement-0`)) {\r\n            for (let i = 0; i < data.getAnnouncements.length; i++) {\r\n                var textWrapper = document.getElementById(`announcement-${i}`);\r\n                textWrapper!.innerHTML = textWrapper!.textContent!.replace(\r\n                    /\\S/g,\r\n                    \"<span class='letter'>$&</span>\"\r\n                );\r\n            }\r\n\r\n            let tl = 0;\r\n            anime\r\n                .timeline({\r\n                    loop: true,\r\n                    loopBegin: () => {\r\n                        if (!document.getElementById(`announcement-${tl}`)) {\r\n                            tl = 0;\r\n                        }\r\n                        if (document.getElementById(`announcement-${tl}`)) {\r\n                            document.getElementById(\r\n                                `announcement-${tl}`\r\n                            )!.style.display = \"block\";\r\n                        }\r\n                    },\r\n                    loopComplete: () => {\r\n                        if (document.getElementById(`announcement-${tl}`)) {\r\n                            document.getElementById(\r\n                                `announcement-${tl}`\r\n                            )!.style.display = \"none\";\r\n                            tl++;\r\n                        }\r\n                    },\r\n                })\r\n                .add({\r\n                    targets: `.announcement .letter`,\r\n                    translateY: [100, 0],\r\n                    translateZ: 0,\r\n                    opacity: [0, 1],\r\n                    easing: \"easeOutExpo\",\r\n                    duration: 1400,\r\n                    delay: (el, i) => 300 + 30 * i,\r\n                })\r\n                .add(\r\n                    {\r\n                        targets: `.announcement .letter`,\r\n                        translateX: [0, -30],\r\n                        opacity: [1, 0],\r\n                        easing: \"easeOutQuart\",\r\n                        duration: 1000,\r\n                        delay: (el, i) => 100 + 30 * i,\r\n                    },\r\n                    \"+=25000\"\r\n                );\r\n        }\r\n    }, [data]);\r\n\r\n    if (loading || sloading) {\r\n        return <></>;\r\n    }\r\n\r\n    if (error || !data || data.getAnnouncements.length === 0) {\r\n        return <></>;\r\n    }\r\n\r\n    return (\r\n        <div\r\n            style={{\r\n                width: \"100%\",\r\n                backgroundColor: \"rgb(13, 3, 3)\",\r\n                color: \"#fff\",\r\n                zIndex: 3,\r\n                position: \"relative\",\r\n            }}\r\n        >\r\n            <div\r\n                className=\"container\"\r\n                style={{ display: \"flex\", justifyContent: \"space-between\" }}\r\n            >\r\n                <span\r\n                    className=\"right  noselect\"\r\n                    style={{ color: \"rgb(13, 3, 3)\" }}\r\n                >\r\n                    <FaEnvelope />\r\n                    <FaInstagram />\r\n                </span>\r\n\r\n                <>\r\n                    {data?.getAnnouncements.length === 0 ? (\r\n                        <>Follow us on our socials</>\r\n                    ) : (\r\n                        <span id=\"announcement\">\r\n                            {data?.getAnnouncements.map((_val, i) => {\r\n                                return (\r\n                                    <span\r\n                                        key={i}\r\n                                        id={`announcement-${i}`}\r\n                                        className=\"announcement \"\r\n                                    >\r\n                                        {data.getAnnouncements[i].text}\r\n                                    </span>\r\n                                );\r\n                            })}\r\n                        </span>\r\n                    )}\r\n                </>\r\n\r\n                <span className=\"right\">\r\n                    {!!sdata && sdata.getSocials ? (\r\n                        <>\r\n                            {sdata.getSocials.map((_val, i) => {\r\n                                if (sdata.getSocials[i].display) {\r\n                                    return (\r\n                                        <a\r\n                                            id=\"social-link\"\r\n                                            key={i}\r\n                                            href={\r\n                                                sdata.getSocials[i].social_url\r\n                                            }\r\n                                            style={{\r\n                                                width: \"30px\",\r\n                                                height: \"30px\",\r\n                                                marginRight: \"7px\",\r\n                                            }}\r\n                                        >\r\n                                            <SocialIcon\r\n                                                social_logo={\r\n                                                    sdata.getSocials[i]\r\n                                                        .social_logo\r\n                                                }\r\n                                            />\r\n                                        </a>\r\n                                    );\r\n                                } else {\r\n                                    return null;\r\n                                }\r\n                            })}\r\n                        </>\r\n                    ) : (\r\n                        <>\r\n                            <a\r\n                                href=\"mailto:cantrelatejp@gmail.com\"\r\n                                style={{ color: \"#fff\" }}\r\n                            >\r\n                                <FaEnvelope\r\n                                    style={{\r\n                                        marginRight: \"5px\",\r\n                                        marginLeft: \"5px\",\r\n                                    }}\r\n                                />\r\n                            </a>\r\n\r\n                            <a\r\n                                href=\"https://www.instagram.com/cantrelate.jp/\"\r\n                                style={{ color: \"#fff\" }}\r\n                            >\r\n                                <FaInstagram />\r\n                            </a>\r\n                        </>\r\n                    )}\r\n                </span>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default AnnouncementBar;\r\n\r\nconst SocialIcon: React.FC<{ social_logo: string }> = ({ social_logo }) => {\r\n    switch (social_logo) {\r\n        case \"I\": {\r\n            return (\r\n                <FaInstagram\r\n                    style={{\r\n                        height: 22,\r\n                        width: 22,\r\n                    }}\r\n                />\r\n            );\r\n        }\r\n\r\n        case \"E\": {\r\n            return (\r\n                <FaEnvelope\r\n                    style={{\r\n                        height: 22,\r\n                        width: 22,\r\n                    }}\r\n                />\r\n            );\r\n        }\r\n        case \"T\": {\r\n            return (\r\n                <FaTwitter\r\n                    style={{\r\n                        height: 22,\r\n                        width: 22,\r\n                    }}\r\n                />\r\n            );\r\n        }\r\n        case \"F\": {\r\n            return (\r\n                <FaFacebook\r\n                    style={{\r\n                        height: 22,\r\n                        width: 22,\r\n                    }}\r\n                />\r\n            );\r\n        }\r\n\r\n        default: {\r\n            return <>ERROR</>;\r\n        }\r\n    }\r\n};\r\n","const Logo = () => {\r\n    return (\r\n        <a href=\"#/home\" className=\"brand-logo\">\r\n            Cant Relate .JP\r\n        </a>\r\n    );\r\n};\r\n\r\nexport default Logo;\r\n","import { useGoogleLogin } from \"react-google-login\";\r\nimport { setAccessToken } from \"../../accessToken\";\r\nimport { checkAuth } from \"../../CheckAuth\";\r\nimport { useLoginMutation } from \"../../generated/graphql\";\r\nimport \"../../css/navbar.scss\";\r\nimport { useEffect } from \"react\";\r\nimport M from \"materialize-css\";\r\nimport AnnouncementBar from \"./AnnouncementBar\";\r\nimport Logo from \"./Logo\";\r\n\r\nconst Navbar = () => {\r\n    useEffect(() => {\r\n        var elems = document.querySelectorAll(\".sidenav\");\r\n        M.Sidenav.init(elems);\r\n    });\r\n    const [login] = useLoginMutation();\r\n\r\n    const handler = async res => {\r\n        let response = await login({\r\n            variables: {\r\n                user_id: res.googleId,\r\n                email: res.profileObj.email,\r\n            },\r\n        });\r\n\r\n        setAccessToken(response.data?.login.accessToken!);\r\n        localStorage.setItem(\"iru5\", response.data?.login.refreshToken!);\r\n        window.location.reload();\r\n    };\r\n\r\n    const { signIn } = useGoogleLogin({\r\n        clientId:\r\n            \"767129492168-gloagc4m640fgeegm6if58heehkpup7d.apps.googleusercontent.com\",\r\n        onSuccess: handler,\r\n    });\r\n\r\n    const logout = () => {\r\n        localStorage.setItem(\"iru5\", \"\");\r\n        setAccessToken(\"\");\r\n        window.location.reload();\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <header style={{ position: \"sticky\", top: 0, zIndex: 997 }}>\r\n                <AnnouncementBar />\r\n                <div\r\n                    style={{ zIndex: 4, position: \"relative\" }}\r\n                    className=\"noselect\"\r\n                >\r\n                    <nav style={{ backgroundColor: \"#0a0a0a\" }}>\r\n                        <div className=\"nav-wrapper\">\r\n                            <Logo />\r\n\r\n                            <a\r\n                                href=\"#/\"\r\n                                data-target=\"mobile-demo\"\r\n                                className=\"sidenav-trigger left\"\r\n                            >\r\n                                <i className=\"material-icons noselect\">menu</i>\r\n                            </a>\r\n\r\n                            <ul\r\n                                id=\"nav\"\r\n                                className=\"center\"\r\n                                style={{\r\n                                    left: \"50%\",\r\n                                    transform: \"translateX(-50%)\",\r\n                                    position: \"absolute\",\r\n                                }}\r\n                            >\r\n                                {/* <li>\r\n                                    <a href=\"#/home\">HOME</a>\r\n                                </li> */}\r\n                                <li>\r\n                                    <a href=\"#/products\">PRODUCTS</a>\r\n                                </li>\r\n\r\n                                <li>\r\n                                    {checkAuth() ? (\r\n                                        <a href=\"#/my-orders\">MY ORDERS</a>\r\n                                    ) : (\r\n                                        // eslint-disable-next-line\r\n                                        <a\r\n                                            onClick={async () => {\r\n                                                await signIn();\r\n                                            }}\r\n                                        >\r\n                                            MY ORDERS\r\n                                        </a>\r\n                                    )}\r\n                                </li>\r\n\r\n                                <li>\r\n                                    <a href=\"#/my-cart\">CART</a>\r\n                                </li>\r\n                            </ul>\r\n                            {checkAuth() ? (\r\n                                <i\r\n                                    id=\"desktop-logout\"\r\n                                    className=\"material-icons right noselect\"\r\n                                    style={{ marginRight: \"15%\" }}\r\n                                    onClick={() => logout()}\r\n                                >\r\n                                    exit_to_app\r\n                                </i>\r\n                            ) : (\r\n                                <></>\r\n                            )}\r\n                            <a\r\n                                href=\"#/my-cart\"\r\n                                className=\"right white-text\"\r\n                                style={{ color: \"#000\", marginRight: \"18px\" }}\r\n                            >\r\n                                <i className=\"material-icons\" id=\"mobile-cart\">\r\n                                    shopping_cart\r\n                                </i>\r\n                            </a>\r\n                        </div>\r\n                    </nav>\r\n                </div>\r\n            </header>\r\n            <ul\r\n                className=\"sidenav\"\r\n                id=\"mobile-demo\"\r\n                style={{\r\n                    backgroundColor: \"rgba(0, 0, 0, 0.95)\",\r\n                    paddingTop: \"42px\",\r\n                }}\r\n            >\r\n                <li>\r\n                    <a\r\n                        style={{ color: \"#fff\", textAlign: \"center\" }}\r\n                        href=\"#/products\"\r\n                    >\r\n                        Products\r\n                    </a>\r\n                </li>\r\n                <li>\r\n                    {checkAuth() ? (\r\n                        <a\r\n                            style={{ color: \"#fff\", textAlign: \"center\" }}\r\n                            href=\"#/my-orders\"\r\n                        >\r\n                            My Orders\r\n                        </a>\r\n                    ) : (\r\n                        // eslint-disable-next-line\r\n                        <a\r\n                            style={{ color: \"#fff\", textAlign: \"center\" }}\r\n                            onClick={() => {\r\n                                signIn();\r\n                            }}\r\n                        >\r\n                            My Orders\r\n                        </a>\r\n                    )}\r\n                </li>\r\n\r\n                <li>\r\n                    {checkAuth() ? (\r\n                        <a\r\n                            href=\"#/\"\r\n                            style={{ color: \"#fff\", textAlign: \"center\" }}\r\n                            onClick={() => logout()}\r\n                        >\r\n                            Logout\r\n                        </a>\r\n                    ) : (\r\n                        <></>\r\n                    )}\r\n                </li>\r\n            </ul>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Navbar;\r\n","const CopyrightBar = () => {\r\n    return (\r\n        <div\r\n            style={{\r\n                width: \"100%\",\r\n                display: \"flex\",\r\n                justifyContent: \"center\",\r\n                border: \"1px solid\",\r\n            }}\r\n        >\r\n            <span\r\n                style={{\r\n                    marginTop: \"5px\",\r\n                    marginBottom: \"5px\",\r\n                    fontSize: \"26.5px\",\r\n                    fontWeight: 550,\r\n                }}\r\n            >\r\n                © 2021 CANT RELATE.JP\r\n            </span>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default CopyrightBar;\r\n","import CopyrightBar from \"./CopyrightBar\";\r\nimport { FaInstagram, FaEnvelope, FaTwitter, FaFacebook } from \"react-icons/fa\";\r\nimport { useGetSocialsQuery } from \"../../generated/graphql\";\r\nimport \"../../css/footer.scss\";\r\n\r\nconst Footer = () => {\r\n    const { data } = useGetSocialsQuery({\r\n        variables: {\r\n            component: \"footer\",\r\n        },\r\n    });\r\n\r\n    return (\r\n        <span>\r\n            <footer\r\n                className=\"noselect\"\r\n                style={{\r\n                    backgroundColor: \"#0a0a0a\",\r\n                    width: \"100%\",\r\n                    height: \"280px\",\r\n                }}\r\n            >\r\n                <div className=\"container\">\r\n                    <div\r\n                        className=\"row\"\r\n                        style={{\r\n                            width: \"100%\",\r\n                            display: \"flex\",\r\n                            justifyContent: \"space-between\",\r\n                        }}\r\n                    >\r\n                        <div className=\"col s12 l6 hide-on-small-only \">\r\n                            <div className=\"footer-logo\">\r\n                                <h1>Cant</h1>\r\n                                <h1>Relate</h1>\r\n                                <h1>.JP</h1>\r\n                            </div>\r\n                        </div>\r\n\r\n                        <div className=\"col s12 l4 \">\r\n                            <ul id=\"footer-info\">\r\n                                <li>\r\n                                    <a\r\n                                        href=\"#/shipping_policy\"\r\n                                        className=\"white-text\"\r\n                                    >\r\n                                        <h4 style={{ fontWeight: 600 }}>\r\n                                            Shipping Policy\r\n                                        </h4>\r\n                                    </a>\r\n                                </li>\r\n                                <li>\r\n                                    <a href=\"#/contact\" className=\"white-text\">\r\n                                        <h4\r\n                                            style={{\r\n                                                marginTop: \"0px\",\r\n                                                fontWeight: 600,\r\n                                            }}\r\n                                        >\r\n                                            Contact Us\r\n                                        </h4>\r\n                                    </a>\r\n                                </li>\r\n                                <li>\r\n                                    <a href=\"#/FAQ\" className=\"white-text\">\r\n                                        <h4\r\n                                            style={{\r\n                                                marginTop: \"0px\",\r\n                                                fontWeight: 600,\r\n                                            }}\r\n                                        >\r\n                                            FAQ\r\n                                        </h4>\r\n                                    </a>\r\n                                </li>\r\n                                <li>\r\n                                    {!!data && data.getSocials ? (\r\n                                        <>\r\n                                            {data.getSocials.map((_val, i) => {\r\n                                                if (\r\n                                                    data.getSocials[i].display\r\n                                                ) {\r\n                                                    return (\r\n                                                        <a\r\n                                                            id=\"social-link\"\r\n                                                            key={i}\r\n                                                            href={\r\n                                                                data.getSocials[\r\n                                                                    i\r\n                                                                ].social_url\r\n                                                            }\r\n                                                            style={{\r\n                                                                width: \"30px\",\r\n                                                                height: \"30px\",\r\n                                                                marginRight:\r\n                                                                    \"7px\",\r\n                                                            }}\r\n                                                        >\r\n                                                            <SocialIcon\r\n                                                                social_logo={\r\n                                                                    data\r\n                                                                        .getSocials[\r\n                                                                        i\r\n                                                                    ]\r\n                                                                        .social_logo\r\n                                                                }\r\n                                                            />\r\n                                                        </a>\r\n                                                    );\r\n                                                } else {\r\n                                                    return null;\r\n                                                }\r\n                                            })}\r\n                                        </>\r\n                                    ) : (\r\n                                        <>\r\n                                            <a\r\n                                                id=\"social-link\"\r\n                                                href=\"https://www.instagram.com/cantrelate.jp/\"\r\n                                            >\r\n                                                <FaInstagram\r\n                                                    style={{\r\n                                                        width: \"30px\",\r\n                                                        height: \"30px\",\r\n                                                        marginRight: \"7px\",\r\n                                                    }}\r\n                                                />\r\n                                            </a>\r\n                                            <a\r\n                                                id=\"social-link\"\r\n                                                href=\"mailto:cantrelatejp@gmail.com\"\r\n                                            >\r\n                                                <FaEnvelope\r\n                                                    style={{\r\n                                                        width: \"30px\",\r\n                                                        height: \"30px\",\r\n                                                    }}\r\n                                                />\r\n                                            </a>\r\n                                        </>\r\n                                    )}\r\n                                </li>\r\n                            </ul>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </footer>\r\n            <CopyrightBar />\r\n        </span>\r\n    );\r\n};\r\n\r\nexport default Footer;\r\n\r\nconst SocialIcon: React.FC<{ social_logo: string }> = ({ social_logo }) => {\r\n    switch (social_logo) {\r\n        case \"I\": {\r\n            return (\r\n                <FaInstagram\r\n                    style={{\r\n                        height: 30,\r\n                        width: 30,\r\n                    }}\r\n                />\r\n            );\r\n        }\r\n\r\n        case \"E\": {\r\n            return (\r\n                <FaEnvelope\r\n                    style={{\r\n                        height: 30,\r\n                        width: 30,\r\n                    }}\r\n                />\r\n            );\r\n        }\r\n        case \"T\": {\r\n            return (\r\n                <FaTwitter\r\n                    style={{\r\n                        height: 30,\r\n                        width: 30,\r\n                    }}\r\n                />\r\n            );\r\n        }\r\n        case \"F\": {\r\n            return (\r\n                <FaFacebook\r\n                    style={{\r\n                        height: 30,\r\n                        width: 30,\r\n                    }}\r\n                />\r\n            );\r\n        }\r\n\r\n        default: {\r\n            return <>ERROR</>;\r\n        }\r\n    }\r\n};\r\n","import {\r\n    useGetProductsQuery,\r\n    useGetSectionsQuery,\r\n} from \"../../generated/graphql\";\r\nimport \"../../css/products.scss\";\r\nimport { useEffect } from \"react\";\r\nimport anime from \"animejs\";\r\n\r\nconst GetSections = () => {\r\n    const { data, loading } = useGetSectionsQuery();\r\n    let sdata = data,\r\n        sloading = loading;\r\n    return { sdata, sloading };\r\n};\r\n\r\nconst Products = () => {\r\n    const { data, loading } = useGetProductsQuery();\r\n    const { sdata, sloading } = GetSections();\r\n\r\n    useEffect(() => {\r\n        if (!loading && !sloading) {\r\n            if (!!document.getElementById(\"products-grid\")) {\r\n                document\r\n                    .getElementById(\"products-grid\")!\r\n                    .classList.remove(\"hide\");\r\n            }\r\n            anime({\r\n                duration: function (_t, i) {\r\n                    return 900 + i * 75;\r\n                },\r\n                targets: \".products-grid .card-content\",\r\n                easing: \"easeOutExpo\",\r\n                // delay: function (t, i) {\r\n                //     return i * 50;\r\n                // },\r\n                opacity: { value: [0, 1], easing: \"linear\" },\r\n                scale: [0, 1],\r\n                delay: anime.stagger(150, { start: 100 }),\r\n            });\r\n            anime({\r\n                duration: function (_t, i) {\r\n                    return 900 + i * 75;\r\n                },\r\n                targets: \".products-grid .card\",\r\n                easing: \"easeOutExpo\",\r\n                // delay: function (t, i) {\r\n                //     return i * 50;\r\n                // },\r\n                opacity: { value: [0, 1], easing: \"linear\" },\r\n                scale: [0, 1],\r\n                delay: anime.stagger(150, { start: 100 }),\r\n            });\r\n        }\r\n    });\r\n\r\n    if (loading || sloading) {\r\n        return <></>;\r\n    }\r\n\r\n    return (\r\n        <div className=\"container\" style={{ width: \"80%\" }}>\r\n            {!!sdata && sdata.getSections.length !== 0 ? (\r\n                <>\r\n                    <h1\r\n                        className=\"center-align\"\r\n                        style={{\r\n                            marginTop: \"60px\",\r\n                            marginBottom: \"60px\",\r\n                            fontWeight: 600,\r\n                        }}\r\n                    >\r\n                        Sections\r\n                    </h1>\r\n\r\n                    <div className=\"sections-grid\">\r\n                        {sdata.getSections.map((_val, i) => {\r\n                            let section = sdata.getSections[i];\r\n                            return (\r\n                                <div\r\n                                    className=\"card z-depth-0 black-text\"\r\n                                    style={{\r\n                                        margin: \"0px 8px 32px 8px\",\r\n                                    }}\r\n                                    key={i}\r\n                                >\r\n                                    <a\r\n                                        className=\"black-text\"\r\n                                        href={`#/view-section:${section.section_id}`}\r\n                                    >\r\n                                        <div className=\"container\">\r\n                                            <div className=\"card-image\">\r\n                                                <img\r\n                                                    src={section.thumbnail}\r\n                                                    alt={section.name}\r\n                                                />\r\n                                            </div>\r\n                                        </div>\r\n\r\n                                        <div className=\"card-content\">\r\n                                            <span className=\"card-title\">\r\n                                                <h5 className=\"center-align\">\r\n                                                    {section.name}\r\n                                                </h5>\r\n                                            </span>\r\n                                            <span\r\n                                                style={{\r\n                                                    display: \"flex\",\r\n                                                    justifyContent: \"center\",\r\n                                                }}\r\n                                            ></span>\r\n                                        </div>\r\n                                    </a>\r\n                                </div>\r\n                            );\r\n                        })}\r\n                    </div>\r\n                </>\r\n            ) : null}\r\n\r\n            {!!data ? (\r\n                <>\r\n                    <h1\r\n                        className=\"center-align\"\r\n                        style={{\r\n                            marginTop: \"60px\",\r\n                            marginBottom: \"60px\",\r\n                            fontWeight: 600,\r\n                        }}\r\n                    >\r\n                        Products\r\n                    </h1>\r\n\r\n                    <div id=\"products-grid\" className=\"products-grid hide\">\r\n                        {data?.getProducts.map((_val, i) => {\r\n                            let product: any = data.getProducts[i];\r\n                            return (\r\n                                <div className=\"card z-depth-0 \" key={i}>\r\n                                    <a\r\n                                        className=\"black-text\"\r\n                                        href={`#/product-details:${product.product_id}`}\r\n                                    >\r\n                                        <div className=\"container\">\r\n                                            <div className=\"card-image\">\r\n                                                <img\r\n                                                    src={\r\n                                                        !product.images[0] ||\r\n                                                        !product.images[0]\r\n                                                            .img_url\r\n                                                            ? \"https://materializecss.com/images/sample-1.jpg\"\r\n                                                            : product.images[0]\r\n                                                                  .img_url\r\n                                                    }\r\n                                                    alt={product.name}\r\n                                                />\r\n                                            </div>\r\n                                        </div>\r\n\r\n                                        <div className=\"card-content\">\r\n                                            <span className=\"card-title\">\r\n                                                <h5 className=\"center-align\">\r\n                                                    {product.name}\r\n                                                </h5>\r\n                                            </span>\r\n                                            <span\r\n                                                style={{\r\n                                                    display: \"flex\",\r\n                                                    justifyContent: \"center\",\r\n                                                }}\r\n                                            >\r\n                                                <p\r\n                                                    className=\"product-price\"\r\n                                                    style={{ fontSize: \"16px\" }}\r\n                                                >\r\n                                                    $\r\n                                                    {Number(\r\n                                                        product.price / 100\r\n                                                    ).toFixed(2)}\r\n                                                </p>\r\n                                            </span>\r\n                                        </div>\r\n                                    </a>\r\n                                </div>\r\n                            );\r\n                        })}\r\n                    </div>\r\n                </>\r\n            ) : null}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Products;\r\n","import { useGetUsersOrdersQuery } from \"../generated/graphql\";\r\nimport { useLocation } from \"react-router-dom\";\r\n// import anime from \"animejs\";\r\nimport { Sorting } from \"../Sorting\";\r\n\r\ninterface UserOrders {\r\n    products: [\r\n        {\r\n            product_id: number;\r\n            name: string;\r\n            desc: string;\r\n            price: number;\r\n            stock: number;\r\n            exp_date?: string;\r\n            quantityOrdered: number;\r\n            productSubtotal: number;\r\n            images: [\r\n                {\r\n                    img_id: number;\r\n                    img_url: string;\r\n                    index: number;\r\n                }\r\n            ];\r\n        }\r\n    ];\r\n    shipping: string;\r\n    order_total: number;\r\n    order_id: number;\r\n    tracking_num?: string;\r\n    coupon: string;\r\n    discount: string;\r\n    date_of_purchase: string;\r\n}\r\n\r\nconst calcSubtotals = (products: any[]) => {\r\n    let Subtotal: any = 0,\r\n        sTotal: any = 100;\r\n\r\n    for (let i = 0; i < products.length; i++) {\r\n        Subtotal += products[i].productSubtotal!;\r\n        sTotal += products[i].quantityOrdered * 50;\r\n    }\r\n\r\n    let productsSubtotal = Number(Subtotal / 100).toFixed(2);\r\n\r\n    if (sTotal > 500) {\r\n        sTotal = 500;\r\n    }\r\n\r\n    let shippingTotal = Number(sTotal / 100).toFixed(2);\r\n\r\n    return { productsSubtotal, shippingTotal };\r\n};\r\n\r\nconst showDetails = (i, tmp) => {\r\n    // if (document.getElementById(`card-header-${i}`)!.clientHeight > 50)\r\n    if (\r\n        !document\r\n            .getElementById(`order-details-row-${i}`)!\r\n            .classList.contains(\"hide\")\r\n    ) {\r\n        document\r\n            .getElementById(`order-details-row-${i}`)!\r\n            .classList.add(\"hide\");\r\n\r\n        // anime({\r\n        //     targets: `.card-header-${i}`,\r\n        //     height: \"48.5px\",\r\n        //     easing: \"linear\",\r\n        //     duration: 400,\r\n        //     complete: () => {\r\n        //         setTimeout(() => {\r\n        //             document.getElementById(\r\n        //                 \"details-span\"\r\n        //             )!.style.pointerEvents = \"auto\";\r\n        //         }, 50);\r\n        //     },\r\n        // });\r\n    } else {\r\n        const { productsSubtotal, shippingTotal } = calcSubtotals(\r\n            tmp[i].products\r\n        );\r\n\r\n        document.getElementById(\r\n            `subtotal-${i}`\r\n        )!.innerHTML = `$${productsSubtotal}`;\r\n\r\n        document.getElementById(`tax-${i}`)!.innerHTML = `$${Number(\r\n            Number(productsSubtotal) * 0.095\r\n        ).toFixed(2)}`;\r\n\r\n        document.getElementById(\r\n            `shippingTotal-${i}`\r\n        )!.innerHTML = `$${shippingTotal}`;\r\n\r\n        document\r\n            .getElementById(`order-details-row-${i}`)!\r\n            .classList.remove(\"hide\");\r\n\r\n        // anime({\r\n        //     targets: `.card-header-${i}`,\r\n        //     height: \"215px\",\r\n        //     easing: \"linear\",\r\n        //     duration: 350,\r\n        //     complete: () => {\r\n        //         document\r\n        //             .getElementById(`order-details-row-${i}`)!\r\n        //             .classList.remove(\"hide\");\r\n\r\n        //         anime({\r\n        //             targets: `.order-details-${i} .el`,\r\n        //             opacity: [0, 1],\r\n        //             delay: anime.stagger(50),\r\n        //             complete: () => {\r\n        //                 setTimeout(() => {\r\n        //                     document.getElementById(\r\n        //                         \"details-span\"\r\n        //                     )!.style.pointerEvents = \"auto\";\r\n        //                 }, 15);\r\n        //             },\r\n        //         });\r\n        //     },\r\n        // });\r\n    }\r\n};\r\n\r\nconst UsersOrders = () => {\r\n    const location: any = useLocation();\r\n\r\n    const { sortByProp } = Sorting();\r\n\r\n    if (!!location.state) {\r\n        if (location.state.reload) {\r\n            window.location.reload();\r\n        }\r\n    }\r\n\r\n    const { data, loading, error } = useGetUsersOrdersQuery();\r\n\r\n    if (loading) {\r\n        return <></>;\r\n    }\r\n\r\n    if (error) {\r\n        return <></>;\r\n    }\r\n\r\n    if (!data) {\r\n        //redirect\r\n        return <></>;\r\n    }\r\n\r\n    console.log(\"data :>> \", data);\r\n\r\n    let sortedOrders: [UserOrders] = sortByProp(\r\n        data.getUsersOrders,\r\n        \"order_id\",\r\n        true\r\n    );\r\n\r\n    return (\r\n        <>\r\n            {!!sortedOrders ? (\r\n                <>\r\n                    <div className=\"container\" style={{ minHeight: \"70vh\" }}>\r\n                        <div\r\n                            style={{\r\n                                display: \"flex\",\r\n                                justifyContent: \"center\",\r\n                            }}\r\n                        >\r\n                            <h3>Your Purchases</h3>\r\n                        </div>\r\n                        <>\r\n                            {sortedOrders.map((_val, i) => {\r\n                                let amountOff = Number(\r\n                                    (sortedOrders[i].order_total *\r\n                                        Number(\r\n                                            \"0.\" + sortedOrders[i].discount\r\n                                        )) /\r\n                                        100\r\n                                ).toFixed(2);\r\n\r\n                                let str, dateOfPurchase;\r\n                                if (sortedOrders[i].date_of_purchase) {\r\n                                    str = sortedOrders[\r\n                                        i\r\n                                    ].date_of_purchase.split(\" \");\r\n                                    dateOfPurchase = `${str[0]} ${str[1]} ${str[2]} ${str[3]}`;\r\n                                }\r\n\r\n                                let shipping = JSON.parse(\r\n                                    sortedOrders[i].shipping\r\n                                );\r\n                                return (\r\n                                    <div className=\"row z-depth-1\" key={i}>\r\n                                        <div\r\n                                            className=\"col s12\"\r\n                                            style={{ padding: \"0px\" }}\r\n                                        >\r\n                                            <div\r\n                                                className={`card-header card-header-${i} row`}\r\n                                                id={`card-header-${i}`}\r\n                                                style={{\r\n                                                    borderLeft:\r\n                                                        \"5px solid #ff0000\",\r\n                                                    paddingTop: \"13px\",\r\n                                                    paddingBottom: \"13px\",\r\n                                                    paddingRight: \"25px\",\r\n                                                    paddingLeft: \"20px\",\r\n                                                    margin: \"0px\",\r\n                                                    zIndex: 4,\r\n                                                    position: \"relative\",\r\n                                                }}\r\n                                            >\r\n                                                <span className=\"col s7 m4\">\r\n                                                    <span\r\n                                                        style={{\r\n                                                            color: \"#1d252c\",\r\n                                                            paddingRight:\r\n                                                                \"1rem\",\r\n                                                            fontWeight: 700,\r\n                                                        }}\r\n                                                    >\r\n                                                        Order ID\r\n                                                    </span>\r\n                                                    <span>\r\n                                                        CR-\r\n                                                        {\r\n                                                            sortedOrders[i]\r\n                                                                .order_id\r\n                                                        }\r\n                                                    </span>\r\n                                                </span>\r\n\r\n                                                <span className=\"hide-on-med-and-down col l3\">\r\n                                                    {sortedOrders[i]\r\n                                                        .date_of_purchase ? (\r\n                                                        <span>\r\n                                                            {dateOfPurchase}\r\n                                                        </span>\r\n                                                    ) : (\r\n                                                        <></>\r\n                                                    )}\r\n                                                </span>\r\n\r\n                                                <span className=\"bold col s5 m4\">\r\n                                                    <span>\r\n                                                        <span className=\"hide-on-small-only left\">\r\n                                                            $\r\n                                                            {Number(\r\n                                                                sortedOrders[i]\r\n                                                                    .order_total /\r\n                                                                    100\r\n                                                            ).toFixed(2)}{\" \"}\r\n                                                            {sortedOrders[i]\r\n                                                                .discount ? (\r\n                                                                <span className=\"hide-on-med-and-down\">\r\n                                                                    (\r\n                                                                    <span\r\n                                                                        style={{\r\n                                                                            color:\r\n                                                                                \"rgb(255, 0, 0)\",\r\n                                                                        }}\r\n                                                                    >\r\n                                                                        -$\r\n                                                                        {\r\n                                                                            amountOff\r\n                                                                        }\r\n                                                                    </span>\r\n                                                                    )\r\n                                                                </span>\r\n                                                            ) : (\r\n                                                                <></>\r\n                                                            )}\r\n                                                        </span>\r\n                                                        <span\r\n                                                            id=\"details-span\"\r\n                                                            className=\"noselect right\"\r\n                                                            onClick={() => {\r\n                                                                // document.getElementById(\r\n                                                                //     \"details-span\"\r\n                                                                // )!.style.pointerEvents =\r\n                                                                //     \"none\";\r\n                                                                showDetails(\r\n                                                                    i,\r\n                                                                    sortedOrders\r\n                                                                );\r\n                                                            }}\r\n                                                        >\r\n                                                            Details\r\n                                                        </span>\r\n                                                    </span>\r\n                                                </span>\r\n\r\n                                                <div\r\n                                                    className=\"row hide\"\r\n                                                    id={`order-details-row-${i}`}\r\n                                                    style={{\r\n                                                        marginTop: \"32px\",\r\n                                                    }}\r\n                                                >\r\n                                                    <div className=\"col s12 m5\">\r\n                                                        <span\r\n                                                            className={`order-details-${i}`}\r\n                                                        >\r\n                                                            <span className=\"el\">\r\n                                                                <span className=\"left\">\r\n                                                                    Subtotal\r\n                                                                </span>\r\n                                                                <span\r\n                                                                    className=\"right semi-bold\"\r\n                                                                    id={`subtotal-${i}`}\r\n                                                                ></span>\r\n                                                            </span>\r\n\r\n                                                            <br />\r\n\r\n                                                            <span className=\"el\">\r\n                                                                <span className=\"left\">\r\n                                                                    Tax\r\n                                                                </span>\r\n                                                                <span\r\n                                                                    className=\"right semi-bold\"\r\n                                                                    id={`tax-${i}`}\r\n                                                                ></span>\r\n                                                            </span>\r\n\r\n                                                            <br />\r\n\r\n                                                            <span className=\"el\">\r\n                                                                <span className=\"left\">\r\n                                                                    Shipping\r\n                                                                </span>\r\n                                                                <span\r\n                                                                    className=\"right semi-bold\"\r\n                                                                    id={`shippingTotal-${i}`}\r\n                                                                ></span>\r\n                                                            </span>\r\n\r\n                                                            <>\r\n                                                                {!sortedOrders[\r\n                                                                    i\r\n                                                                ].coupon ? (\r\n                                                                    <></>\r\n                                                                ) : (\r\n                                                                    <span className=\"el\">\r\n                                                                        <br />\r\n                                                                        <div\r\n                                                                            className=\"divider\"\r\n                                                                            style={{\r\n                                                                                marginTop:\r\n                                                                                    \"4px\",\r\n                                                                                marginBottom:\r\n                                                                                    \"4px\",\r\n                                                                            }}\r\n                                                                        ></div>\r\n                                                                        <span className=\"left\">\r\n                                                                            Coupon(\r\n                                                                            {\r\n                                                                                sortedOrders[\r\n                                                                                    i\r\n                                                                                ]\r\n                                                                                    .coupon\r\n                                                                            }\r\n                                                                            )\r\n                                                                        </span>\r\n                                                                        <span className=\"right\">\r\n                                                                            {\r\n                                                                                sortedOrders[\r\n                                                                                    i\r\n                                                                                ]\r\n                                                                                    .discount\r\n                                                                            }\r\n                                                                            % (\r\n                                                                            <span className=\"red-text bold\">\r\n                                                                                -$\r\n                                                                                {\r\n                                                                                    amountOff\r\n                                                                                }\r\n                                                                            </span>\r\n                                                                            )\r\n                                                                        </span>\r\n                                                                    </span>\r\n                                                                )}\r\n                                                            </>\r\n\r\n                                                            <br />\r\n\r\n                                                            <span className=\"el\">\r\n                                                                <div\r\n                                                                    className=\"divider\"\r\n                                                                    style={{\r\n                                                                        marginTop:\r\n                                                                            \"4px\",\r\n                                                                        marginBottom:\r\n                                                                            \"4px\",\r\n                                                                    }}\r\n                                                                ></div>\r\n                                                                <span className=\"left\">\r\n                                                                    Order Total\r\n                                                                </span>\r\n                                                                <span className=\"right bold\">\r\n                                                                    $\r\n                                                                    {Number(\r\n                                                                        sortedOrders[\r\n                                                                            i\r\n                                                                        ]\r\n                                                                            .order_total /\r\n                                                                            100\r\n                                                                    ).toFixed(\r\n                                                                        2\r\n                                                                    )}\r\n                                                                </span>\r\n                                                            </span>\r\n                                                        </span>\r\n                                                    </div>\r\n\r\n                                                    <div className=\"col s12 m5 offset-m2\">\r\n                                                        <span\r\n                                                            className={`shipping-details-${i}`}\r\n                                                        >\r\n                                                            <div\r\n                                                                style={{\r\n                                                                    width:\r\n                                                                        \"100%\",\r\n                                                                    borderLeft:\r\n                                                                        \" 4px solid black\",\r\n                                                                    paddingLeft:\r\n                                                                        \"15px\",\r\n                                                                }}\r\n                                                            >\r\n                                                                <p className=\"bold\">\r\n                                                                    {!shipping ? (\r\n                                                                        <></>\r\n                                                                    ) : (\r\n                                                                        <>\r\n                                                                            {\r\n                                                                                shipping.name\r\n                                                                            }\r\n                                                                            <br />\r\n                                                                            {\r\n                                                                                shipping.line1\r\n                                                                            }\r\n                                                                            <br />\r\n                                                                            {\r\n                                                                                shipping.city\r\n                                                                            }\r\n                                                                            ,{\" \"}\r\n                                                                            {\r\n                                                                                shipping.state\r\n                                                                            }{\" \"}\r\n                                                                            {\r\n                                                                                shipping.postal_code\r\n                                                                            }\r\n                                                                            <br />\r\n                                                                            {\r\n                                                                                shipping.country\r\n                                                                            }\r\n                                                                        </>\r\n                                                                    )}\r\n                                                                </p>\r\n                                                            </div>\r\n                                                        </span>\r\n                                                    </div>\r\n                                                </div>\r\n                                            </div>\r\n\r\n                                            <div className=\"divider\"></div>\r\n\r\n                                            <div\r\n                                                className=\"card-body\"\r\n                                                style={{\r\n                                                    backgroundColor: \"white\",\r\n                                                    zIndex: 2,\r\n                                                    position: \"relative\",\r\n                                                }}\r\n                                            >\r\n                                                {sortedOrders[i].products.map(\r\n                                                    (_val, j) => {\r\n                                                        return (\r\n                                                            <div\r\n                                                                className=\"row\"\r\n                                                                key={j}\r\n                                                            >\r\n                                                                <div className=\"col s12 m4\">\r\n                                                                    <img\r\n                                                                        alt=\"product\"\r\n                                                                        style={{\r\n                                                                            width:\r\n                                                                                \"100%\",\r\n                                                                        }}\r\n                                                                        src={\r\n                                                                            sortedOrders[\r\n                                                                                i\r\n                                                                            ]\r\n                                                                                .products[\r\n                                                                                j\r\n                                                                            ]\r\n                                                                                .images[0]\r\n                                                                                .img_url\r\n                                                                        }\r\n                                                                    />\r\n                                                                </div>\r\n                                                                <div\r\n                                                                    style={{\r\n                                                                        display:\r\n                                                                            \"flex\",\r\n                                                                        flexDirection:\r\n                                                                            \"column\",\r\n                                                                        justifyContent:\r\n                                                                            \"space-between\",\r\n                                                                        height:\r\n                                                                            \"100%\",\r\n                                                                        paddingLeft: 0,\r\n                                                                    }}\r\n                                                                    className=\"col m2 offset-m1 hide-on-small-only\"\r\n                                                                >\r\n                                                                    <p\r\n                                                                        className=\"flow-text\"\r\n                                                                        style={{\r\n                                                                            fontSize:\r\n                                                                                \"16px\",\r\n                                                                            fontWeight:\r\n                                                                                \"bold\",\r\n                                                                        }}\r\n                                                                    >\r\n                                                                        {\r\n                                                                            sortedOrders[\r\n                                                                                i\r\n                                                                            ]\r\n                                                                                .products[\r\n                                                                                j\r\n                                                                            ]\r\n                                                                                .name\r\n                                                                        }\r\n                                                                    </p>\r\n                                                                    <p className=\"hide-on-small-only\">\r\n                                                                        Qty:{\" \"}\r\n                                                                        {\r\n                                                                            sortedOrders[\r\n                                                                                i\r\n                                                                            ]\r\n                                                                                .products[\r\n                                                                                j\r\n                                                                            ]\r\n                                                                                .quantityOrdered\r\n                                                                        }{\" \"}\r\n                                                                        ($\r\n                                                                        {Number(\r\n                                                                            sortedOrders[\r\n                                                                                i\r\n                                                                            ]\r\n                                                                                .products[\r\n                                                                                j\r\n                                                                            ]\r\n                                                                                .productSubtotal /\r\n                                                                                100\r\n                                                                        ).toFixed(\r\n                                                                            2\r\n                                                                        )}\r\n                                                                        )\r\n                                                                    </p>\r\n                                                                </div>\r\n\r\n                                                                <div\r\n                                                                    style={{\r\n                                                                        display:\r\n                                                                            \"flex\",\r\n                                                                        justifyContent:\r\n                                                                            \"center\",\r\n                                                                    }}\r\n                                                                    className=\"col s12 hide-on-med-and-up\"\r\n                                                                >\r\n                                                                    <p\r\n                                                                        className=\"flow-text\"\r\n                                                                        style={{\r\n                                                                            fontSize:\r\n                                                                                \"16px\",\r\n                                                                            fontWeight:\r\n                                                                                \"bold\",\r\n                                                                        }}\r\n                                                                    >\r\n                                                                        {\r\n                                                                            sortedOrders[\r\n                                                                                i\r\n                                                                            ]\r\n                                                                                .products[\r\n                                                                                j\r\n                                                                            ]\r\n                                                                                .name\r\n                                                                        }\r\n                                                                    </p>\r\n                                                                </div>\r\n\r\n                                                                {j === 0 ? (\r\n                                                                    <>\r\n                                                                        <div className=\"col offset-m1 m3 hide-on-small-only\">\r\n                                                                            {!sortedOrders[\r\n                                                                                i\r\n                                                                            ]\r\n                                                                                .tracking_num ? (\r\n                                                                                <>\r\n                                                                                    <p\r\n                                                                                        style={{\r\n                                                                                            fontWeight: 700,\r\n                                                                                        }}\r\n                                                                                    >\r\n                                                                                        Order\r\n                                                                                        is\r\n                                                                                        being\r\n                                                                                        proccessed\r\n                                                                                    </p>\r\n                                                                                    <div\r\n                                                                                        style={{\r\n                                                                                            width:\r\n                                                                                                \"100%\",\r\n                                                                                            borderBottom:\r\n                                                                                                \" 4px solid #ff0000\",\r\n                                                                                        }}\r\n                                                                                    ></div>\r\n                                                                                </>\r\n                                                                            ) : (\r\n                                                                                <>\r\n                                                                                    <p\r\n                                                                                        style={{\r\n                                                                                            fontWeight: 700,\r\n                                                                                        }}\r\n                                                                                    >\r\n                                                                                        Shipped{\" \"}\r\n                                                                                        =&gt;{\" \"}\r\n                                                                                        <a\r\n                                                                                            href={`https://www.google.com/search?q=${sortedOrders[i].tracking_num}`}\r\n                                                                                        >\r\n                                                                                            {\r\n                                                                                                sortedOrders[\r\n                                                                                                    i\r\n                                                                                                ]\r\n                                                                                                    .tracking_num\r\n                                                                                            }\r\n                                                                                        </a>\r\n                                                                                    </p>\r\n                                                                                    <div\r\n                                                                                        style={{\r\n                                                                                            width:\r\n                                                                                                \"100%\",\r\n                                                                                            borderBottom:\r\n                                                                                                \" 4px solid green\",\r\n                                                                                        }}\r\n                                                                                    ></div>\r\n                                                                                </>\r\n                                                                            )}\r\n                                                                        </div>\r\n\r\n                                                                        <div\r\n                                                                            className=\"col s12 hide-on-med-and-up\"\r\n                                                                            style={{}}\r\n                                                                        >\r\n                                                                            {!sortedOrders[\r\n                                                                                i\r\n                                                                            ]\r\n                                                                                .tracking_num ? (\r\n                                                                                <>\r\n                                                                                    <p\r\n                                                                                        style={{\r\n                                                                                            fontWeight: 700,\r\n                                                                                            display:\r\n                                                                                                \"flex\",\r\n                                                                                            justifyContent:\r\n                                                                                                \"center\",\r\n                                                                                            marginBottom:\r\n                                                                                                \"32px\",\r\n                                                                                        }}\r\n                                                                                    >\r\n                                                                                        <span\r\n                                                                                            style={{\r\n                                                                                                borderLeft:\r\n                                                                                                    \" 4px solid #ff0000\",\r\n                                                                                                paddingLeft:\r\n                                                                                                    \"10px\",\r\n                                                                                            }}\r\n                                                                                        >\r\n                                                                                            Order\r\n                                                                                            is\r\n                                                                                            being\r\n                                                                                            proccessed\r\n                                                                                        </span>\r\n                                                                                    </p>\r\n                                                                                </>\r\n                                                                            ) : (\r\n                                                                                <>\r\n                                                                                    <p\r\n                                                                                        style={{\r\n                                                                                            fontWeight: 700,\r\n                                                                                            display:\r\n                                                                                                \"flex\",\r\n                                                                                            justifyContent:\r\n                                                                                                \"center\",\r\n                                                                                            marginBottom:\r\n                                                                                                \"32px\",\r\n                                                                                        }}\r\n                                                                                    >\r\n                                                                                        <span\r\n                                                                                            style={{\r\n                                                                                                borderLeft:\r\n                                                                                                    \" 4px solid #008000\",\r\n                                                                                                paddingLeft:\r\n                                                                                                    \"10px\",\r\n                                                                                            }}\r\n                                                                                        >\r\n                                                                                            Shipped{\" \"}\r\n                                                                                            =&gt;{\" \"}\r\n                                                                                            <a\r\n                                                                                                href={`https://www.google.com/search?q=${sortedOrders[i].tracking_num}`}\r\n                                                                                            >\r\n                                                                                                {\r\n                                                                                                    sortedOrders[\r\n                                                                                                        i\r\n                                                                                                    ]\r\n                                                                                                        .tracking_num\r\n                                                                                                }\r\n                                                                                            </a>\r\n                                                                                        </span>\r\n                                                                                    </p>\r\n                                                                                </>\r\n                                                                            )}\r\n                                                                        </div>\r\n                                                                    </>\r\n                                                                ) : null}\r\n                                                                {sortedOrders[i]\r\n                                                                    .products\r\n                                                                    .length >\r\n                                                                    1 &&\r\n                                                                sortedOrders[i]\r\n                                                                    .products\r\n                                                                    .length -\r\n                                                                    1 !==\r\n                                                                    j ? (\r\n                                                                    <div\r\n                                                                        className=\"divider hide-on-med-and-up\"\r\n                                                                        style={{\r\n                                                                            marginLeft:\r\n                                                                                \"10%\",\r\n                                                                            width:\r\n                                                                                \"80%\",\r\n                                                                        }}\r\n                                                                    ></div>\r\n                                                                ) : (\r\n                                                                    <></>\r\n                                                                )}\r\n                                                            </div>\r\n                                                        );\r\n                                                    }\r\n                                                )}\r\n                                            </div>\r\n                                        </div>\r\n                                    </div>\r\n                                );\r\n                            })}\r\n                        </>\r\n                    </div>\r\n                </>\r\n            ) : (\r\n                <>\r\n                    <div style={{ display: \"flex\", justifyContent: \"center\" }}>\r\n                        <h1>You haven't ordered anything yet</h1>\r\n                    </div>\r\n                </>\r\n            )}\r\n        </>\r\n    );\r\n};\r\n\r\nexport default UsersOrders;\r\n","export const Sorting = () => {\r\n    //alphabetic sort\r\n    const sortByProp = (arr: any, prop: string, invert?: boolean) => {\r\n        let props = [] as any[];\r\n        arr.forEach((_val: any, i: any) => {\r\n            props[i] = arr[i][prop];\r\n        });\r\n\r\n        props.sort();\r\n        if (invert) {\r\n            props.reverse();\r\n        }\r\n\r\n        for (let i = 0; i < arr.length; i++) {\r\n            let j = i;\r\n            while (arr[i][prop] !== props[i]) {\r\n                let tmp = arr.slice(j, j + 2);\r\n                tmp.reverse();\r\n                arr[j] = tmp[0];\r\n                arr[j + 1] = tmp[1];\r\n                j = j + 1;\r\n\r\n                if (j === arr.length - 1) {\r\n                    j = i;\r\n                }\r\n\r\n                if (!arr[arr.length - 1]) {\r\n                    // remove undef index sometimes introduced by tmp.reverse()\r\n                    arr.pop();\r\n                }\r\n            }\r\n        }\r\n\r\n        if (!invert) {\r\n            return arr;\r\n        } else {\r\n            return arr;\r\n        }\r\n    };\r\n\r\n    return {\r\n        sortByProp,\r\n    };\r\n};\r\n","import { Product } from \"../RootReducer\";\r\n\r\nexport const addProductToCart = (product: Product) => {\r\n    console.log(\"product :>> \", product);\r\n    return {\r\n        type: \"ADD_PRODUCT_TO_CART\",\r\n        product,\r\n    };\r\n};\r\n\r\nexport const resetCart = () => {\r\n    return { type: \"RESET_CART\" };\r\n};\r\n\r\nexport const changeQuantityOnProduct = (\r\n    newQuantity: number,\r\n    productIndex: number\r\n) => {\r\n    return { type: \"CHANGE_QUANTITY_ON_PRODUCT\", newQuantity, productIndex };\r\n};\r\n","import { Redirect } from \"react-router\";\r\nimport {\r\n    useGetProductQuery,\r\n    useGetProductsOptionsQuery,\r\n} from \"../../generated/graphql\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { addProductToCart } from \"../../redux/actions/userAction\";\r\nimport { useEffect, useState } from \"react\";\r\nimport anime from \"animejs\";\r\n\r\nconst GetProductOptions = () => {\r\n    var product_id;\r\n    if (process.env.NODE_ENV === \"production\") {\r\n        product_id = Number(window.location.href.split(\":\")[2]);\r\n    } else {\r\n        product_id = Number(window.location.href.split(\":\")[3]);\r\n    }\r\n\r\n    const { data, loading } = useGetProductsOptionsQuery({\r\n        variables: {\r\n            product_id,\r\n        },\r\n    });\r\n\r\n    let odata = data,\r\n        oloading = loading;\r\n\r\n    return {\r\n        odata,\r\n        oloading,\r\n    };\r\n};\r\n\r\nconst ProductDetails = () => {\r\n    let product_id: number;\r\n    if (process.env.NODE_ENV === \"production\") {\r\n        product_id = Number(window.location.href.split(\":\")[2]);\r\n    } else {\r\n        product_id = Number(window.location.href.split(\":\")[3]);\r\n    }\r\n\r\n    const dispatch = useDispatch();\r\n    const { odata, oloading } = GetProductOptions();\r\n    const { data, loading, error } = useGetProductQuery({\r\n        variables: {\r\n            product_id,\r\n        },\r\n    });\r\n\r\n    const [option, setOption] = useState({\r\n        name: \"\",\r\n        option_id: 0,\r\n        option_price: 0,\r\n        option_stock: 0,\r\n    });\r\n\r\n    useEffect(() => {\r\n        var elems = document.querySelectorAll(\".tooltipped\");\r\n        M.Tooltip.init(elems);\r\n        elems = document.querySelectorAll(\".carousel\");\r\n        M.Carousel.init(elems);\r\n\r\n        elems = document.querySelectorAll(\".dropdown-trigger\");\r\n        M.Dropdown.init(elems);\r\n\r\n        if (!loading) {\r\n            elems = document.querySelectorAll(\".tooltipped\");\r\n            M.Tooltip.init(elems);\r\n            elems = document.querySelectorAll(\".carousel\");\r\n            M.Carousel.init(elems);\r\n\r\n            elems = document.querySelectorAll(\".dropdown-trigger\");\r\n            M.Dropdown.init(elems);\r\n            // (stock * 100)/ org_stock\r\n            let percent = 50;\r\n            if (!data || !data!.getProduct.org_stock) {\r\n                percent = 100;\r\n            } else {\r\n                if (option.option_stock !== 0) {\r\n                    percent =\r\n                        (option.option_stock * 100) /\r\n                        data!.getProduct.org_stock;\r\n                } else {\r\n                    percent =\r\n                        (data!.getProduct.stock * 100) /\r\n                        data!.getProduct.org_stock;\r\n                }\r\n\r\n                if (percent > 100) {\r\n                    percent = 100;\r\n                }\r\n            }\r\n\r\n            // anime({\r\n            //     targets: \".filler\",\r\n            //     width: [\"0%\", `${percent}%`],\r\n            //     easing: \"easeInOutExpo\",\r\n            // });\r\n\r\n            if (!document.getElementById(\"product-img\")) {\r\n            } else {\r\n                if (data?.getProduct.stock === 0) {\r\n                    document.getElementById(\"product-img\")!.style.opacity =\r\n                        \"0.7\";\r\n                }\r\n            }\r\n        }\r\n    });\r\n\r\n    if (loading || oloading) {\r\n        return <></>;\r\n    }\r\n\r\n    if (!data || error || !odata) {\r\n        return <Redirect to=\"/products\" />;\r\n    }\r\n\r\n    console.log(\"odata :>> \", odata);\r\n\r\n    let product: any = data!.getProduct;\r\n\r\n    console.log(\"product :>> \", product);\r\n\r\n    // setTimeout(() => {\r\n    //     var instance = M.Carousel.getInstance(\r\n    //         document.getElementById(\"carousel-1\")!\r\n    //     );\r\n    //     instance.next();\r\n    // }, 5000);\r\n\r\n    return (\r\n        <div>\r\n            <h3 className=\"center-align\">{product.name}</h3>\r\n            <h6 className=\"center-align\">\r\n                ${Number(product.price / 100).toFixed(2)}{\" \"}\r\n                {product.stock === 0 ? (\r\n                    <span style={{ color: \"#ff0000\", fontWeight: \"bold\" }}>\r\n                        SOLD OUT\r\n                    </span>\r\n                ) : (\r\n                    <></>\r\n                )}\r\n            </h6>\r\n\r\n            <div className=\"row noselect\">\r\n                <div\r\n                    className=\"col s10 offset-s1 m4 offset-m2\"\r\n                    style={{ display: \"flex\", justifyContent: \"end\" }}\r\n                >\r\n                    {data.getProduct.images!.length > 1 ? (\r\n                        <>\r\n                            <div\r\n                                id=\"carousel-1\"\r\n                                className=\"carousel carousel-slider hide-on-small-only\"\r\n                            >\r\n                                {!data.getProduct.images ? (\r\n                                    <></>\r\n                                ) : (\r\n                                    <>\r\n                                        {data.getProduct.images.map(\r\n                                            (_val, i) => {\r\n                                                return (\r\n                                                    // eslint-disable-next-line\r\n                                                    <a\r\n                                                        className=\"carousel-item noselect\"\r\n                                                        key={i}\r\n                                                    >\r\n                                                        <span\r\n                                                            style={{\r\n                                                                display:\r\n                                                                    \"inline-block\",\r\n                                                                maxHeight:\r\n                                                                    \"350px\",\r\n                                                                height: \"100%\",\r\n                                                                width: \"10%\",\r\n                                                            }}\r\n                                                            onClick={() => {\r\n                                                                var instance = M.Carousel.getInstance(\r\n                                                                    document.getElementById(\r\n                                                                        \"carousel-1\"\r\n                                                                    )!\r\n                                                                );\r\n                                                                instance.prev();\r\n                                                            }}\r\n                                                        ></span>\r\n\r\n                                                        <img\r\n                                                            alt=\"product\"\r\n                                                            style={{\r\n                                                                maxHeight:\r\n                                                                    \"350px\",\r\n                                                                width: \"80%\",\r\n                                                            }}\r\n                                                            src={\r\n                                                                product.images[\r\n                                                                    i\r\n                                                                ].img_url || \"\"\r\n                                                            }\r\n                                                        />\r\n\r\n                                                        <span\r\n                                                            style={{\r\n                                                                display:\r\n                                                                    \"inline-block\",\r\n                                                                maxHeight:\r\n                                                                    \"350px\",\r\n                                                                height: \"100%\",\r\n                                                                width: \"10%\",\r\n                                                            }}\r\n                                                            onClick={() => {\r\n                                                                var instance = M.Carousel.getInstance(\r\n                                                                    document.getElementById(\r\n                                                                        \"carousel-1\"\r\n                                                                    )!\r\n                                                                );\r\n                                                                instance.next();\r\n                                                            }}\r\n                                                        ></span>\r\n                                                    </a>\r\n                                                );\r\n                                            }\r\n                                        )}\r\n                                    </>\r\n                                )}\r\n                            </div>\r\n\r\n                            <div\r\n                                id=\"carousel-2\"\r\n                                className=\"carousel carousel-slider show-on-small-only hide-on-med-and-up\"\r\n                                style={{ height: \"350px\" }}\r\n                            >\r\n                                {!data.getProduct.images ? (\r\n                                    <></>\r\n                                ) : (\r\n                                    <>\r\n                                        {data.getProduct.images.map(\r\n                                            (_val, i) => {\r\n                                                return (\r\n                                                    // eslint-disable-next-line\r\n                                                    <a\r\n                                                        className=\"carousel-item noselect\"\r\n                                                        key={i}\r\n                                                        style={{\r\n                                                            maxHeight: \"250px\",\r\n                                                            minHeight: \"100px\",\r\n                                                        }}\r\n                                                    >\r\n                                                        <span\r\n                                                            style={{\r\n                                                                display:\r\n                                                                    \"inline-block\",\r\n                                                                maxHeight:\r\n                                                                    \"250px\",\r\n                                                                height: \"100%\",\r\n                                                                width: \"10%\",\r\n                                                            }}\r\n                                                            onClick={() => {\r\n                                                                var instance = M.Carousel.getInstance(\r\n                                                                    document.getElementById(\r\n                                                                        \"carousel-2\"\r\n                                                                    )!\r\n                                                                );\r\n                                                                instance.prev();\r\n                                                            }}\r\n                                                        ></span>\r\n                                                        <img\r\n                                                            alt=\"product\"\r\n                                                            style={{\r\n                                                                maxHeight:\r\n                                                                    \"250px\",\r\n                                                                width: \"80%\",\r\n                                                            }}\r\n                                                            src={\r\n                                                                product.images[\r\n                                                                    i\r\n                                                                ].img_url || \"\"\r\n                                                            }\r\n                                                        />\r\n                                                        <span\r\n                                                            style={{\r\n                                                                display:\r\n                                                                    \"inline-block\",\r\n                                                                maxHeight:\r\n                                                                    \"250px\",\r\n                                                                height: \"100%\",\r\n                                                                width: \"10%\",\r\n                                                            }}\r\n                                                            onClick={() => {\r\n                                                                var instance = M.Carousel.getInstance(\r\n                                                                    document.getElementById(\r\n                                                                        \"carousel-2\"\r\n                                                                    )!\r\n                                                                );\r\n                                                                instance.next();\r\n                                                            }}\r\n                                                        ></span>\r\n                                                    </a>\r\n                                                );\r\n                                            }\r\n                                        )}\r\n                                    </>\r\n                                )}\r\n                            </div>\r\n                        </>\r\n                    ) : (\r\n                        <>\r\n                            <div>\r\n                                <img\r\n                                    id=\"product-img\"\r\n                                    src={product.images[0].img_url || \"\"}\r\n                                    alt=\"product\"\r\n                                    style={{ maxWidth: \"100%\" }}\r\n                                />\r\n                            </div>\r\n                        </>\r\n                    )}\r\n                </div>\r\n                <div className=\"col s10 offset-s1 m3 offset-m1\">\r\n                    <div\r\n                        style={{ marginBottom: \"16px\" }}\r\n                        className=\"hide-on-small-only\"\r\n                    >\r\n                        {product.desc}\r\n                    </div>\r\n                    <div className=\"centered\">\r\n                        <div\r\n                            style={{ marginBottom: \"16px\", marginTop: \"16px\" }}\r\n                            className=\"show-on-small hide-on-med-and-up\"\r\n                        >\r\n                            {product.desc}\r\n                        </div>\r\n                    </div>\r\n                    <div\r\n                        className=\"divider\"\r\n                        style={{ marginBottom: \"16px\" }}\r\n                    ></div>\r\n                    {/* eslint-disable-next-line */}\r\n\r\n                    {odata.getProductsOptions.length === 0 ? (\r\n                        <>\r\n                            <a\r\n                                className=\"tooltipped\"\r\n                                data-position=\"right\"\r\n                                data-tooltip={`${product.stock} remaining`}\r\n                            >\r\n                                <div\r\n                                    className=\"hide-on-small-only\"\r\n                                    style={{\r\n                                        height: \"55px\",\r\n                                        width: \"100%\",\r\n                                        border: \"1px solid black\",\r\n                                        marginBottom: \"16px\",\r\n                                    }}\r\n                                >\r\n                                    <span\r\n                                        className=\"filler\"\r\n                                        style={{\r\n                                            display: \"inline-block\",\r\n                                            height: \"100%\",\r\n                                            backgroundColor: \"#0d0303\",\r\n                                        }}\r\n                                    ></span>\r\n                                </div>\r\n                            </a>\r\n                        </>\r\n                    ) : (\r\n                        <a\r\n                            className=\"tooltipped\"\r\n                            data-position=\"right\"\r\n                            data-tooltip={`${option.option_stock} remaining`}\r\n                        >\r\n                            <div\r\n                                className=\"hide-on-small-only \"\r\n                                style={{\r\n                                    height: \"55px\",\r\n                                    width: \"100%\",\r\n                                    border: \"1px solid black\",\r\n                                    marginBottom: \"16px\",\r\n                                }}\r\n                            >\r\n                                <span\r\n                                    className=\"option-bar-filler\"\r\n                                    style={{\r\n                                        display: \"inline-block\",\r\n                                        height: \"100%\",\r\n                                        backgroundColor: \"#0d0303\",\r\n                                    }}\r\n                                ></span>\r\n                            </div>\r\n                        </a>\r\n                    )}\r\n\r\n                    {product.stock === 0 ? (\r\n                        <></>\r\n                    ) : (\r\n                        <>\r\n                            {odata.getProductsOptions.length !== 0 ? (\r\n                                <>\r\n                                    {/* eslint-disable-next-line */}\r\n                                    <a\r\n                                        className=\"dropdown-trigger btn select\"\r\n                                        data-target=\"dropdown1\"\r\n                                    >\r\n                                        <>\r\n                                            {\" \"}\r\n                                            {option.name ? (\r\n                                                <span>{option.name}</span>\r\n                                            ) : (\r\n                                                <>SELECT OPTION</>\r\n                                            )}\r\n                                        </>\r\n                                    </a>\r\n                                    <button\r\n                                        id=\"add-cart-btn\"\r\n                                        className=\"btn disabled\"\r\n                                        style={{\r\n                                            width: \"100%\",\r\n                                            backgroundColor: \"#0a0a0a\",\r\n                                            color: \"#fff\",\r\n                                            border: \"none\",\r\n                                            height: \"45px\",\r\n                                        }}\r\n                                        onClick={() => {\r\n                                            if (!!option) {\r\n                                                M.toast({\r\n                                                    html:\r\n                                                        \"Product was added to cart\",\r\n                                                });\r\n                                                let tmp = product;\r\n                                                tmp.option = option.name;\r\n                                                tmp.option_id =\r\n                                                    option.option_id;\r\n                                                tmp.option_price =\r\n                                                    option.option_price;\r\n                                                dispatch(addProductToCart(tmp));\r\n                                            }\r\n                                        }}\r\n                                    >\r\n                                        Add to Cart\r\n                                    </button>\r\n                                </>\r\n                            ) : (\r\n                                <button\r\n                                    id=\"add-cart-btn\"\r\n                                    style={{\r\n                                        width: \"100%\",\r\n                                        backgroundColor: \"#0a0a0a\",\r\n                                        color: \"#fff\",\r\n                                        border: \"none\",\r\n                                        height: \"45px\",\r\n                                    }}\r\n                                    onClick={() => {\r\n                                        M.toast({\r\n                                            html: \"Product was added to cart\",\r\n                                        });\r\n                                        dispatch(addProductToCart(product));\r\n                                    }}\r\n                                >\r\n                                    Add to Cart\r\n                                </button>\r\n                            )}\r\n                        </>\r\n                    )}\r\n\r\n                    <ul id=\"dropdown1\" className=\"dropdown-content\">\r\n                        <>\r\n                            {odata.getProductsOptions.map((_val, i) => {\r\n                                return (\r\n                                    <li\r\n                                        key={i}\r\n                                        onClick={() => {\r\n                                            console.log(\"clicked\");\r\n                                            let percent = 100;\r\n\r\n                                            percent =\r\n                                                odata.getProductsOptions[i]\r\n                                                    .stock;\r\n\r\n                                            if (percent > 100) {\r\n                                                percent = 100;\r\n                                            }\r\n\r\n                                            anime({\r\n                                                targets: \".option-bar-filler\",\r\n                                                width: [\"0%\", `${percent}%`],\r\n                                                easing: \"easeInOutExpo\",\r\n                                            });\r\n\r\n                                            setOption({\r\n                                                name:\r\n                                                    odata.getProductsOptions[i]\r\n                                                        .name,\r\n                                                option_id:\r\n                                                    odata.getProductsOptions[i]\r\n                                                        .option_id,\r\n                                                option_price:\r\n                                                    odata.getProductsOptions[i]\r\n                                                        .price,\r\n                                                option_stock:\r\n                                                    odata.getProductsOptions[i]\r\n                                                        .stock,\r\n                                            });\r\n                                            document\r\n                                                .getElementById(\"add-cart-btn\")!\r\n                                                .classList.remove(\"disabled\");\r\n                                        }}\r\n                                    >\r\n                                        {/* eslint-disable-next-line */}\r\n                                        <a>\r\n                                            {odata.getProductsOptions[i].name}\r\n                                        </a>\r\n                                    </li>\r\n                                );\r\n                            })}\r\n                        </>\r\n                    </ul>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ProductDetails;\r\n","import { useEffect, useRef, useState } from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { useGetProductsByIdsQuery } from \"../../generated/graphql\";\r\nimport { changeQuantityOnProduct } from \"../../redux/actions/userAction\";\r\nimport anime from \"animejs\";\r\n\r\nconst Cart = () => {\r\n    const products = useSelector(state => state.productsInCart);\r\n\r\n    const product_ids = [] as number[];\r\n\r\n    for (let i = 0; i < products.length; i++) {\r\n        let tmp = true;\r\n        for (let j = 0; j < product_ids.length; j++) {\r\n            if (product_ids[j] === products[i].product_id) {\r\n                tmp = false;\r\n            }\r\n        }\r\n\r\n        if (tmp) {\r\n            product_ids.push(products[i].product_id);\r\n        }\r\n    }\r\n\r\n    const products_str = JSON.stringify(product_ids);\r\n    const { data, loading, error } = useGetProductsByIdsQuery({\r\n        variables: {\r\n            products_str,\r\n        },\r\n    });\r\n\r\n    // const [checkout] = useCheckoutMutation();\r\n    const dispatch = useDispatch();\r\n    const [state, setState] = useState({\r\n        refresh: false,\r\n        quantities: [],\r\n    });\r\n\r\n    const [total, setTotal] = useState(0);\r\n\r\n    useEffect(() => {\r\n        if (!!products) {\r\n            var tmp_total = 0;\r\n            for (let i = 0; i < products.length; i++) {\r\n                let product = products[i];\r\n                if (!product.option || product.option.length === 0) {\r\n                    if (state.quantities[i]) {\r\n                        tmp_total += products[i].price * state.quantities[i];\r\n                    } else {\r\n                        tmp_total += products[i].price * products[i].quantity;\r\n                    }\r\n                } else {\r\n                    if (state.quantities[i]) {\r\n                        tmp_total +=\r\n                            products[i].option_price * state.quantities[i];\r\n                    } else {\r\n                        tmp_total +=\r\n                            products[i].option_price * products[i].quantity;\r\n                    }\r\n                }\r\n            }\r\n\r\n            setTotal(tmp_total);\r\n            // setState({ ...state, refresh: !state.refresh });\r\n        }\r\n    });\r\n\r\n    if (loading) {\r\n        return <></>;\r\n    }\r\n\r\n    if (!!error) {\r\n        return (\r\n            <div style={{ minHeight: \"70vh\" }}>\r\n                <div\r\n                    className=\"row\"\r\n                    style={{ display: \"flex\", justifyContent: \"center\" }}\r\n                >\r\n                    <h5>Oops this is embarrasing</h5>\r\n                </div>\r\n\r\n                <div style={{ display: \"flex\", justifyContent: \"center\" }}>\r\n                    <div className=\"faq-wrapper\">\r\n                        <div\r\n                            style={{\r\n                                width: \"100%\",\r\n                                borderBottom: \" 4px solid #ff0000\",\r\n                            }}\r\n                        ></div>\r\n\r\n                        <h3 style={{ fontWeight: 550 }}>An error occured</h3>\r\n\r\n                        <p className=\"flow-text\" style={{ marginLeft: \"32px\" }}>\r\n                            <strong style={{ color: \"#ff0000\" }}>-</strong>{\" \"}\r\n                            Please try again later. If error persist contact us\r\n                            via instagram or email.\r\n                        </p>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    if (!products || products.length === 0) {\r\n        return (\r\n            <div style={{ minHeight: \"80vh\" }}>\r\n                <h3 className=\"center-align\">Your Shopping Cart Is Empty!</h3>\r\n                <a href=\"#/products\">\r\n                    <h6\r\n                        className=\"center-align\"\r\n                        style={{ marginBottom: \"16px\" }}\r\n                    >\r\n                        Click me to start shopping\r\n                    </h6>\r\n                </a>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    if (!!data) {\r\n        for (let i = 0; i < products.length; i++) {\r\n            // cart item validation\r\n            for (let j = 0; j < data.getProductsByIds.length; j++) {\r\n                if (\r\n                    products[i].product_id ===\r\n                    data.getProductsByIds[j].product_id\r\n                ) {\r\n                    if (!products[i].option) {\r\n                        if (\r\n                            products[i].quantity >\r\n                            data.getProductsByIds[j].stock\r\n                        ) {\r\n                            // edit the item\r\n                            products[i].name = data.getProductsByIds[j].name;\r\n                            products[i].price = data.getProductsByIds[j].price;\r\n                            products[i].quantity =\r\n                                data.getProductsByIds[j].stock;\r\n                            dispatch(\r\n                                changeQuantityOnProduct(\r\n                                    data.getProductsByIds[j].stock,\r\n                                    i\r\n                                )\r\n                            );\r\n                        }\r\n                    } else {\r\n                        if (\r\n                            !!data.getProductsByIds[j] &&\r\n                            !!data.getProductsByIds[j].options\r\n                        ) {\r\n                            for (\r\n                                let ii = 0;\r\n                                ii < data.getProductsByIds[j].options!.length;\r\n                                ii++\r\n                            ) {\r\n                                if (\r\n                                    products[i].option_id ===\r\n                                    data.getProductsByIds[j].options![ii]\r\n                                        .option_id\r\n                                ) {\r\n                                    //check stock\r\n                                    if (\r\n                                        products[i].quantity >\r\n                                        data.getProductsByIds[j].options![ii]\r\n                                            .stock\r\n                                    ) {\r\n                                        dispatch(\r\n                                            changeQuantityOnProduct(\r\n                                                data.getProductsByIds[j]\r\n                                                    .options![ii].stock,\r\n                                                i\r\n                                            )\r\n                                        );\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n\r\n                        // if (products[i].quantity > data.getProducts[j].stock) {\r\n                        //     // edit the item\r\n                        //     products[i].name = data.getProducts[j].name;\r\n                        //     products[i].price = data.getProducts[j].price;\r\n                        //     products[i].quantity = data.getProducts[j].stock;\r\n                        //     dispatch(\r\n                        //         changeQuantityOnProduct(\r\n                        //             data.getProducts[j].stock,\r\n                        //             i\r\n                        //         )\r\n                        //     );\r\n                        // }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    console.log(\"products :>> \", products);\r\n\r\n    return (\r\n        <div style={{ minHeight: \"80vh\" }}>\r\n            <>\r\n                <h3 className=\"center-align\" style={{ fontWeight: \"bold\" }}>\r\n                    Cart\r\n                </h3>\r\n                <h6 className=\"center-align\" style={{ fontWeight: 600 }}>\r\n                    Subtotal(${Number(total / 100).toFixed(2)})\r\n                </h6>\r\n                {products.map((_val, i) => {\r\n                    return (\r\n                        <div\r\n                            id={`product-${i}`}\r\n                            key={i}\r\n                            className={`product-${i} product row container`}\r\n                        >\r\n                            <div className={` col s12 m5 l4`}>\r\n                                <img\r\n                                    alt=\"product\"\r\n                                    src={products[i].images[0].img_url}\r\n                                    style={{ width: \"100%\" }}\r\n                                />\r\n                            </div>\r\n                            <div className=\"col s12 m4\">\r\n                                <h5 className=\"center-align hide-on-small-only\">\r\n                                    {products[i].name}{\" \"}\r\n                                    {!products[i].option ? (\r\n                                        <></>\r\n                                    ) : (\r\n                                        <span className=\"bold\">\r\n                                            ({products[i].option})\r\n                                        </span>\r\n                                    )}\r\n                                </h5>\r\n\r\n                                <h6 className=\"center-align show-on-small hide-on-med-and-up\">\r\n                                    {products[i].name} ($\r\n                                    {!products[i].option_price ? (\r\n                                        <span>\r\n                                            {Number(\r\n                                                products[i].price / 100\r\n                                            ).toFixed(2)}\r\n                                        </span>\r\n                                    ) : (\r\n                                        <span>\r\n                                            {Number(\r\n                                                products[i].option_price / 100\r\n                                            ).toFixed(2)}\r\n                                        </span>\r\n                                    )}\r\n                                    )\r\n                                </h6>\r\n                            </div>\r\n\r\n                            <div\r\n                                className=\"col s4 offset-s4 m2 l2\"\r\n                                style={{\r\n                                    padding: \"0\",\r\n                                    display: \"flex\",\r\n                                    justifyContent: \"center\",\r\n                                }}\r\n                            >\r\n                                <input\r\n                                    type=\"text\"\r\n                                    value={\r\n                                        state.quantities[i] ||\r\n                                        state.quantities[i] === 0\r\n                                            ? state.quantities[i]\r\n                                            : products[i].quantity\r\n                                    }\r\n                                    minLength={0}\r\n                                    maxLength={2}\r\n                                    pattern=\"\\D\"\r\n                                    onBlur={e => {\r\n                                        dispatch(\r\n                                            changeQuantityOnProduct(\r\n                                                Number(e.target.value),\r\n                                                i\r\n                                            )\r\n                                        );\r\n\r\n                                        if (e.target.value === \"0\") {\r\n                                            let tmp = state.quantities;\r\n                                            tmp.splice(i, 1);\r\n\r\n                                            anime({\r\n                                                duration: 400,\r\n                                                targets: `.product-${i}`,\r\n                                                easing: \"easeOutExpo\",\r\n                                                opacity: {\r\n                                                    value: [1, 0],\r\n                                                    easing: \"linear\",\r\n                                                },\r\n                                                complete: function () {\r\n                                                    setState({\r\n                                                        ...state,\r\n                                                        quantities: tmp,\r\n                                                        refresh: !state.refresh,\r\n                                                    });\r\n                                                    if (\r\n                                                        !!document.getElementById(\r\n                                                            `product-${i}`\r\n                                                        )\r\n                                                    ) {\r\n                                                        document.getElementById(\r\n                                                            `product-${i}`\r\n                                                        )!.style.opacity = \"1\";\r\n                                                    }\r\n                                                },\r\n                                            });\r\n                                        }\r\n                                    }}\r\n                                    onChange={e => {\r\n                                        let tmp: any = state.quantities;\r\n\r\n                                        if (!e.target.value) {\r\n                                            tmp[i] = 0;\r\n                                            setState({\r\n                                                ...state,\r\n                                                quantities: tmp,\r\n                                            });\r\n                                        }\r\n\r\n                                        if (e.target.value.match(/\\d/g)) {\r\n                                            //check if value is less than stock\r\n                                            let foo = true;\r\n                                            for (\r\n                                                let j = 0;\r\n                                                j <\r\n                                                data!.getProductsByIds.length;\r\n                                                j++\r\n                                            ) {\r\n                                                if (\r\n                                                    data?.getProductsByIds[j]\r\n                                                        .options\r\n                                                ) {\r\n                                                    if (\r\n                                                        data?.getProductsByIds[\r\n                                                            j\r\n                                                        ].product_id ===\r\n                                                        products[i].product_id\r\n                                                    ) {\r\n                                                        for (\r\n                                                            let z = 0;\r\n                                                            z <\r\n                                                            data\r\n                                                                ?.getProductsByIds[\r\n                                                                j\r\n                                                            ].options!.length;\r\n                                                            z++\r\n                                                        ) {\r\n                                                            if (\r\n                                                                products[i]\r\n                                                                    .option_id ===\r\n                                                                data\r\n                                                                    ?.getProductsByIds[\r\n                                                                    j\r\n                                                                ].options![z]\r\n                                                                    .option_id\r\n                                                            ) {\r\n                                                                if (\r\n                                                                    Number(\r\n                                                                        e.target\r\n                                                                            .value\r\n                                                                    ) >\r\n                                                                    data\r\n                                                                        ?.getProductsByIds[\r\n                                                                        j\r\n                                                                    ].options![\r\n                                                                        z\r\n                                                                    ].stock\r\n                                                                ) {\r\n                                                                    foo = false;\r\n                                                                    tmp[\r\n                                                                        i\r\n                                                                    ] = Number(\r\n                                                                        data\r\n                                                                            ?.getProductsByIds[\r\n                                                                            j\r\n                                                                        ]\r\n                                                                            .options![\r\n                                                                            z\r\n                                                                        ].stock\r\n                                                                    );\r\n                                                                    setState({\r\n                                                                        ...state,\r\n                                                                        quantities: tmp,\r\n                                                                    });\r\n                                                                    break;\r\n                                                                }\r\n                                                            }\r\n                                                        }\r\n                                                    }\r\n                                                }\r\n                                            }\r\n\r\n                                            if (foo) {\r\n                                                tmp[i] = Number(e.target.value);\r\n                                                setState({\r\n                                                    ...state,\r\n                                                    quantities: tmp,\r\n                                                });\r\n                                            }\r\n                                        }\r\n                                    }}\r\n                                    style={{\r\n                                        textAlign: \"center\",\r\n                                        border: \"1px solid #000\",\r\n                                        height: \"56px\",\r\n                                        width: \"56px\",\r\n                                    }}\r\n                                />\r\n                            </div>\r\n\r\n                            <div className=\"col hide-on-small-only m1 l2\">\r\n                                $\r\n                                {!products[i].option_price ? (\r\n                                    <span>\r\n                                        {Number(\r\n                                            products[i].price / 100\r\n                                        ).toFixed(2)}\r\n                                    </span>\r\n                                ) : (\r\n                                    <span>\r\n                                        {Number(\r\n                                            products[i].option_price / 100\r\n                                        ).toFixed(2)}\r\n                                    </span>\r\n                                )}\r\n                            </div>\r\n                        </div>\r\n                    );\r\n                })}\r\n                <div\r\n                    style={{\r\n                        width: \"100%\",\r\n                        display: \"flex\",\r\n                        justifyContent: \"center\",\r\n                        marginBottom: \"40px\",\r\n                    }}\r\n                >\r\n                    <a\r\n                        className=\"btn\"\r\n                        style={{\r\n                            marginTop: \"16px\",\r\n                            width: \"45%\",\r\n                            maxWidth: \"380px\",\r\n                            backgroundColor: \"#343145\",\r\n                        }}\r\n                        href=\"#/checkout\"\r\n                    >\r\n                        checkout\r\n                    </a>\r\n                </div>\r\n            </>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Cart;\r\n","const Paid = () => {\r\n    return (\r\n        <div style={{ minHeight: \"80vh\" }}>\r\n            <div className=\"centered\">\r\n                <h3>Success</h3>\r\n            </div>\r\n\r\n            <div\r\n                style={{\r\n                    width: \"100%\",\r\n                    display: \"flex\",\r\n                    justifyContent: \"center\",\r\n                }}\r\n            >\r\n                <div\r\n                    style={{\r\n                        width: \"50%\",\r\n                        borderBottom: \" 4px solid #ff0000\",\r\n                    }}\r\n                ></div>\r\n            </div>\r\n\r\n            <div className=\"centered\">\r\n                <div className=\"faq-wrapper\">\r\n                    <blockquote\r\n                        style={{\r\n                            borderLeft: \"5px solid black\",\r\n                            marginTop: \"64px\",\r\n                        }}\r\n                    >\r\n                        <h3 style={{ fontWeight: 550 }}>\r\n                            We Received your order.\r\n                        </h3>\r\n\r\n                        <p className=\"flow-text\" style={{ marginLeft: \"32px\" }}>\r\n                            <strong style={{ color: \"#ff0000\" }}>-</strong>{\" \"}\r\n                            Please check your Paypal, Email, or the My-Orders\r\n                            page for updates.\r\n                        </p>\r\n                    </blockquote>\r\n\r\n                    <blockquote\r\n                        style={{\r\n                            borderLeft: \"5px solid #ff0000\",\r\n                            marginTop: \"64px\",\r\n                        }}\r\n                    >\r\n                        <h3 style={{ fontWeight: 550 }} className=\"noselect\">\r\n                            Thank you for shopping with Us! ٩(\r\n                            <span style={{ color: \"pink\" }}>♡</span>ε\r\n                            <span style={{ color: \"pink\" }}>♡</span>\r\n                            )۶\r\n                        </h3>\r\n                    </blockquote>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Paid;\r\n","import { useEffect, useRef, useState } from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport {\r\n    useCheckoutMutation,\r\n    useGetCurrUserQuery,\r\n    useValidateCouponMutation,\r\n    usePaypalCheckoutMutation,\r\n    useAddPaypalOrderMutation,\r\n} from \"../../generated/graphql\";\r\nimport { CardElement } from \"@stripe/react-stripe-js\";\r\nimport { Redirect } from \"react-router\";\r\nimport { checkAuth } from \"../../CheckAuth\";\r\nimport { resetCart } from \"../../redux/actions/userAction\";\r\nimport Paid from \"./Paid\";\r\n\r\nfunction CardSection() {\r\n    const CARD_ELEMENT_OPTIONS: any = {\r\n        iconStyle: \"solid\",\r\n        hidePostalCode: true,\r\n        style: {\r\n            base: {\r\n                iconColor: \"rgb(240, 57, 122)\",\r\n                color: \"rgb(240, 57, 122)\",\r\n                fontSize: \"16px\",\r\n                fontFamily: '\"Open Sans\", sans-serif',\r\n                fontSmoothing: \"antialiased\",\r\n                \"::placeholder\": {\r\n                    color: \"#CFD7DF\",\r\n                },\r\n            },\r\n\r\n            invalid: {\r\n                color: \"#e5424d\",\r\n                \":focus\": {\r\n                    color: \"#303238\",\r\n                },\r\n            },\r\n        },\r\n    };\r\n\r\n    return <CardElement options={CARD_ELEMENT_OPTIONS} />;\r\n}\r\n\r\nconst Checkout = props => {\r\n    const { data } = useGetCurrUserQuery();\r\n    const [checkout] = useCheckoutMutation();\r\n    const [validateCoupon] = useValidateCouponMutation();\r\n    const [paypalCheckout] = usePaypalCheckoutMutation();\r\n    const [addPaypalOrder] = useAddPaypalOrderMutation();\r\n    const [discountPH, setDiscountPH] = useState(0);\r\n    const products = useSelector(state => state.productsInCart);\r\n    const dispatch = useDispatch();\r\n    const [coupon, setCoupon] = useState(\"\");\r\n    const [subtotal, setSubtotal] = useState(-1);\r\n    const [Total, setTotal] = useState(-1);\r\n    const [shipping, setShipping] = useState(-1);\r\n    const [billing, setBilling] = useState({\r\n        refresh: false,\r\n        email: \"\",\r\n        name: \"\",\r\n        address: {\r\n            city: \"\",\r\n            line1: \"\",\r\n            zip: \"\",\r\n            state: \"\",\r\n            country: \"\",\r\n        },\r\n    });\r\n\r\n    const [paidFor, setPaidFor] = useState(false);\r\n    const [err, setError] = useState(\"\");\r\n    const [address, setAddress] = useState({\r\n        city: \"\",\r\n        line1: \"\",\r\n        zip: \"\",\r\n        state: \"\",\r\n        email: \"\",\r\n        name: \"\",\r\n        country: \"\",\r\n    });\r\n\r\n    const paypalRef = useRef();\r\n    const couponRef: any = useRef();\r\n    couponRef.current = coupon;\r\n\r\n    useEffect(() => {\r\n        let tmp: any = paypalRef.current;\r\n        var elems = document.querySelectorAll(\".autocomplete\");\r\n        M.Autocomplete.init(elems, {\r\n            data: {\r\n                Alabama: null,\r\n                Alaska: null,\r\n                Arizona: null,\r\n                Arkansas: null,\r\n                California: null,\r\n                Colorado: null,\r\n                Connecticut: null,\r\n                Delaware: null,\r\n                Florida: null,\r\n                Georgia: null,\r\n                Hawaii: null,\r\n                Idaho: null,\r\n                Illinois: null,\r\n                Indiana: null,\r\n                Iowa: null,\r\n                Kansas: null,\r\n                Kentucky: null,\r\n                Louisiana: null,\r\n                Maine: null,\r\n                Maryland: null,\r\n                Massachusettes: null,\r\n                Michigan: null,\r\n                Minnesota: null,\r\n                Mississippi: null,\r\n                Missouri: null,\r\n                Montana: null,\r\n                Nebraska: null,\r\n                Nevada: null,\r\n                \"New Hampshire\": null,\r\n                \"New Jersey\": null,\r\n                \"New Mexico\": null,\r\n                \"New York\": null,\r\n                \"North Carolina\": null,\r\n                \"North Dakota\": null,\r\n                Ohio: null,\r\n                Oklahoma: null,\r\n                Oregon: null,\r\n                Pennsylvania: null,\r\n                \"Rhode Island\": null,\r\n                \"South Carolina\": null,\r\n                \"South Dakota\": null,\r\n                Tennessee: null,\r\n                Texas: null,\r\n                Utah: null,\r\n                Vermont: null,\r\n                Virginia: null,\r\n                Washington: null,\r\n                \"West Virginia\": null,\r\n                Wisconsin: null,\r\n                Wyoming: null,\r\n            },\r\n        });\r\n\r\n        let win = window as any;\r\n        try {\r\n            if (!!tmp && tmp.children.length === 0) {\r\n                win.paypal\r\n                    .Buttons({\r\n                        createOrder: async (data, actions) => {\r\n                            let products_str = JSON.stringify(products);\r\n\r\n                            let price = await paypalCheckout({\r\n                                variables: {\r\n                                    products: products_str,\r\n                                    coupon: couponRef.current || \"NONE\",\r\n                                },\r\n                            });\r\n\r\n                            if (!price) {\r\n                                return;\r\n                            } else {\r\n                                return actions.order.create({\r\n                                    purchase_units: [\r\n                                        {\r\n                                            description: \"product.description\",\r\n                                            amount: {\r\n                                                currency_code: \"USD\",\r\n                                                value: Number(\r\n                                                    Number(\r\n                                                        price.data\r\n                                                            ?.paypalCheckout\r\n                                                    ) / 100\r\n                                                ).toFixed(2),\r\n                                            },\r\n                                        },\r\n                                    ],\r\n                                });\r\n                            }\r\n                        },\r\n                        onApprove: async (_ppdata, actions) => {\r\n                            const order = await actions.order.capture();\r\n                            console.log(\"order :>> \", order);\r\n                            let products_str = JSON.stringify(products),\r\n                                purchaseUnits_str = JSON.stringify(\r\n                                    order.purchase_units\r\n                                ),\r\n                                user_id;\r\n                            if (\r\n                                !data ||\r\n                                !data.getCurrUser ||\r\n                                !data.getCurrUser.user_id\r\n                            ) {\r\n                                user_id =\r\n                                    order.purchase_units[0].payee.email_address;\r\n                            } else {\r\n                                user_id = data!.getCurrUser!.user_id!;\r\n                            }\r\n                            // validate order info here paypal order here\r\n                            addPaypalOrder({\r\n                                variables: {\r\n                                    coupon: couponRef.current || \"NONE\",\r\n                                    products: products_str,\r\n                                    purchase_units: purchaseUnits_str,\r\n                                    user_id,\r\n                                },\r\n                            });\r\n                            setPaidFor(true);\r\n                        },\r\n                        onError: async err => {\r\n                            console.log(\"err :>> \", err);\r\n                            let products_str = JSON.stringify(products);\r\n                            var price: any = await paypalCheckout({\r\n                                variables: {\r\n                                    products: products_str,\r\n                                    coupon,\r\n                                },\r\n                            });\r\n                            setError(price.data.paypalCheckout);\r\n                        },\r\n                    })\r\n                    .render(paypalRef.current);\r\n            } else {\r\n            }\r\n        } catch {\r\n            setError(\"DONT_KNOW\");\r\n        }\r\n    }, [Total, addPaypalOrder, coupon, data, paypalCheckout, products]);\r\n\r\n    if (!!err) {\r\n        return (\r\n            <div style={{ minHeight: \"70vh\" }}>\r\n                <div\r\n                    className=\"row\"\r\n                    style={{ display: \"flex\", justifyContent: \"center\" }}\r\n                >\r\n                    <h1>Oops this is embarrasing</h1>\r\n                </div>\r\n\r\n                <div style={{ display: \"flex\", justifyContent: \"center\" }}>\r\n                    <div className=\"faq-wrapper\">\r\n                        <div\r\n                            style={{\r\n                                width: \"100%\",\r\n                                borderBottom: \" 4px solid black\",\r\n                            }}\r\n                        ></div>\r\n\r\n                        <h3 style={{ fontWeight: 550 }}>\r\n                            It looks like{\" \"}\r\n                            <span style={{ color: \"rgb(230, 19, 19)\" }}>\r\n                                {err}\r\n                            </span>\r\n                        </h3>\r\n\r\n                        <p className=\"flow-text\" style={{ marginLeft: \"32px\" }}>\r\n                            <strong style={{ color: \"#ff0000\" }}>-</strong> If\r\n                            you believe this is an error please contact us via\r\n                            instagram or email.\r\n                        </p>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    if (paidFor) {\r\n        dispatch(resetCart());\r\n        return <Paid />;\r\n    }\r\n\r\n    if (!products || products.length === 0) {\r\n        return <Redirect to=\"/my-cart\" />;\r\n    }\r\n\r\n    const handleSubmit = async () => {\r\n        let payBtn = document.getElementById(\"stripe-pay-btn\")!;\r\n        payBtn.classList.add(\"disabled\");\r\n        const { stripe, elements } = props;\r\n        if (!stripe || !elements) {\r\n            return;\r\n        }\r\n\r\n        const card = elements.getElement(CardElement);\r\n        const result = await stripe.createToken(card);\r\n\r\n        if (result.error) {\r\n            M.toast({ html: `${result.error.message}` });\r\n            console.log(\"result.error :>> \", result.error);\r\n        } else {\r\n            let tmp: any = address;\r\n            tmp.email = address.email;\r\n            let products_str = JSON.stringify(products),\r\n                token_str = JSON.stringify(result.token),\r\n                shipping_str = JSON.stringify(tmp);\r\n\r\n            let user_id;\r\n            if (!data) {\r\n                user_id = \"NONE\";\r\n            } else {\r\n                user_id = data.getCurrUser!.user_id!;\r\n            }\r\n\r\n            let billing_str = \"\";\r\n            if (billing.refresh) {\r\n                billing_str = JSON.stringify(billing);\r\n            } else {\r\n                billing_str = \"NONE\";\r\n            }\r\n\r\n            let response = await checkout({\r\n                variables: {\r\n                    token: token_str,\r\n                    user_id,\r\n                    products: products_str,\r\n                    shipping_info: shipping_str,\r\n                    billing_info: billing_str,\r\n                    coupon,\r\n                },\r\n            });\r\n\r\n            if (!response!.data!.checkout) {\r\n                M.toast({ html: \"Failed to checkout\" });\r\n                M.toast({ html: \"Please double check your details\" });\r\n            } else if (response!.data!.checkout) {\r\n                setPaidFor(true);\r\n            }\r\n        }\r\n        payBtn.classList.remove(\"disabled\");\r\n    };\r\n\r\n    if (subtotal === -1) {\r\n        let tmp_subtotal = 0,\r\n            shipping_total = 100;\r\n\r\n        for (let i = 0; i < products.length; i++) {\r\n            let product = products[i];\r\n            if (!product.option || product.option.length === 0) {\r\n                tmp_subtotal += products[i].price * products[i].quantity;\r\n            } else {\r\n                tmp_subtotal += products[i].option_price * products[i].quantity;\r\n            }\r\n\r\n            shipping_total += products[i].quantity * 50;\r\n        }\r\n\r\n        if (shipping_total > 500) {\r\n            shipping_total = 500;\r\n        }\r\n\r\n        let tax = Math.round(tmp_subtotal * 0.095);\r\n\r\n        // shipping not added to subtotal bc it isn't rerendered if a coupon is added\r\n        setTotal(tmp_subtotal + tax);\r\n        setSubtotal(tmp_subtotal);\r\n        setShipping(shipping_total);\r\n    }\r\n\r\n    const validateForm = () => {\r\n        let tmp_email = address.email;\r\n        if (checkAuth()) {\r\n            tmp_email = \"placeholder\";\r\n        }\r\n\r\n        if (\r\n            !address.name ||\r\n            !tmp_email ||\r\n            !address.line1 ||\r\n            !address.city ||\r\n            !address.zip ||\r\n            !address.state ||\r\n            billing.refresh\r\n        ) {\r\n            if (!tmp_email && document.getElementById(\"email\")) {\r\n                document.getElementById(\"email\")!.classList.add(\"invalid\");\r\n            }\r\n            if (!address.name) {\r\n                document.getElementById(\"name\")!.classList.add(\"invalid\");\r\n            }\r\n\r\n            if (!address.line1) {\r\n                document.getElementById(\"address\")!.classList.add(\"invalid\");\r\n            }\r\n\r\n            if (!address.city) {\r\n                document.getElementById(\"city\")!.classList.add(\"invalid\");\r\n            }\r\n\r\n            if (!address.zip) {\r\n                document.getElementById(\"zip\")!.classList.add(\"invalid\");\r\n            }\r\n\r\n            if (!address.state) {\r\n                document.getElementById(\"state\")!.classList.add(\"invalid\");\r\n            }\r\n\r\n            if (billing.refresh) {\r\n                if (\r\n                    !billing.name ||\r\n                    !billing.email ||\r\n                    !billing.address.line1 ||\r\n                    !billing.address.city ||\r\n                    !billing.address.zip ||\r\n                    !billing.address.state\r\n                ) {\r\n                    if (!billing.name) {\r\n                        document\r\n                            .getElementById(\"billing_name\")!\r\n                            .classList.add(\"invalid\");\r\n                    }\r\n\r\n                    if (!billing.email) {\r\n                        document\r\n                            .getElementById(\"billing_email\")!\r\n                            .classList.add(\"invalid\");\r\n                    }\r\n\r\n                    if (!billing.address.line1) {\r\n                        document\r\n                            .getElementById(\"billing_address\")!\r\n                            .classList.add(\"invalid\");\r\n                    }\r\n\r\n                    if (!billing.address.city) {\r\n                        document\r\n                            .getElementById(\"billing_city\")!\r\n                            .classList.add(\"invalid\");\r\n                    }\r\n\r\n                    if (!billing.address.zip) {\r\n                        document\r\n                            .getElementById(\"billing_zip\")!\r\n                            .classList.add(\"invalid\");\r\n                    }\r\n\r\n                    if (!billing.address.state) {\r\n                        document\r\n                            .getElementById(\"billing_state\")!\r\n                            .classList.add(\"invalid\");\r\n                    }\r\n                }\r\n            }\r\n\r\n            M.toast({\r\n                html: \"Please fill in the missing data\",\r\n            });\r\n        } else {\r\n            handleSubmit();\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"row\" style={{ height: \"100%\", margin: \"0\" }}>\r\n            <div\r\n                className=\"col s12 m6  z-depth-3 \"\r\n                style={{ minHeight: \"93vh\", paddingBottom: 32 }}\r\n            >\r\n                <div className=\"container\" style={{ marginTop: \"50px\" }}>\r\n                    <div className=\"row\">\r\n                        <a href=\"#/my-cart\">\r\n                            <svg\r\n                                style={{ marginRight: \"8px\" }}\r\n                                focusable=\"false\"\r\n                                width=\"12\"\r\n                                height=\"12\"\r\n                                viewBox=\"0 0 16 16\"\r\n                            >\r\n                                <path\r\n                                    d=\"M3.417 7H15a1 1 0 0 1 0 2H3.417l4.591 4.591a1 1 0 0 1-1.415 1.416l-6.3-6.3a1 1 0 0 1 0-1.414l6.3-6.3A1 1 0 0 1 8.008 2.41z\"\r\n                                    fillRule=\"evenodd\"\r\n                                ></path>\r\n                            </svg>\r\n                            <span>Back To Cart</span>\r\n                        </a>\r\n                    </div>\r\n                    <div>\r\n                        <div\r\n                            className=\"ProductSummary container\"\r\n                            style={{ marginTop: \"32px\" }}\r\n                        >\r\n                            <div\r\n                                className=\"ProductSummary-info\"\r\n                                style={{\r\n                                    display: \"flex\",\r\n                                    flexDirection: \"column\",\r\n                                }}\r\n                            >\r\n                                <span\r\n                                    style={{\r\n                                        color: \"rgba(26,26,26,.6)\",\r\n                                        fontWeight: \"bold\",\r\n                                    }}\r\n                                >\r\n                                    Total\r\n                                </span>\r\n                                <span\r\n                                    style={{\r\n                                        fontSize: \"36px\",\r\n                                        letterSpacing: \"-.03rem\",\r\n                                        color: \"#303030\",\r\n                                    }}\r\n                                >\r\n                                    $\r\n                                    {Number((Total + shipping) / 100).toFixed(\r\n                                        2\r\n                                    )}\r\n                                    {/* ${Number(Total / 100).toFixed(2)} */}\r\n                                </span>\r\n                                <span\r\n                                    style={{\r\n                                        marginTop: \"32px\",\r\n                                        marginBottom: \"32px\",\r\n                                    }}\r\n                                    id=\"Products-summary\"\r\n                                >\r\n                                    {products.map((_val, i) => {\r\n                                        return (\r\n                                            <div\r\n                                                key={i}\r\n                                                className=\"product\"\r\n                                                style={{\r\n                                                    marginBottom: \"16px\",\r\n                                                    display: \"flex\",\r\n                                                    justifyContent:\r\n                                                        \"space-between\",\r\n                                                }}\r\n                                            >\r\n                                                <div\r\n                                                    className=\"product-name\"\r\n                                                    style={{\r\n                                                        fontSize: \"16px\",\r\n                                                        fontWeight: 600,\r\n                                                    }}\r\n                                                >\r\n                                                    {products[i].name}{\" \"}\r\n                                                    {!products[i].option ? (\r\n                                                        <></>\r\n                                                    ) : (\r\n                                                        <span className=\"bold\">\r\n                                                            (\r\n                                                            {products[i].option}\r\n                                                            )\r\n                                                        </span>\r\n                                                    )}{\" \"}\r\n                                                    x{products[i].quantity}\r\n                                                </div>\r\n                                                <div\r\n                                                    className=\"product-subtotal\"\r\n                                                    style={{ fontWeight: 390 }}\r\n                                                >\r\n                                                    $\r\n                                                    {!products[i]\r\n                                                        .option_price ? (\r\n                                                        <span>\r\n                                                            {Number(\r\n                                                                (products[i]\r\n                                                                    .price *\r\n                                                                    products[i]\r\n                                                                        .quantity) /\r\n                                                                    100\r\n                                                            ).toFixed(2)}\r\n                                                        </span>\r\n                                                    ) : (\r\n                                                        <span>\r\n                                                            {Number(\r\n                                                                (products[i]\r\n                                                                    .option_price *\r\n                                                                    products[i]\r\n                                                                        .quantity) /\r\n                                                                    100\r\n                                                            ).toFixed(2)}\r\n                                                        </span>\r\n                                                    )}\r\n                                                </div>\r\n                                            </div>\r\n                                        );\r\n                                    })}\r\n                                    <div\r\n                                        className=\"subtotal\"\r\n                                        style={{\r\n                                            paddingBottom: \"16px\",\r\n                                            paddingTop: \"16px\",\r\n                                            display: \"flex\",\r\n                                            justifyContent: \"space-between\",\r\n                                        }}\r\n                                    >\r\n                                        <span>Subtotal</span>\r\n                                        <span>\r\n                                            ${Number(subtotal / 100).toFixed(2)}\r\n                                        </span>\r\n                                    </div>\r\n                                    <div className=\"divider\"></div>\r\n\r\n                                    <div\r\n                                        id=\"coupon-applied\"\r\n                                        style={{\r\n                                            display: \"none\",\r\n                                            justifyContent: \"space-between\",\r\n                                        }}\r\n                                    >\r\n                                        {shipping === 0 ? (\r\n                                            <></>\r\n                                        ) : (\r\n                                            <>\r\n                                                <span>Coupon Applied</span>\r\n                                                <span\r\n                                                    style={{\r\n                                                        fontWeight: \"bold\",\r\n                                                    }}\r\n                                                >\r\n                                                    -\r\n                                                    {Number(\r\n                                                        discountPH / 100\r\n                                                    ).toFixed(2)}\r\n                                                </span>\r\n                                            </>\r\n                                        )}\r\n                                    </div>\r\n                                    <div className=\"row\" id=\"promocode-input\">\r\n                                        <div className=\"col s8\">\r\n                                            <div className=\"input-field\">\r\n                                                <input\r\n                                                    id=\"PromoCode\"\r\n                                                    type=\"text\"\r\n                                                    className=\"validate\"\r\n                                                    value={coupon}\r\n                                                    onChange={e => {\r\n                                                        setCoupon(\r\n                                                            e.target.value.toLowerCase()\r\n                                                        );\r\n                                                    }}\r\n                                                />\r\n                                                <label htmlFor=\"PromoCode\">\r\n                                                    Add a promotion code\r\n                                                </label>\r\n                                                <span\r\n                                                    id=\"coupon-helper\"\r\n                                                    className=\"helper-text\"\r\n                                                    data-error=\" \"\r\n                                                ></span>\r\n                                            </div>\r\n                                        </div>\r\n                                        <div className=\"col s3\">\r\n                                            <button\r\n                                                className=\"btn\"\r\n                                                style={{\r\n                                                    backgroundColor: \"#343145\",\r\n                                                    marginTop: \"25px\",\r\n                                                    marginBottom: \"15px\",\r\n                                                }}\r\n                                                onClick={async () => {\r\n                                                    //validate  coupon\r\n                                                    if (coupon.length !== 0) {\r\n                                                        let type = await validateCoupon(\r\n                                                            {\r\n                                                                variables: {\r\n                                                                    coupon_name: coupon,\r\n                                                                },\r\n                                                            }\r\n                                                        );\r\n                                                        if (\r\n                                                            type.data!\r\n                                                                .validateCoupon ===\r\n                                                            \"INVALID\"\r\n                                                        ) {\r\n                                                            document\r\n                                                                .getElementById(\r\n                                                                    \"PromoCode\"\r\n                                                                )!\r\n                                                                .classList.add(\r\n                                                                    \"invalid\"\r\n                                                                );\r\n\r\n                                                            document.getElementById(\r\n                                                                \"coupon-helper\"\r\n                                                            )!.attributes[\r\n                                                                \"data-error\"\r\n                                                            ].nodeValue = `The coupon you entered(${coupon}) is not valid`;\r\n\r\n                                                            setCoupon(\"\");\r\n                                                        } else if (\r\n                                                            type.data!\r\n                                                                .validateCoupon ===\r\n                                                            \"FREE_SHIPPING\"\r\n                                                        ) {\r\n                                                            console.log(\r\n                                                                \"freesh\"\r\n                                                            );\r\n                                                            // Handle Free Shipping here\r\n                                                            setShipping(0);\r\n                                                            document.getElementById(\r\n                                                                \"promocode-input\"\r\n                                                            )!.style.display =\r\n                                                                \"none\";\r\n                                                            // replace promo input and submit button with a icon that shows the coupon and discount applied\r\n                                                            document.getElementById(\r\n                                                                \"coupon-applied\"\r\n                                                            )!.style.display =\r\n                                                                \"flex\";\r\n                                                        } else {\r\n                                                            // amount to subtract from subtotal = subtotal * percentage\r\n                                                            let percentage =\r\n                                                                \"0.\" +\r\n                                                                type.data!\r\n                                                                    .validateCoupon;\r\n\r\n                                                            let discount = Math.round(\r\n                                                                subtotal *\r\n                                                                    Number(\r\n                                                                        percentage\r\n                                                                    )\r\n                                                            );\r\n\r\n                                                            let tmp = subtotal;\r\n                                                            tmp -= discount;\r\n\r\n                                                            let tax = Math.round(\r\n                                                                tmp * 0.095\r\n                                                            );\r\n\r\n                                                            setTotal(tmp + tax);\r\n                                                            setSubtotal(tmp);\r\n                                                            setDiscountPH(\r\n                                                                discount\r\n                                                            );\r\n\r\n                                                            // hide promo input and submit button\r\n                                                            document.getElementById(\r\n                                                                \"promocode-input\"\r\n                                                            )!.style.display =\r\n                                                                \"none\";\r\n                                                            // replace promo input and submit button with a icon that shows the coupon and discount applied\r\n                                                            document.getElementById(\r\n                                                                \"coupon-applied\"\r\n                                                            )!.style.display =\r\n                                                                \"flex\";\r\n                                                        }\r\n                                                    }\r\n                                                }}\r\n                                            >\r\n                                                Submit\r\n                                            </button>\r\n                                        </div>\r\n                                    </div>\r\n\r\n                                    <span\r\n                                        style={{\r\n                                            marginTop: \"8px\",\r\n                                            marginBottom: \"16px\",\r\n                                            display: \"flex\",\r\n                                            justifyContent: \"space-between\",\r\n                                        }}\r\n                                    >\r\n                                        <span>Sales Tax</span>\r\n                                        <span style={{ fontWeight: \"bold\" }}>\r\n                                            $\r\n                                            {Number(\r\n                                                Math.round(subtotal * 0.095) /\r\n                                                    100\r\n                                            ).toFixed(2)}\r\n                                        </span>\r\n                                    </span>\r\n\r\n                                    <span\r\n                                        style={{\r\n                                            marginTop: \"8px\",\r\n                                            marginBottom: \"16px\",\r\n                                            display: \"flex\",\r\n                                            justifyContent: \"space-between\",\r\n                                        }}\r\n                                    >\r\n                                        <span>Shipping </span>\r\n                                        <span style={{ fontWeight: \"bold\" }}>\r\n                                            ${Number(shipping / 100).toFixed(2)}\r\n                                        </span>\r\n                                    </span>\r\n\r\n                                    <div className=\"divider\"></div>\r\n\r\n                                    <span\r\n                                        style={{\r\n                                            marginTop: \"16px\",\r\n                                            display: \"flex\",\r\n                                            justifyContent: \"space-between\",\r\n                                        }}\r\n                                    >\r\n                                        <span>Total Due</span>\r\n                                        <span>\r\n                                            $\r\n                                            {Number(\r\n                                                (Total + shipping) / 100\r\n                                            ).toFixed(2)}\r\n                                        </span>\r\n                                    </span>\r\n                                </span>\r\n                            </div>\r\n                            <div\r\n                                style={{\r\n                                    display: \"flex\",\r\n                                    justifyContent: \"center\",\r\n                                    marginTop: \"32px\",\r\n                                }}\r\n                            >\r\n                                <div\r\n                                    style={{\r\n                                        width: \"85%\",\r\n                                        maxWidth: \"600px\",\r\n                                    }}\r\n                                    ref={paypalRef as any}\r\n                                />\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className=\"col s12 m6\" style={{ minHeight: \"93vh\" }}>\r\n                <div className=\"container \" style={{}}>\r\n                    {/* <div style={{ display: \"flex\", justifyContent: \"center\" }}>\r\n                        <h5>Or</h5>\r\n                    </div> */}\r\n\r\n                    <h3>Shipping Information </h3>\r\n                    <h6>\r\n                        <strong style={{ color: \"#ff0000\" }}>*</strong>(US/USD\r\n                        ONLY) Please use Paypal for international orders\r\n                    </h6>\r\n                    <div className=\"centered\">\r\n                        <div\r\n                            style={{\r\n                                width: \"100%\",\r\n                                marginTop: 8,\r\n                                marginBottom: 8,\r\n                                borderRadius: \"15px\",\r\n                                borderBottom: \" 4px solid rgb(64, 3, 3)\",\r\n                            }}\r\n                        ></div>\r\n                    </div>\r\n                    {checkAuth() ? (\r\n                        <></>\r\n                    ) : (\r\n                        <div className=\"input-field\">\r\n                            <input\r\n                                id=\"email\"\r\n                                type=\"text\"\r\n                                value={address.email}\r\n                                onChange={e =>\r\n                                    setAddress({\r\n                                        ...address,\r\n                                        email: e.target.value,\r\n                                    })\r\n                                }\r\n                            />\r\n                            <label htmlFor=\"email\">Email</label>\r\n                            <span\r\n                                className=\"helper-text\"\r\n                                data-error=\"Please your email\"\r\n                            ></span>\r\n                        </div>\r\n                    )}\r\n                    <div className=\"input-field\">\r\n                        <input\r\n                            id=\"name\"\r\n                            value={address.name}\r\n                            type=\"text\"\r\n                            onChange={e =>\r\n                                setAddress({\r\n                                    ...address,\r\n                                    name: e.target.value,\r\n                                })\r\n                            }\r\n                        />\r\n                        <label htmlFor=\"name\">Name</label>\r\n                        <span\r\n                            className=\"helper-text\"\r\n                            data-error=\"Please your name\"\r\n                        ></span>\r\n                    </div>\r\n                    <div className=\"input-field\">\r\n                        <input\r\n                            id=\"address\"\r\n                            value={address.line1}\r\n                            type=\"text\"\r\n                            onChange={e =>\r\n                                setAddress({\r\n                                    ...address,\r\n                                    line1: e.target.value,\r\n                                })\r\n                            }\r\n                        />\r\n                        <label htmlFor=\"address\">Address</label>\r\n                        <span\r\n                            className=\"helper-text\"\r\n                            data-error=\"Please your address\"\r\n                        ></span>\r\n                    </div>\r\n                    <div className=\"row\">\r\n                        <div className=\"col s6\">\r\n                            <div className=\"input-field\">\r\n                                <input\r\n                                    id=\"city\"\r\n                                    value={address.city}\r\n                                    type=\"text\"\r\n                                    onChange={e =>\r\n                                        setAddress({\r\n                                            ...address,\r\n                                            city: e.target.value,\r\n                                        })\r\n                                    }\r\n                                />\r\n                                <label htmlFor=\"city\">City</label>\r\n                                <span\r\n                                    className=\"helper-text\"\r\n                                    data-error=\"Please your city\"\r\n                                ></span>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"col s6\">\r\n                            <div className=\"input-field\">\r\n                                <input\r\n                                    id=\"zip\"\r\n                                    value={address.zip}\r\n                                    type=\"text\"\r\n                                    onChange={e =>\r\n                                        setAddress({\r\n                                            ...address,\r\n                                            zip: e.target.value,\r\n                                        })\r\n                                    }\r\n                                />\r\n                                <label htmlFor=\"zip\">Zip</label>\r\n                                <span\r\n                                    className=\"helper-text\"\r\n                                    data-error=\"Please your zip\"\r\n                                ></span>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"input-field\">\r\n                        <input\r\n                            id=\"state\"\r\n                            value={address.state}\r\n                            className=\"autocomplete\"\r\n                            type=\"text\"\r\n                            onChange={e =>\r\n                                setAddress({\r\n                                    ...address,\r\n                                    state: e.target.value,\r\n                                })\r\n                            }\r\n                        />\r\n                        <label htmlFor=\"state\">State</label>\r\n                        <span\r\n                            className=\"helper-text\"\r\n                            data-error=\"Please Pick a State\"\r\n                        ></span>\r\n                    </div>\r\n                    <div className=\"divider\"></div>\r\n                    <p>\r\n                        <label>\r\n                            <input\r\n                                type=\"checkbox\"\r\n                                id=\"Billing_input\"\r\n                                onClick={() => {\r\n                                    setBilling({\r\n                                        refresh: !billing.refresh,\r\n                                        email: \"\",\r\n                                        name: \"\",\r\n                                        address: {\r\n                                            city: \"\",\r\n                                            line1: \"\",\r\n                                            zip: \"\",\r\n                                            state: \"\",\r\n                                            country: \"\",\r\n                                        },\r\n                                    });\r\n                                }}\r\n                            />\r\n                            <span>Billing is different from shipping</span>\r\n                        </label>\r\n                    </p>\r\n                    {billing.refresh ? (\r\n                        <>\r\n                            <h2\r\n                                style={{\r\n                                    color: \"rgba(26,26,26,.9)\",\r\n                                    fontWeight: 500,\r\n                                    fontSize: \"16px\",\r\n                                }}\r\n                            >\r\n                                Billing Information\r\n                            </h2>\r\n                            <div className=\"input-field\">\r\n                                <input\r\n                                    id=\"billing_email\"\r\n                                    type=\"text\"\r\n                                    value={billing.email}\r\n                                    onChange={e =>\r\n                                        setBilling({\r\n                                            ...billing,\r\n                                            email: e.target.value,\r\n                                        })\r\n                                    }\r\n                                />\r\n                                <label htmlFor=\"billing_email\">\r\n                                    Billing Email\r\n                                </label>\r\n                                <span\r\n                                    className=\"helper-text\"\r\n                                    data-error=\"Please enter a your email\"\r\n                                ></span>\r\n                            </div>\r\n                            <div className=\"input-field\">\r\n                                <input\r\n                                    id=\"billing_name\"\r\n                                    value={billing.name}\r\n                                    type=\"text\"\r\n                                    onChange={e =>\r\n                                        setBilling({\r\n                                            ...billing,\r\n                                            name: e.target.value,\r\n                                        })\r\n                                    }\r\n                                />\r\n                                <label htmlFor=\"billing_name\">Name</label>\r\n                                <span\r\n                                    className=\"helper-text\"\r\n                                    data-error=\"Please enter a your name\"\r\n                                ></span>\r\n                            </div>\r\n                            <div className=\"input-field\">\r\n                                <input\r\n                                    id=\"billing_address\"\r\n                                    value={billing.address.line1}\r\n                                    type=\"text\"\r\n                                    onChange={e =>\r\n                                        setBilling({\r\n                                            ...billing,\r\n                                            address: {\r\n                                                ...billing.address,\r\n                                                line1: e.target.value,\r\n                                            },\r\n                                        })\r\n                                    }\r\n                                />\r\n                                <label htmlFor=\"billing_address\">Address</label>\r\n                                <span\r\n                                    className=\"helper-text\"\r\n                                    data-error=\"Please enter your address\"\r\n                                ></span>\r\n                            </div>\r\n\r\n                            <div className=\"row\">\r\n                                <div className=\"col s6\">\r\n                                    <div className=\"input-field\">\r\n                                        <input\r\n                                            id=\"billing_city\"\r\n                                            value={billing.address.city}\r\n                                            type=\"text\"\r\n                                            onChange={e =>\r\n                                                setBilling({\r\n                                                    ...billing,\r\n                                                    address: {\r\n                                                        ...billing.address,\r\n                                                        city: e.target.value,\r\n                                                    },\r\n                                                })\r\n                                            }\r\n                                        />\r\n                                        <label htmlFor=\"billing_city\">\r\n                                            City\r\n                                        </label>\r\n                                        <span\r\n                                            className=\"helper-text\"\r\n                                            data-error=\"Please enter your city\"\r\n                                        ></span>\r\n                                    </div>\r\n                                </div>\r\n                                <div className=\"col s6\">\r\n                                    <div className=\"input-field\">\r\n                                        <input\r\n                                            id=\"billing_zip\"\r\n                                            value={billing.address.zip}\r\n                                            type=\"text\"\r\n                                            onChange={e =>\r\n                                                setBilling({\r\n                                                    ...billing,\r\n                                                    address: {\r\n                                                        ...billing.address,\r\n                                                        zip: e.target.value,\r\n                                                    },\r\n                                                })\r\n                                            }\r\n                                        />\r\n                                        <label htmlFor=\"billing_zip\">Zip</label>\r\n                                        <span\r\n                                            className=\"helper-text\"\r\n                                            data-error=\"Please enter your zip\"\r\n                                        ></span>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n\r\n                            <div className=\"input-field\">\r\n                                <input\r\n                                    id=\"billing_state\"\r\n                                    value={billing.address.state}\r\n                                    className=\"autocomplete\"\r\n                                    type=\"text\"\r\n                                    onChange={e =>\r\n                                        setBilling({\r\n                                            ...billing,\r\n                                            address: {\r\n                                                ...billing.address,\r\n                                                state: e.target.value,\r\n                                            },\r\n                                        })\r\n                                    }\r\n                                />\r\n                                <label htmlFor=\"billing_state\">State</label>\r\n                                <span\r\n                                    className=\"helper-text\"\r\n                                    data-error=\"Please enter your state\"\r\n                                ></span>\r\n                            </div>\r\n                        </>\r\n                    ) : (\r\n                        <></>\r\n                    )}\r\n                    <h2\r\n                        style={{\r\n                            color: \"rgba(26,26,26,.9)\",\r\n                            fontWeight: 500,\r\n                            fontSize: \"16px\",\r\n                        }}\r\n                    >\r\n                        Payment Details\r\n                    </h2>\r\n                    <CardSection />\r\n                    <div\r\n                        style={{\r\n                            width: \"100%\",\r\n                            display: \"flex\",\r\n                            justifyContent: \"center\",\r\n                        }}\r\n                    >\r\n                        <button\r\n                            className=\"btn\"\r\n                            id=\"stripe-pay-btn\"\r\n                            style={{\r\n                                marginTop: \"16px\",\r\n                                marginBottom: \"64px\",\r\n                                width: \"380px\",\r\n                                backgroundColor: \"#343145\",\r\n                            }}\r\n                            onClick={() => {\r\n                                validateForm();\r\n                            }}\r\n                        >\r\n                            Pay ${Number((Total + shipping) / 100).toFixed(2)}\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Checkout;\r\n","import \"../css/faq.scss\";\r\n\r\nconst FAQ = () => {\r\n    var eyeColors = [\r\n        \"rgb(36, 146, 242)\",\r\n        \"rgb(154, 24, 213)\",\r\n        \"#ff0000\",\r\n        \"#000\",\r\n    ];\r\n    let eyeColor = eyeColors[Math.floor(Math.random() * eyeColors.length)];\r\n    return (\r\n        <>\r\n            <div\r\n                className=\"row\"\r\n                style={{ display: \"flex\", justifyContent: \"center\" }}\r\n            >\r\n                <h1>FAQ</h1>\r\n            </div>\r\n\r\n            <div style={{ display: \"flex\", justifyContent: \"center\" }}>\r\n                <div className=\"faq-wrapper\">\r\n                    <div\r\n                        style={{\r\n                            width: \"100%\",\r\n                            borderBottom: \" 4px solid #ff0000\",\r\n                        }}\r\n                    ></div>\r\n\r\n                    <h3 style={{ fontWeight: 550 }}>Late Orders</h3>\r\n                    <p className=\"flow-text\" style={{ marginLeft: \"32px\" }}>\r\n                        - Please be patient as the pandemic has slowed down mail\r\n                        times.\r\n                    </p>\r\n                    <div className=\"divider\"></div>\r\n                    <h3 style={{ fontWeight: 550 }}>Lost or Damaged Items</h3>\r\n                    <p className=\"flow-text\" style={{ marginLeft: \"32px\" }}>\r\n                        <strong style={{ color: \"#ff0000\" }}>-</strong> Please{\" \"}\r\n                        <a href=\"#/contact\"> contact us </a> about any lost or\r\n                        damaged items, and attach your order number.\r\n                    </p>\r\n\r\n                    <p className=\"flow-text\" style={{ marginLeft: \"32px\" }}>\r\n                        -{\" \"}\r\n                        <strong style={{ fontWeight: 550 }}>\r\n                            CantRelate.JP\r\n                        </strong>{\" \"}\r\n                        is not responsible for lost or damaged items but will\r\n                        replace when possible.\r\n                    </p>\r\n\r\n                    <div className=\"divider\"></div>\r\n\r\n                    <h3 style={{ fontWeight: 550 }}>\r\n                        Incorrect Shipping Address\r\n                    </h3>\r\n\r\n                    <p className=\"flow-text\" style={{ marginLeft: \"32px\" }}>\r\n                        - Please double-check your orders before you place them.\r\n                    </p>\r\n\r\n                    <p className=\"flow-text\" style={{ marginLeft: \"32px\" }}>\r\n                        <strong style={{ color: \"#ff0000\" }}>-</strong> If wrong\r\n                        address is inputted,{\" \"}\r\n                        <strong style={{ fontWeight: 550 }}>\r\n                            please\r\n                            <a href=\"#/contact\"> contact us</a> as soon as\r\n                            possible\r\n                        </strong>\r\n                        . We will do our best to update your order.\r\n                    </p>\r\n\r\n                    <p className=\"flow-text\" style={{ marginLeft: \"32px\" }}>\r\n                        - However{\" \"}\r\n                        <strong style={{ fontWeight: 550 }}>\r\n                            CantRelate.JP\r\n                        </strong>{\" \"}\r\n                        is not responsible for the user's error, and we will not\r\n                        replace the order if it has been shipped.\r\n                    </p>\r\n\r\n                    <div className=\"divider\"></div>\r\n\r\n                    <h3 style={{ fontWeight: 550 }}>\r\n                        Thank you for checking out Can't Relate.JP!\r\n                    </h3>\r\n\r\n                    <p\r\n                        className=\"flow-text\"\r\n                        style={{\r\n                            fontWeight: 525,\r\n                            marginLeft: \"32px\",\r\n                        }}\r\n                    >\r\n                        <strong style={{ color: \"#ff0000\" }}>-</strong> Happy\r\n                        Shopping! ٩(\r\n                        <strong style={{ color: eyeColor }}>◕</strong>‿\r\n                        <strong style={{ color: eyeColor }}>◕</strong>\r\n                        ｡)۶\r\n                    </p>\r\n                </div>\r\n            </div>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default FAQ;\r\n","// import { useState } from \"react\";\r\n// import URI from \"../URI\";\r\nimport \"../css/contact.scss\";\r\nimport { FaInstagram, FaEnvelope } from \"react-icons/fa\";\r\n// import { useGetCurrUserQuery } from \"../generated/graphql\";\r\n// import axios from \"axios\";\r\n\r\nconst Contact = () => {\r\n    // const { data } = useGetCurrUserQuery();\r\n    // const [name, setName] = useState(\"\");\r\n    // const [email, setEmail] = useState(\"\");\r\n    // const [message, setMessage] = useState(\"\");\r\n    // const [orderNum, setOrderNum] = useState(\"\");\r\n\r\n    // const submitForm = () => {\r\n    //     let tmp_email;\r\n    //     if (!!data) {\r\n    //         tmp_email = data!.getCurrUser.email;\r\n    //     } else {\r\n    //         tmp_email = email;\r\n    //     }\r\n\r\n    //     axios({\r\n    //         method: \"POST\",\r\n    //         url: `${URI}/api/contact`,\r\n    //         data: {\r\n    //             name,\r\n    //             email: tmp_email,\r\n    //             message,\r\n    //             orderNum,\r\n    //         },\r\n    //     }).then((res: any) => {\r\n    //         if (res.data === \"SUCCess\") {\r\n    //             M.toast({ html: \"SUCCessfully sent message.\" });\r\n    //             setName(\"\");\r\n    //             setEmail(\"\");\r\n    //             setMessage(\"\");\r\n    //             setOrderNum(\"\");\r\n    //         } else {\r\n    //             //handle failure\r\n    //             M.toast({ html: \"Failed to send message.\" });\r\n    //             M.toast({ html: \"Please Contact Us via Instagram or Email\" });\r\n    //         }\r\n    //     });\r\n\r\n    //     // fetch(`${URI}/api/contact`, {\r\n    //     //     method: \"POST\",\r\n    //     //     body: JSON.stringify({\r\n    //     //         name,\r\n    //     //         email: tmp_email,\r\n    //     //         message,\r\n    //     //         orderNum,\r\n    //     //     }),\r\n    //     // }).\r\n    // };\r\n\r\n    return (\r\n        <div id=\"contact-form\" className=\"container\">\r\n            <div\r\n                className=\"row\"\r\n                style={{ display: \"flex\", justifyContent: \"center\" }}\r\n            >\r\n                <h1>Contact Us</h1>\r\n            </div>\r\n\r\n            <div\r\n                style={{\r\n                    display: \"flex\",\r\n                    justifyContent: \"center\",\r\n                    marginBottom: \"10px\",\r\n                }}\r\n            >\r\n                <span>\r\n                    <a\r\n                        href=\"mailto:cantrelatejp@gmail.com\"\r\n                        style={{ width: \"300px\" }}\r\n                    >\r\n                        <h6 className=\"bold\">\r\n                            <FaEnvelope\r\n                                style={{ marginRight: \"5px\", fontSize: \"20px\" }}\r\n                                className=\"left black-text\"\r\n                            />\r\n                            Cantrelatejp@gmail.com\r\n                        </h6>\r\n                    </a>\r\n                </span>\r\n            </div>\r\n\r\n            <div\r\n                style={{\r\n                    display: \"flex\",\r\n                    justifyContent: \"center\",\r\n                    marginBottom: \"10px\",\r\n                }}\r\n            >\r\n                <span>\r\n                    <a href=\"https://www.instagram.com/cantrelate.jp/\">\r\n                        <h6 className=\"bold\">\r\n                            <FaInstagram\r\n                                style={{ marginRight: \"5px\", fontSize: \"20px\" }}\r\n                                className=\"left black-text\"\r\n                            />\r\n                            @CantRelate.jp\r\n                        </h6>\r\n                    </a>\r\n                </span>\r\n            </div>\r\n\r\n            {/* <div style={{ display: \"flex\", justifyContent: \"center\" }}>\r\n                <div className=\"w-30\">\r\n                    <div style={{ display: \"flex\" }}>\r\n                        <label htmlFor=\"orderNum\">Order Number</label>\r\n                    </div>\r\n                    <input\r\n                        id=\"orderNum\"\r\n                        type=\"text\"\r\n                        className=\"validate browser-default\"\r\n                        value={orderNum}\r\n                        onChange={e => setOrderNum(e.target.value)}\r\n                    />\r\n                </div>\r\n            </div>\r\n\r\n            <div style={{ display: \"flex\", justifyContent: \"center\" }}>\r\n                <div className=\"w-30\">\r\n                    <div style={{ display: \"flex\" }}>\r\n                        <label htmlFor=\"message\">Message</label>\r\n                    </div>\r\n                    <textarea\r\n                        id=\"message\"\r\n                        className=\"validate browser-default\"\r\n                        value={message}\r\n                        onChange={e => setMessage(e.target.value)}\r\n                    />\r\n                </div>\r\n            </div>\r\n\r\n            <div style={{ display: \"flex\", justifyContent: \"center\" }}>\r\n                <div className=\"w-30\">\r\n                    <div style={{ display: \"flex\" }}>\r\n                        <label htmlFor=\"name\">Your Name</label>\r\n                    </div>\r\n                    <input\r\n                        id=\"name\"\r\n                        type=\"text\"\r\n                        className=\"validate browser-default\"\r\n                        value={name}\r\n                        onChange={e => setName(e.target.value)}\r\n                    />\r\n                </div>\r\n            </div>\r\n\r\n            {checkAuth() ? (\r\n                <></>\r\n            ) : (\r\n                <div style={{ display: \"flex\", justifyContent: \"center\" }}>\r\n                    <div className=\"w-30\">\r\n                        <div style={{ display: \"flex\" }}>\r\n                            <label className=\" browser-default\" htmlFor=\"email\">\r\n                                Your Email\r\n                            </label>\r\n                        </div>\r\n                        <input\r\n                            id=\"email\"\r\n                            type=\"text\"\r\n                            className=\"validate browser-default\"\r\n                            value={email}\r\n                            onChange={e => setEmail(e.target.value)}\r\n                        />\r\n                    </div>\r\n                </div>\r\n            )}\r\n            <div\r\n                className=\"row\"\r\n                style={{ display: \"flex\", justifyContent: \"center\" }}\r\n            >\r\n                <button\r\n                    className=\"btn black\"\r\n                    style={{ width: \"25%\", marginTop: \"30px\" }}\r\n                    onClick={() => submitForm()}\r\n                >\r\n                    Submit\r\n                </button>\r\n            </div> */}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Contact;\r\n","import \"../css/spolicy.scss\";\r\n\r\nconst ShippingPolicy = () => {\r\n    return (\r\n        <>\r\n            <div\r\n                style={{\r\n                    display: \"flex\",\r\n                    justifyContent: \"center\",\r\n                }}\r\n            >\r\n                <h3\r\n                    style={{\r\n                        fontWeight: 550,\r\n                    }}\r\n                >\r\n                    Shipping Policy\r\n                </h3>\r\n            </div>\r\n            <div\r\n                style={{\r\n                    width: \"100%\",\r\n                    display: \"flex\",\r\n                    justifyContent: \"center\",\r\n                }}\r\n            >\r\n                <div\r\n                    style={{\r\n                        width: \"50%\",\r\n                        borderBottom: \" 4px solid #ff0000\",\r\n                    }}\r\n                ></div>\r\n            </div>\r\n            <div style={{ display: \"flex\", justifyContent: \"center\" }}>\r\n                <div className=\"divider\"></div>\r\n\r\n                <div className=\"spolicy-wrapper\">\r\n                    <blockquote style={{ borderLeft: \"5px solid black\" }}>\r\n                        <h3 style={{ fontWeight: 550 }}>Preorders</h3>\r\n                        <p className=\"flow-text\" style={{ marginLeft: \"32px\" }}>\r\n                            - Please allow 2-3 weeks for orders to be processed\r\n                            after pre-orders close.\r\n                        </p>\r\n                    </blockquote>\r\n                    <div className=\"divider\"></div>\r\n                    <blockquote style={{ borderLeft: \"5px solid black\" }}>\r\n                        <h3 style={{ fontWeight: 550 }}>\r\n                            Apparel or other specialty items\r\n                        </h3>\r\n                        <p className=\"flow-text\" style={{ marginLeft: \"32px\" }}>\r\n                            - Please allow for 3-4 weeks as they are specialty\r\n                            items\r\n                        </p>\r\n                    </blockquote>\r\n                    <div className=\"divider\"></div>\r\n                    <blockquote style={{ borderLeft: \"5px solid #ff0000\" }}>\r\n                        <h3 style={{ fontWeight: 550 }}>\r\n                            Lost or damaged items\r\n                        </h3>\r\n                        <p className=\"flow-text\" style={{ marginLeft: \"32px\" }}>\r\n                            - Please contact via instagram or email.\r\n                        </p>\r\n                    </blockquote>\r\n                </div>\r\n            </div>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default ShippingPolicy;\r\n","const OrderSuccess = () => {\r\n    return <div>Your ordered was SUCCessful</div>;\r\n};\r\n\r\nexport default OrderSuccess;\r\n","import { Redirect } from \"react-router\";\r\nimport {\r\n    useGetSectionsProductsQuery,\r\n    useGetSectionByIdQuery,\r\n} from \"../../generated/graphql\";\r\n\r\nconst GetSection = section_id => {\r\n    const { data, loading } = useGetSectionByIdQuery({\r\n        variables: {\r\n            section_id,\r\n        },\r\n    });\r\n\r\n    let sdata = data,\r\n        sloading = loading;\r\n    return { sdata, sloading };\r\n};\r\n\r\nconst ViewSection = () => {\r\n    let section_id = 0;\r\n\r\n    if (process.env.NODE_ENV === \"production\") {\r\n        section_id = Number(window.location.href.split(\":\")[2]);\r\n    } else {\r\n        section_id = Number(window.location.href.split(\":\")[3]);\r\n    }\r\n\r\n    const { sdata, sloading } = GetSection(section_id);\r\n    const { data, loading, error } = useGetSectionsProductsQuery({\r\n        variables: {\r\n            section_id,\r\n        },\r\n    });\r\n\r\n    if (loading || sloading) {\r\n        return <></>;\r\n    }\r\n\r\n    if (error || !data || !sdata) {\r\n        return <Redirect to=\"/products\" />;\r\n    }\r\n\r\n    return (\r\n        <div className=\"container\">\r\n            <h1\r\n                className=\"center-align\"\r\n                style={{\r\n                    marginTop: \"60px\",\r\n                    marginBottom: \"60px\",\r\n                    fontWeight: 600,\r\n                }}\r\n            >\r\n                {sdata.getSectionById.name}\r\n            </h1>\r\n\r\n            <div className=\"products-grid\">\r\n                {data.getSectionsProducts.map((_val, i) => {\r\n                    let product = data.getSectionsProducts[i];\r\n                    return (\r\n                        <>\r\n                            <div\r\n                                className=\"card z-depth-0\"\r\n                                style={{\r\n                                    margin: \"0px 8px 32px 8px\",\r\n                                }}\r\n                                key={i}\r\n                            >\r\n                                <a\r\n                                    className=\"black-text\"\r\n                                    href={`#/product-details:${product.product_id}`}\r\n                                >\r\n                                    <div className=\"container\">\r\n                                        <div className=\"card-image\">\r\n                                            <img\r\n                                                src={product.images![0].img_url}\r\n                                                alt={product.name}\r\n                                            />\r\n                                        </div>\r\n                                    </div>\r\n\r\n                                    <div className=\"card-content\">\r\n                                        <span className=\"card-title\">\r\n                                            <h5 className=\"center-align\">\r\n                                                {product.name}\r\n                                            </h5>\r\n                                        </span>\r\n                                        <span\r\n                                            style={{\r\n                                                display: \"flex\",\r\n                                                justifyContent: \"center\",\r\n                                            }}\r\n                                        >\r\n                                            <p\r\n                                                className=\"product-price\"\r\n                                                style={{ fontSize: \"16px\" }}\r\n                                            >\r\n                                                $\r\n                                                {Number(\r\n                                                    product.price / 100\r\n                                                ).toFixed(2)}\r\n                                            </p>\r\n                                        </span>\r\n                                    </div>\r\n                                </a>\r\n                            </div>\r\n                        </>\r\n                    );\r\n                })}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ViewSection;\r\n","import { Route, Redirect, Switch } from \"react-router-dom\";\r\nimport Products from \"../components/products/Products\";\r\nimport UsersOrders from \"../components/UsersOrders\";\r\nimport ProductDetails from \"../components/products/ProductDetails\";\r\nimport Cart from \"../components/checkout/Cart\";\r\nimport Checkout from \"../components/checkout/Checkout\";\r\nimport { Elements, ElementsConsumer } from \"@stripe/react-stripe-js\";\r\nimport { loadStripe } from \"@stripe/stripe-js\";\r\nimport FAQ from \"../components/FAQ\";\r\nimport Contact from \"../components/Contact\";\r\nimport ShippingPolicy from \"../components/ShippingPolicy\";\r\nimport OrderSuccess from \"../components/OrderSuccess\";\r\nimport ViewSection from \"../components/Sections/ViewSection\";\r\n\r\nexport const Routes = () => {\r\n    const stripePromise = loadStripe(\r\n        \"pk_test_51IM63dFngR9vHhwSep5ZkKLLach7ZP7BXFkDjSgo6FmQRdy8DOkV96RdHREb1L4vMgQ1fK6FlNfwDdlFX8zKdf1D00wHpHGbCC\"\r\n    );\r\n\r\n    return (\r\n        <Switch>\r\n            <Route exact path=\"/products\" render={() => <Products />} />\r\n            <Route\r\n                exact\r\n                path=\"/product-details:id\"\r\n                render={() => <ProductDetails />}\r\n            />\r\n            <Route exact path=\"/my-orders\" render={() => <UsersOrders />} />\r\n            <Route exact path=\"/my-cart\" render={() => <Cart />} />\r\n            <Route\r\n                exact\r\n                path=\"/checkout\"\r\n                render={() => (\r\n                    <Elements stripe={stripePromise}>\r\n                        <ElementsConsumer>\r\n                            {({ stripe, elements }) => (\r\n                                <Checkout stripe={stripe} elements={elements} />\r\n                            )}\r\n                        </ElementsConsumer>\r\n                    </Elements>\r\n                )}\r\n            />\r\n            <Route exact path=\"order-success\" render={() => <OrderSuccess />} />\r\n            <Route\r\n                exact\r\n                path=\"/shipping_policy\"\r\n                render={() => <ShippingPolicy />}\r\n            />\r\n            <Route exact path=\"/FAQ\" render={() => <FAQ />} />\r\n            <Route exact path=\"/contact\" render={() => <Contact />} />\r\n            <Route\r\n                exact\r\n                path=\"/view-section:id\"\r\n                render={() => <ViewSection />}\r\n            />\r\n            <Route render={() => <Redirect to=\"/products\" />} />\r\n        </Switch>\r\n    );\r\n};\r\n","import Navbar from \"./components/navbar/Navbar\";\r\nimport Footer from \"./components/footer/Footer\";\r\nimport { Routes } from \"./routes/Routes\";\r\nimport { HashRouter as Router } from \"react-router-dom\";\r\nimport \"./css/app.scss\";\r\nimport { useEffect } from \"react\";\r\n\r\nfunction App() {\r\n    useEffect(() => {\r\n        var elems = document.querySelectorAll(\".tooltipped\");\r\n        M.Tooltip.init(elems);\r\n        elems = document.querySelectorAll(\".carousel\");\r\n        M.Carousel.init(elems);\r\n\r\n        elems = document.querySelectorAll(\".dropdown-trigger\");\r\n        M.Dropdown.init(elems);\r\n    });\r\n    return (\r\n        <Router>\r\n            <div className=\"App\">\r\n                <div style={{ height: \"100%\", width: \"100%\" }}>\r\n                    <Navbar />\r\n                    <div className=\"contentWrapper\">\r\n                        <Routes />\r\n                    </div>\r\n                    <Footer />\r\n                </div>\r\n            </div>\r\n        </Router>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","import \"../css/Preloader.scss\";\r\nimport anime from \"animejs/lib/anime.es.js\";\r\nimport { useGetMaintenanceQuery } from \"../generated/graphql\";\r\n\r\n// const animation2 = () => {\r\n//     anime.timeline({ easing: \"easeInOutSine\", duration: 500 }).add({});\r\n// };\r\n\r\nconst reloadAnimation = () => {\r\n    anime({\r\n        targets: [\".reload-text\"],\r\n        opacity: [0, 0.75],\r\n        easing: \"easeInQuint\",\r\n        duration: 1000,\r\n        delay: (_el, i) => 15 * (i + 1),\r\n    });\r\n};\r\n\r\nconst Preloader = () => {\r\n    const { data, loading } = useGetMaintenanceQuery();\r\n\r\n    setTimeout(() => {\r\n        reloadAnimation();\r\n    }, 5000);\r\n\r\n    anime\r\n        .timeline({\r\n            easing: \"easeInOutSine\",\r\n            duration: 500,\r\n            elasticity: 400,\r\n            loop: true,\r\n        })\r\n        .add({\r\n            targets: [\".circle-1\", \".circle-3\"],\r\n            translateY: -24,\r\n        })\r\n        .add(\r\n            {\r\n                targets: [\".circle-2\", \".circle-4\"],\r\n                translateY: 24,\r\n            },\r\n            0\r\n        )\r\n        .add({\r\n            targets: [\".circle-1\", \".circle-3\"],\r\n            translateX: 40,\r\n        })\r\n        .add(\r\n            {\r\n                targets: [\".circle-2\", \".circle-4\"],\r\n                translateX: -40,\r\n            },\r\n            \"-= 500\"\r\n        )\r\n        .add({\r\n            targets: [\".circle-1\", \".circle-3\"],\r\n            translateY: 0,\r\n        })\r\n        .add(\r\n            {\r\n                targets: [\".circle-2\", \".circle-4\"],\r\n                translateY: 0,\r\n            },\r\n            \"-= 500\"\r\n        )\r\n\r\n        .add({\r\n            targets: [\".circle-2\", \".circle-4\"],\r\n            translateY: -24,\r\n        })\r\n        .add(\r\n            {\r\n                targets: [\".circle-1\", \".circle-3\"],\r\n                translateY: 24,\r\n            },\r\n            \"-= 500\"\r\n        )\r\n        .add({\r\n            targets: [\".circle-2\", \".circle-4\"],\r\n            translateX: 0,\r\n        })\r\n        .add(\r\n            {\r\n                targets: [\".circle-1\", \".circle-3\"],\r\n                translateX: 0,\r\n            },\r\n            \"-= 500\"\r\n        )\r\n        .add({\r\n            targets: [\".circle-2\", \".circle-4\"],\r\n            translateY: 0,\r\n        })\r\n        .add(\r\n            {\r\n                targets: [\".circle-1\", \".circle-3\"],\r\n                translateY: 0,\r\n            },\r\n            \"-= 500\"\r\n        );\r\n\r\n    return (\r\n        <div className=\"loadingWrapper\">\r\n            <div className=\"absolute-center\">\r\n                <div className=\"loader\">\r\n                    <div className=\"circle circle-1\"></div>\r\n                    <div className=\"circle circle-2\"></div>\r\n                    <div className=\"circle circle-3\"></div>\r\n                    <div className=\"circle circle-4\"></div>\r\n                </div>\r\n            </div>\r\n            <div className=\"reload-warning\">\r\n                <h4\r\n                    className=\"reload-text\"\r\n                    onClick={() => window.location.reload()}\r\n                >\r\n                    {!data || !data.getMaintenance || loading ? (\r\n                        <>Loading, please wait...</>\r\n                    ) : (\r\n                        <>App is in maintenance mode, please come back later.</>\r\n                    )}\r\n                </h4>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Preloader;\r\n","let URI = \"\";\r\n\r\nif (process.env.NODE_ENV === \"production\") {\r\n    URI = \"https://shrouded-plains-70355.herokuapp.com\";\r\n} else {\r\n    URI = \"http://localhost:4000\";\r\n}\r\n\r\nexport default URI;\r\n","import { useEffect, useState } from \"react\";\r\nimport { setAccessToken } from \"./accessToken\";\r\nimport App from \"./App\";\r\nimport Preloader from \"./components/Preloader\";\r\nimport { GetMaintenance } from \"./GetMaintenance\";\r\nimport URI from \"./URI\";\r\n\r\nconst AppWrapper = () => {\r\n    const maintance = GetMaintenance();\r\n    const [pageLoader, setPageLoader] = useState(true);\r\n\r\n    useEffect(() => {\r\n        //get new accessToken & refreshToken with fetch to URI/refresh_token\r\n        try {\r\n            let tmp = localStorage.getItem(\"iru5\") as string;\r\n            fetch(`${URI}/refresh_token`, {\r\n                method: \"POST\",\r\n                credentials: \"include\",\r\n                headers: {\r\n                    refreshToken: tmp,\r\n                },\r\n            }).then(async res => {\r\n                const { accessToken, refreshToken } = await res.json();\r\n                setAccessToken(accessToken);\r\n                localStorage.setItem(\"iru5\", refreshToken);\r\n                setPageLoader(false);\r\n            });\r\n        } catch {\r\n            setPageLoader(false);\r\n        }\r\n\r\n        try {\r\n            // let tmp = localStorage.getItem(\"main_qwf\") as string;\r\n            // fetch(`${URI}/maintenance_login`, {\r\n            //     method: \"POST\",\r\n            //     credentials: \"include\",\r\n            //     headers: {\r\n            //         refreshToken: tmp,\r\n            //     },\r\n            // }).then(async res => {\r\n            //     const { accessToken, refreshToken } = await res.json();\r\n            //     setMainAccessToken(accessToken);\r\n            //     localStorage.setItem(\"main_qwf\", refreshToken);\r\n            //     setMainLoader(false);\r\n            // });\r\n        } catch {}\r\n    }, [setPageLoader]);\r\n\r\n    if (pageLoader || !maintance || maintance.getMaintenance) {\r\n        return <Preloader />;\r\n    } else {\r\n        return <App />;\r\n    }\r\n};\r\n\r\nexport default AppWrapper;\r\n","import { useGetMaintenanceQuery } from \"./generated/graphql\";\r\n\r\nexport const GetMaintenance = () => {\r\n    const { data, loading } = useGetMaintenanceQuery();\r\n\r\n    if (!loading && !!data) {\r\n        let maintenance = data;\r\n        return maintenance;\r\n    }\r\n};\r\n","export interface Product {\r\n    product_id: number;\r\n    name: string;\r\n    price: number;\r\n    stock: number;\r\n    option?: string;\r\n    option_id?: number;\r\n}\r\n\r\nexport interface ProductInCart {\r\n    product_id: number;\r\n    name: string;\r\n    price: number;\r\n    stock: number;\r\n    quantity: number;\r\n    option?: string;\r\n    option_id?: number;\r\n}\r\n\r\nexport interface State {\r\n    productsInCart: [\r\n        {\r\n            product_id: number;\r\n            name: string;\r\n            price: number;\r\n            stock: number;\r\n            quantity: number;\r\n            option?: string;\r\n            option_id?: number;\r\n        }\r\n    ];\r\n}\r\n\r\nconst loadState = () => {\r\n    try {\r\n        let serializedState = localStorage.getItem(\"store-state\");\r\n        if (serializedState) {\r\n            let state = JSON.parse(serializedState);\r\n            console.log(\"state :>> \", state);\r\n            return state;\r\n        }\r\n    } catch (err) {\r\n        console.log(\"err :>> \", err);\r\n    }\r\n};\r\n\r\nconst initState = loadState() || {\r\n    productsInCart: [],\r\n};\r\n\r\ntype Actions = {\r\n    type: string;\r\n    product?: Product;\r\n    newQuantity?: number;\r\n    productIndex?: number;\r\n};\r\n\r\nexport const RootReducer = (state = initState, action: Actions) => {\r\n    switch (action.type) {\r\n        case \"ADD_PRODUCT_TO_CART\": {\r\n            debugger;\r\n            let products = loadState().productsInCart || [];\r\n            console.log(\"products :>> \", products);\r\n            console.log(\"action :>> \", action);\r\n\r\n            //if product is already in cart increase quantity instead of adding a new product\r\n            for (let i = 0; i < products.length; i++) {\r\n                if (products[i].product_id === action.product!.product_id) {\r\n                    //if product does not have an option\r\n                    if (!!action.product && !action.product.option) {\r\n                        products[i].quantity++;\r\n                        return { ...state, productsInCart: products };\r\n                    } else if (\r\n                        products[i].option_id === action.product!.option_id\r\n                    ) {\r\n                        products[i].quantity++;\r\n                        return { ...state, productsInCart: products };\r\n                    }\r\n                }\r\n            }\r\n\r\n            let newProduct: any = action.product;\r\n            newProduct.quantity = 1;\r\n\r\n            products.push(newProduct);\r\n            return { ...state, productsInCart: products };\r\n        }\r\n\r\n        case \"CHANGE_QUANTITY_ON_PRODUCT\": {\r\n            let productsInCart = state.productsInCart;\r\n            if (action.newQuantity === 0) {\r\n                //remove product if quantity is 0\r\n                productsInCart.splice(action.productIndex!, 1);\r\n            } else {\r\n                productsInCart[\r\n                    action.productIndex!\r\n                ].quantity = action.newQuantity!;\r\n            }\r\n            return { ...state, productsInCart };\r\n        }\r\n\r\n        case \"RESET_CART\": {\r\n            // delete localStorage items\r\n            localStorage.setItem(\"store-state\", \" \");\r\n            // dump state\r\n            return {};\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n","import { createStore } from \"redux\";\r\nimport { RootReducer } from \"./RootReducer\";\r\nimport { composeWithDevTools } from \"redux-devtools-extension\";\r\n\r\nconst saveState = state => {\r\n    try {\r\n        let serializedState = JSON.stringify(state);\r\n        localStorage.setItem(\"store-state\", serializedState);\r\n    } catch (err) {\r\n        console.log(\"err :>> \", err);\r\n    }\r\n};\r\n\r\nexport const store = createStore(RootReducer as any, composeWithDevTools());\r\n\r\nstore.subscribe(() => {\r\n    saveState(store.getState());\r\n});\r\n","import ReactDOM from \"react-dom\";\nimport AppWrapper from \"./AppWrapper\";\nimport ApolloClient from \"apollo-client\";\nimport { InMemoryCache } from \"apollo-cache-inmemory\";\nimport jwtDecode from \"jwt-decode\";\nimport { ApolloProvider } from \"@apollo/client\";\nimport { ApolloLink, Observable } from \"apollo-link\";\nimport { HttpLink } from \"apollo-link-http\";\nimport { onError } from \"apollo-link-error\";\nimport { TokenRefreshLink } from \"apollo-link-token-refresh\";\nimport { getAccessToken, setAccessToken } from \"./accessToken\";\nimport URI from \"./URI\";\nimport { Provider } from \"react-redux\";\nimport { store } from \"./redux/ReduxStore\";\n\nconst cache = new InMemoryCache({});\nconst requestLink = new ApolloLink(\n    (operation, forward) =>\n        new Observable(observer => {\n            let handle: any;\n            Promise.resolve(operation)\n                .then(operation => {\n                    const accessToken = getAccessToken();\n                    operation.setContext({\n                        headers: {\n                            authorization: accessToken\n                                ? `bearer ${accessToken}`\n                                : \"\",\n                        },\n                    });\n                })\n                .then(() => {\n                    handle = forward(operation).subscribe({\n                        next: observer.next.bind(observer),\n                        error: observer.error.bind(observer),\n                        complete: observer.complete.bind(observer),\n                    });\n                })\n                .catch(observer.error.bind(observer));\n\n            return () => {\n                if (handle) handle.unsubscribe();\n            };\n        })\n);\n\nconst client = new ApolloClient({\n    link: ApolloLink.from([\n        new TokenRefreshLink({\n            accessTokenField: \"accessToken\",\n            isTokenValidOrUndefined: () => {\n                const token = getAccessToken();\n\n                if (!token) {\n                    return true;\n                }\n\n                try {\n                    const { exp } = jwtDecode(token) as any;\n                    if (Date.now() >= exp * 1000) {\n                        return false;\n                    } else {\n                        return true;\n                    }\n                } catch {\n                    return false;\n                }\n            },\n            fetchAccessToken: () => {\n                return fetch(`${URI}/refresh_token`, {\n                    method: \"POST\",\n                    credentials: \"include\",\n                });\n            },\n            handleFetch: (accessToken: string) => {\n                setAccessToken(accessToken);\n            },\n            handleError: (err: any) => {\n                console.warn(\"Your refresh token is invalid. Try to relogin\");\n                console.error(err);\n            },\n        }) as any,\n        onError(({ graphQLErrors, networkError }) => {\n            console.log(graphQLErrors);\n            console.log(networkError);\n        }),\n        requestLink,\n        new HttpLink({\n            uri: `${URI}/graphql`,\n            credentials: \"include\",\n        }),\n    ]),\n    cache,\n});\n\nReactDOM.render(\n    <ApolloProvider client={client as any}>\n        <Provider store={store}>\n            <AppWrapper />\n        </Provider>\n    </ApolloProvider>,\n    document.getElementById(\"root\")\n);\n"],"sourceRoot":""}