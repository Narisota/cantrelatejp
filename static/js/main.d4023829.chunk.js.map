{"version":3,"sources":["accessToken.ts","CheckAuth.ts","generated/graphql.tsx","components/navbar/AnnouncementBar.tsx","components/navbar/Logo.tsx","components/navbar/Navbar.tsx","components/footer/CopyrightBar.tsx","components/footer/Footer.tsx","components/products/Products.tsx","components/UsersOrders.tsx","Sorting.ts","redux/actions/userAction.ts","components/products/ProductDetails.tsx","components/checkout/Cart.tsx","components/checkout/Paid.tsx","components/checkout/Checkout.tsx","components/FAQ.tsx","components/Contact.tsx","components/ShippingPolicy.tsx","components/OrderSuccess.tsx","components/Sections/ViewSection.tsx","routes/Routes.tsx","App.tsx","components/Preloader.tsx","URI.ts","AppWrapper.tsx","GetMaintenance.ts","redux/RootReducer.tsx","redux/ReduxStore.tsx","index.tsx"],"names":["accessToken","setAccessToken","s","getAccessToken","checkAuth","token","exp","jwtDecode","Date","now","AddPaypalOrderDocument","gql","CheckoutDocument","GetAnnouncementsDocument","GetCurrUserDocument","GetMaintenanceDocument","useGetMaintenanceQuery","baseOptions","Apollo","GetProductDocument","GetProductsDocument","GetProductsByIdsDocument","GetProductsOptionsDocument","GetSectionByIdDocument","GetSectionsDocument","GetSectionsProductsDocument","GetShippingCostDocument","GetSocialsDocument","useGetSocialsQuery","GetUsersOrdersDocument","LoginDocument","PaypalCheckoutDocument","ValidateCouponDocument","AnnouncementBar","variables","component","sdata","data","sloading","loading","GetSocials","error","useEffect","document","getElementById","i","getAnnouncements","length","textWrapper","innerHTML","textContent","replace","tl","anime","timeline","loop","loopBegin","style","display","loopComplete","add","targets","translateY","translateZ","opacity","easing","duration","delay","el","translateX","width","backgroundColor","color","zIndex","position","className","justifyContent","id","map","_val","text","getSocials","href","social_url","height","marginRight","social_logo","marginLeft","SocialIcon","Logo","Navbar","elems","querySelectorAll","M","Sidenav","init","login","handler","res","a","user_id","googleId","email","profileObj","response","localStorage","setItem","refreshToken","window","location","reload","signIn","useGoogleLogin","clientId","onSuccess","logout","top","data-target","left","transform","onClick","paddingTop","textAlign","CopyrightBar","border","marginTop","marginBottom","fontSize","fontWeight","Footer","GetSections","Products","classList","remove","_t","value","scale","stagger","start","getSections","section","margin","section_id","src","thumbnail","alt","name","getProducts","product","product_id","images","img_url","Number","price","toFixed","showDetails","tmp","contains","products","Subtotal","sTotal","productSubtotal","quantityOrdered","productsSubtotal","shippingTotal","calcSubtotals","UsersOrders","useLocation","sortByProp","arr","prop","invert","props","forEach","sort","reverse","j","slice","pop","state","sortedOrders","getUsersOrders","minHeight","str","dateOfPurchase","amountOff","order_total","discount","date_of_purchase","split","shipping","JSON","parse","padding","borderLeft","paddingBottom","paddingRight","paddingLeft","order_id","coupon","line1","city","postal_code","country","flexDirection","tracking_num","borderBottom","addProductToCart","type","changeQuantityOnProduct","newQuantity","productIndex","GetProductOptions","odata","oloading","ProductDetails","dispatch","useDispatch","useState","option_id","option_price","option_stock","option","setOption","Tooltip","Carousel","Dropdown","percent","getProduct","org_stock","stock","to","getProductsOptions","maxHeight","getInstance","prev","next","maxWidth","desc","data-position","data-tooltip","toast","html","Cart","useSelector","productsInCart","product_ids","push","products_str","stringify","refresh","quantities","setState","total","setTotal","tmp_total","quantity","getProductsByIds","options","ii","minLength","maxLength","pattern","onBlur","e","target","splice","complete","onChange","match","foo","z","Paid","CardSection","iconStyle","hidePostalCode","base","iconColor","fontFamily","fontSmoothing","invalid","Checkout","sh_res","useGetShippingCostQuery","US_ORDER","useCheckoutMutation","checkout","useValidateCouponMutation","validateCoupon","usePaypalCheckoutMutation","paypalCheckout","useAddPaypalOrderMutation","addPaypalOrder","discountPH","setDiscountPH","setCoupon","subtotal","setSubtotal","Total","setShipping","address","zip","billing","setBilling","paidFor","setPaidFor","err","setError","SET_US_ORDER","setAddress","paypalRef","useRef","couponRef","current","Autocomplete","Alabama","Alaska","Arizona","Arkansas","California","Colorado","Connecticut","Delaware","Florida","Georgia","Hawaii","Idaho","Illinois","Indiana","Iowa","Kansas","Kentucky","Louisiana","Maine","Maryland","Massachusettes","Michigan","Minnesota","Mississippi","Missouri","Montana","Nebraska","Nevada","Ohio","Oklahoma","Oregon","Pennsylvania","Tennessee","Texas","Utah","Vermont","Virginia","Washington","Wisconsin","Wyoming","getShippingCost","win","children","paypal","Buttons","createOrder","actions","order","create","purchase_units","description","amount","currency_code","onApprove","_ppdata","capture","purchaseUnits_str","getCurrUser","payee","email_address","onError","console","log","render","handleSubmit","payBtn","stripe","elements","card","getElement","CardElement","createToken","result","message","token_str","shipping_str","billing_str","shipping_info","billing_info","tmp_subtotal","tax","Math","round","focusable","viewBox","d","fillRule","letterSpacing","toLowerCase","htmlFor","data-error","coupon_name","attributes","nodeValue","percentage","ref","borderRadius","tmp_email","validateForm","FAQ","eyeColors","eyeColor","floor","random","Contact","ShippingPolicy","OrderSuccess","GetSection","ViewSection","getSectionById","getSectionsProducts","Routes","stripePromise","loadStripe","exact","path","App","Preloader","setTimeout","_el","elasticity","getMaintenance","URI","AppWrapper","maintance","GetMaintenance","pageLoader","setPageLoader","getItem","fetch","method","credentials","headers","then","json","loadState","serializedState","initState","store","createStore","action","newProduct","composeWithDevTools","subscribe","saveState","getState","cache","InMemoryCache","requestLink","ApolloLink","operation","forward","Observable","observer","handle","Promise","resolve","setContext","authorization","bind","catch","unsubscribe","client","ApolloClient","link","from","TokenRefreshLink","accessTokenField","isTokenValidOrUndefined","fetchAccessToken","handleFetch","handleError","warn","graphQLErrors","networkError","HttpLink","uri","ReactDOM"],"mappings":"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","file":"static/js/main.d4023829.chunk.js","sourcesContent":["export let accessToken = \"\";\r\n\r\nexport const setAccessToken = (s: string) => {\r\n    accessToken = s;\r\n};\r\n\r\nexport const getAccessToken = () => {\r\n    return accessToken;\r\n};\r\n\r\nexport const setMainAccessToken = (s: string) => {\r\n    accessToken = s;\r\n};\r\n\r\nexport const getMainAccessToken = () => {\r\n    return accessToken;\r\n};\r\n","import { getAccessToken, getMainAccessToken } from \"./accessToken\";\r\nimport jwtDecode from \"jwt-decode\";\r\n\r\nexport const checkAuth = () => {\r\n    const token = getAccessToken();\r\n    if (!token) {\r\n        return false;\r\n    }\r\n    try {\r\n        const { exp } = jwtDecode(token) as any;\r\n        if (Date.now() >= exp * 1000) {\r\n            return false;\r\n        } else {\r\n            return true;\r\n        }\r\n    } catch {\r\n        return false;\r\n    }\r\n};\r\n\r\nexport const checkMainAuth = () => {\r\n    const token = getMainAccessToken();\r\n    if (!token) {\r\n        return false;\r\n    }\r\n    try {\r\n        const { exp } = jwtDecode(token) as any;\r\n        if (Date.now() >= exp * 1000) {\r\n            return false;\r\n        } else {\r\n            return true;\r\n        }\r\n    } catch {\r\n        return false;\r\n    }\r\n};\r\n\r\nexport default checkAuth();\r\n","import { gql } from '@apollo/client';\nimport * as Apollo from '@apollo/client';\nexport type Maybe<T> = T | null;\nexport type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };\nexport type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };\nexport type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };\n/** All built-in and custom scalars, mapped to their actual values */\nexport type Scalars = {\n  ID: string;\n  String: string;\n  Boolean: boolean;\n  Int: number;\n  Float: number;\n};\n\nexport type Query = {\n  __typename?: 'Query';\n  getShippingCost: Scalars['String'];\n  getUsersOrders: Array<GetOrdersResponse>;\n  getOrders: Array<GetOrdersResponse>;\n  getOrderById: GetOrdersResponse;\n  getProducts: Array<ProductsWithImages>;\n  getProductsByIds: Array<ProductsWithOptionAndImages>;\n  apiGetProducts: Array<ProductsWithImages>;\n  getProduct: ProductsWithImages;\n  apiGetProduct: ProductsWithImages;\n  getApiUsers: Array<ApiUser>;\n  getCurrUser: Users;\n  getCoupons: Array<Coupons>;\n  getAnnouncements: Array<Announcements>;\n  getMaintenance: Scalars['Boolean'];\n  getSocials: Array<Socials>;\n  getSections: Array<Sections>;\n  getSectionById: Sections;\n  getProductsSections: Array<SectionsOrNull>;\n  getSectionsProducts: Array<ProductsWithImages>;\n  getProductsOptions: Array<Options>;\n  getProductShipping: Array<Shipping>;\n};\n\n\nexport type QueryGetShippingCostArgs = {\n  products: Scalars['String'];\n  US_ORDER: Scalars['Boolean'];\n};\n\n\nexport type QueryGetOrderByIdArgs = {\n  order_id: Scalars['Float'];\n};\n\n\nexport type QueryGetProductsByIdsArgs = {\n  products_str: Scalars['String'];\n};\n\n\nexport type QueryGetProductArgs = {\n  product_id: Scalars['Float'];\n};\n\n\nexport type QueryApiGetProductArgs = {\n  product_id: Scalars['Float'];\n};\n\n\nexport type QueryGetSocialsArgs = {\n  component: Scalars['String'];\n};\n\n\nexport type QueryGetSectionByIdArgs = {\n  section_id: Scalars['Float'];\n};\n\n\nexport type QueryGetProductsSectionsArgs = {\n  product_id: Scalars['Float'];\n};\n\n\nexport type QueryGetSectionsProductsArgs = {\n  section_id: Scalars['Float'];\n};\n\n\nexport type QueryGetProductsOptionsArgs = {\n  product_id: Scalars['Float'];\n};\n\n\nexport type QueryGetProductShippingArgs = {\n  product_id: Scalars['Float'];\n};\n\nexport type GetOrdersResponse = {\n  __typename?: 'GetOrdersResponse';\n  products?: Maybe<Array<OrdersProductsWithImages>>;\n  order_id: Scalars['Float'];\n  tracking_num?: Maybe<Scalars['String']>;\n  order_total?: Maybe<Scalars['Float']>;\n  coupon?: Maybe<Scalars['String']>;\n  discount?: Maybe<Scalars['String']>;\n  shipping?: Maybe<Scalars['String']>;\n  warning?: Maybe<Scalars['String']>;\n  date_of_purchase?: Maybe<Scalars['String']>;\n};\n\nexport type OrdersProductsWithImages = {\n  __typename?: 'OrdersProductsWithImages';\n  product_id: Scalars['Int'];\n  name: Scalars['String'];\n  desc: Scalars['String'];\n  price: Scalars['Int'];\n  stock: Scalars['Int'];\n  org_stock?: Maybe<Scalars['Int']>;\n  exp_date?: Maybe<Scalars['String']>;\n  quantityOrdered: Scalars['Float'];\n  productSubtotal?: Maybe<Scalars['Float']>;\n  images?: Maybe<Array<Images>>;\n};\n\nexport type Images = {\n  __typename?: 'Images';\n  img_id: Scalars['Float'];\n  img_url: Scalars['String'];\n  index: Scalars['Float'];\n};\n\nexport type ProductsWithImages = {\n  __typename?: 'ProductsWithImages';\n  product_id: Scalars['Int'];\n  name: Scalars['String'];\n  desc: Scalars['String'];\n  price: Scalars['Int'];\n  stock: Scalars['Int'];\n  org_stock?: Maybe<Scalars['Int']>;\n  exp_date?: Maybe<Scalars['String']>;\n  images?: Maybe<Array<Images>>;\n  hidden: Scalars['Boolean'];\n};\n\nexport type ProductsWithOptionAndImages = {\n  __typename?: 'ProductsWithOptionAndImages';\n  product_id: Scalars['Int'];\n  name: Scalars['String'];\n  desc: Scalars['String'];\n  price: Scalars['Int'];\n  stock: Scalars['Int'];\n  org_stock?: Maybe<Scalars['Int']>;\n  exp_date?: Maybe<Scalars['String']>;\n  images?: Maybe<Array<Images>>;\n  options?: Maybe<Array<Options>>;\n};\n\nexport type Options = {\n  __typename?: 'Options';\n  option_id: Scalars['Int'];\n  name: Scalars['String'];\n  price: Scalars['Int'];\n  stock: Scalars['Int'];\n  index: Scalars['Int'];\n};\n\nexport type ApiUser = {\n  __typename?: 'ApiUser';\n  uuid: Scalars['Float'];\n  username: Scalars['String'];\n  password: Scalars['String'];\n};\n\nexport type Users = {\n  __typename?: 'Users';\n  uuid: Scalars['Float'];\n  user_id?: Maybe<Scalars['String']>;\n  email?: Maybe<Scalars['String']>;\n};\n\nexport type Coupons = {\n  __typename?: 'Coupons';\n  coupon_id: Scalars['String'];\n  coupon_name: Scalars['String'];\n  discount?: Maybe<Scalars['String']>;\n};\n\nexport type Announcements = {\n  __typename?: 'Announcements';\n  id: Scalars['String'];\n  text: Scalars['String'];\n};\n\nexport type Socials = {\n  __typename?: 'Socials';\n  id: Scalars['Int'];\n  index: Scalars['Int'];\n  component: Scalars['String'];\n  display: Scalars['Boolean'];\n  social_logo: Scalars['String'];\n  social_url: Scalars['String'];\n};\n\nexport type Sections = {\n  __typename?: 'Sections';\n  section_id: Scalars['Int'];\n  name: Scalars['String'];\n  thumbnail: Scalars['String'];\n};\n\nexport type SectionsOrNull = {\n  __typename?: 'SectionsOrNull';\n  section_id?: Maybe<Scalars['Int']>;\n  name?: Maybe<Scalars['String']>;\n  thumbnail?: Maybe<Scalars['String']>;\n};\n\nexport type Shipping = {\n  __typename?: 'Shipping';\n  shipping_id: Scalars['Int'];\n  country: Scalars['String'];\n  price: Scalars['Float'];\n};\n\nexport type Mutation = {\n  __typename?: 'Mutation';\n  editTracking: Scalars['Boolean'];\n  paypalCheckout: Scalars['String'];\n  addPaypalOrder: Scalars['String'];\n  checkout: Scalars['String'];\n  toggleProductDisplay: Scalars['Boolean'];\n  addProduct: Scalars['String'];\n  deleteProduct: Scalars['Boolean'];\n  updateProduct: Scalars['Boolean'];\n  addImgToProduct: Scalars['Boolean'];\n  removeImgFromProduct: Scalars['Boolean'];\n  apiLogin: AuthResponse;\n  deleteApiUser: Scalars['Boolean'];\n  addApiUser: Scalars['Boolean'];\n  removeWarning: Scalars['Boolean'];\n  login: AuthResponse;\n  addCoupon: Scalars['Boolean'];\n  deleteCoupon: Scalars['Boolean'];\n  validateCoupon: Scalars['String'];\n  addAnnouncement: Scalars['Boolean'];\n  deleteAnnouncement: Scalars['Boolean'];\n  toggleMaintenance: Scalars['Boolean'];\n  maintenanceLogin: AuthResponse;\n  updateSocialUrl: Scalars['Boolean'];\n  toggleSocialDisplay: Scalars['Boolean'];\n  initSocials: Scalars['Boolean'];\n  addSection: Scalars['Boolean'];\n  deleteSection: Scalars['Boolean'];\n  addProductToSection: Scalars['String'];\n  removeProductFromSection: Scalars['Boolean'];\n  updateSection: Scalars['Boolean'];\n  addOptionToProduct: Scalars['Boolean'];\n  updateOptions: Scalars['Boolean'];\n  deleteOptions: Scalars['Boolean'];\n  addShippingToProduct: Scalars['Boolean'];\n  deleteShippingFromProduct: Scalars['Boolean'];\n};\n\n\nexport type MutationEditTrackingArgs = {\n  order_id: Scalars['Float'];\n  new_tracking_num: Scalars['String'];\n};\n\n\nexport type MutationPaypalCheckoutArgs = {\n  US_ORDER: Scalars['Boolean'];\n  coupon: Scalars['String'];\n  products: Scalars['String'];\n};\n\n\nexport type MutationAddPaypalOrderArgs = {\n  US_ORDER: Scalars['Boolean'];\n  purchase_units: Scalars['String'];\n  products: Scalars['String'];\n  coupon: Scalars['String'];\n  user_id: Scalars['String'];\n};\n\n\nexport type MutationCheckoutArgs = {\n  coupon: Scalars['String'];\n  billing_info: Scalars['String'];\n  shipping_info: Scalars['String'];\n  products: Scalars['String'];\n  user_id: Scalars['String'];\n  token: Scalars['String'];\n};\n\n\nexport type MutationToggleProductDisplayArgs = {\n  product_id: Scalars['Float'];\n};\n\n\nexport type MutationAddProductArgs = {\n  stock: Scalars['Float'];\n  price: Scalars['Float'];\n  desc: Scalars['String'];\n  name: Scalars['String'];\n};\n\n\nexport type MutationDeleteProductArgs = {\n  product_id: Scalars['Float'];\n};\n\n\nexport type MutationUpdateProductArgs = {\n  stock: Scalars['Float'];\n  price: Scalars['Float'];\n  desc: Scalars['String'];\n  product_id: Scalars['Float'];\n  name: Scalars['String'];\n};\n\n\nexport type MutationAddImgToProductArgs = {\n  product_id: Scalars['Float'];\n  img_url: Scalars['String'];\n};\n\n\nexport type MutationRemoveImgFromProductArgs = {\n  img_id: Scalars['Float'];\n};\n\n\nexport type MutationApiLoginArgs = {\n  password: Scalars['String'];\n  username: Scalars['String'];\n};\n\n\nexport type MutationDeleteApiUserArgs = {\n  uuid: Scalars['Float'];\n};\n\n\nexport type MutationAddApiUserArgs = {\n  password: Scalars['String'];\n  username: Scalars['String'];\n};\n\n\nexport type MutationRemoveWarningArgs = {\n  order_id: Scalars['Float'];\n};\n\n\nexport type MutationLoginArgs = {\n  email: Scalars['String'];\n  user_id: Scalars['String'];\n};\n\n\nexport type MutationAddCouponArgs = {\n  discount: Scalars['String'];\n  coupon_name: Scalars['String'];\n};\n\n\nexport type MutationDeleteCouponArgs = {\n  coupon_name: Scalars['String'];\n};\n\n\nexport type MutationValidateCouponArgs = {\n  coupon_name: Scalars['String'];\n};\n\n\nexport type MutationAddAnnouncementArgs = {\n  text: Scalars['String'];\n};\n\n\nexport type MutationDeleteAnnouncementArgs = {\n  id: Scalars['String'];\n};\n\n\nexport type MutationMaintenanceLoginArgs = {\n  password: Scalars['String'];\n  access_id: Scalars['String'];\n};\n\n\nexport type MutationUpdateSocialUrlArgs = {\n  id: Scalars['Float'];\n  url: Scalars['String'];\n};\n\n\nexport type MutationToggleSocialDisplayArgs = {\n  id: Scalars['Float'];\n};\n\n\nexport type MutationAddSectionArgs = {\n  thumbnail: Scalars['String'];\n  name: Scalars['String'];\n};\n\n\nexport type MutationDeleteSectionArgs = {\n  section_id: Scalars['Float'];\n};\n\n\nexport type MutationAddProductToSectionArgs = {\n  section_id: Scalars['Float'];\n  product_id: Scalars['Float'];\n};\n\n\nexport type MutationRemoveProductFromSectionArgs = {\n  section_id: Scalars['Float'];\n  product_id: Scalars['Float'];\n};\n\n\nexport type MutationUpdateSectionArgs = {\n  section_id: Scalars['Float'];\n  thumbnail: Scalars['String'];\n  name: Scalars['String'];\n};\n\n\nexport type MutationAddOptionToProductArgs = {\n  product_id: Scalars['Float'];\n  options_str: Scalars['String'];\n};\n\n\nexport type MutationUpdateOptionsArgs = {\n  options_str: Scalars['String'];\n};\n\n\nexport type MutationDeleteOptionsArgs = {\n  options_str: Scalars['String'];\n};\n\n\nexport type MutationAddShippingToProductArgs = {\n  shipping_str: Scalars['String'];\n  product_id: Scalars['Float'];\n};\n\n\nexport type MutationDeleteShippingFromProductArgs = {\n  shipping_str: Scalars['String'];\n};\n\nexport type AuthResponse = {\n  __typename?: 'AuthResponse';\n  accessToken?: Maybe<Scalars['String']>;\n  refreshToken?: Maybe<Scalars['String']>;\n};\n\nexport type AddPaypalOrderMutationVariables = Exact<{\n  user_id: Scalars['String'];\n  coupon: Scalars['String'];\n  products: Scalars['String'];\n  US_ORDER: Scalars['Boolean'];\n  purchase_units: Scalars['String'];\n}>;\n\n\nexport type AddPaypalOrderMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'addPaypalOrder'>\n);\n\nexport type CheckoutMutationVariables = Exact<{\n  token: Scalars['String'];\n  user_id: Scalars['String'];\n  products: Scalars['String'];\n  shipping_info: Scalars['String'];\n  billing_info: Scalars['String'];\n  coupon: Scalars['String'];\n}>;\n\n\nexport type CheckoutMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'checkout'>\n);\n\nexport type GetAnnouncementsQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type GetAnnouncementsQuery = (\n  { __typename?: 'Query' }\n  & { getAnnouncements: Array<(\n    { __typename?: 'Announcements' }\n    & Pick<Announcements, 'id' | 'text'>\n  )> }\n);\n\nexport type GetCurrUserQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type GetCurrUserQuery = (\n  { __typename?: 'Query' }\n  & { getCurrUser: (\n    { __typename?: 'Users' }\n    & Pick<Users, 'email' | 'uuid' | 'user_id'>\n  ) }\n);\n\nexport type GetMaintenanceQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type GetMaintenanceQuery = (\n  { __typename?: 'Query' }\n  & Pick<Query, 'getMaintenance'>\n);\n\nexport type GetProductQueryVariables = Exact<{\n  product_id: Scalars['Float'];\n}>;\n\n\nexport type GetProductQuery = (\n  { __typename?: 'Query' }\n  & { getProduct: (\n    { __typename?: 'ProductsWithImages' }\n    & Pick<ProductsWithImages, 'product_id' | 'name' | 'desc' | 'price' | 'stock' | 'org_stock' | 'exp_date'>\n    & { images?: Maybe<Array<(\n      { __typename?: 'Images' }\n      & Pick<Images, 'img_id' | 'img_url'>\n    )>> }\n  ) }\n);\n\nexport type GetProductsQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type GetProductsQuery = (\n  { __typename?: 'Query' }\n  & { getProducts: Array<(\n    { __typename?: 'ProductsWithImages' }\n    & Pick<ProductsWithImages, 'product_id' | 'name' | 'desc' | 'price' | 'stock' | 'org_stock' | 'exp_date'>\n    & { images?: Maybe<Array<(\n      { __typename?: 'Images' }\n      & Pick<Images, 'img_id' | 'img_url'>\n    )>> }\n  )> }\n);\n\nexport type GetProductsByIdsQueryVariables = Exact<{\n  products_str: Scalars['String'];\n}>;\n\n\nexport type GetProductsByIdsQuery = (\n  { __typename?: 'Query' }\n  & { getProductsByIds: Array<(\n    { __typename?: 'ProductsWithOptionAndImages' }\n    & Pick<ProductsWithOptionAndImages, 'product_id' | 'name' | 'desc' | 'price' | 'stock' | 'org_stock' | 'exp_date'>\n    & { images?: Maybe<Array<(\n      { __typename?: 'Images' }\n      & Pick<Images, 'img_id' | 'img_url'>\n    )>>, options?: Maybe<Array<(\n      { __typename?: 'Options' }\n      & Pick<Options, 'option_id' | 'name' | 'price' | 'stock' | 'index'>\n    )>> }\n  )> }\n);\n\nexport type GetProductsOptionsQueryVariables = Exact<{\n  product_id: Scalars['Float'];\n}>;\n\n\nexport type GetProductsOptionsQuery = (\n  { __typename?: 'Query' }\n  & { getProductsOptions: Array<(\n    { __typename?: 'Options' }\n    & Pick<Options, 'option_id' | 'name' | 'price' | 'stock' | 'index'>\n  )> }\n);\n\nexport type GetSectionByIdQueryVariables = Exact<{\n  section_id: Scalars['Float'];\n}>;\n\n\nexport type GetSectionByIdQuery = (\n  { __typename?: 'Query' }\n  & { getSectionById: (\n    { __typename?: 'Sections' }\n    & Pick<Sections, 'section_id' | 'thumbnail' | 'name'>\n  ) }\n);\n\nexport type GetSectionsQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type GetSectionsQuery = (\n  { __typename?: 'Query' }\n  & { getSections: Array<(\n    { __typename?: 'Sections' }\n    & Pick<Sections, 'section_id' | 'name' | 'thumbnail'>\n  )> }\n);\n\nexport type GetSectionsProductsQueryVariables = Exact<{\n  section_id: Scalars['Float'];\n}>;\n\n\nexport type GetSectionsProductsQuery = (\n  { __typename?: 'Query' }\n  & { getSectionsProducts: Array<(\n    { __typename?: 'ProductsWithImages' }\n    & Pick<ProductsWithImages, 'product_id' | 'name' | 'desc' | 'price' | 'stock' | 'org_stock'>\n    & { images?: Maybe<Array<(\n      { __typename?: 'Images' }\n      & Pick<Images, 'img_id' | 'img_url' | 'index'>\n    )>> }\n  )> }\n);\n\nexport type GetShippingCostQueryVariables = Exact<{\n  US_ORDER: Scalars['Boolean'];\n  products: Scalars['String'];\n}>;\n\n\nexport type GetShippingCostQuery = (\n  { __typename?: 'Query' }\n  & Pick<Query, 'getShippingCost'>\n);\n\nexport type GetSocialsQueryVariables = Exact<{\n  component: Scalars['String'];\n}>;\n\n\nexport type GetSocialsQuery = (\n  { __typename?: 'Query' }\n  & { getSocials: Array<(\n    { __typename?: 'Socials' }\n    & Pick<Socials, 'id' | 'index' | 'social_url' | 'social_logo' | 'display'>\n  )> }\n);\n\nexport type GetUsersOrdersQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type GetUsersOrdersQuery = (\n  { __typename?: 'Query' }\n  & { getUsersOrders: Array<(\n    { __typename?: 'GetOrdersResponse' }\n    & Pick<GetOrdersResponse, 'order_id' | 'tracking_num' | 'order_total' | 'coupon' | 'discount' | 'shipping' | 'date_of_purchase'>\n    & { products?: Maybe<Array<(\n      { __typename?: 'OrdersProductsWithImages' }\n      & Pick<OrdersProductsWithImages, 'product_id' | 'name' | 'desc' | 'price' | 'stock' | 'exp_date' | 'quantityOrdered' | 'productSubtotal'>\n      & { images?: Maybe<Array<(\n        { __typename?: 'Images' }\n        & Pick<Images, 'img_id' | 'img_url' | 'index'>\n      )>> }\n    )>> }\n  )> }\n);\n\nexport type LoginMutationVariables = Exact<{\n  user_id: Scalars['String'];\n  email: Scalars['String'];\n}>;\n\n\nexport type LoginMutation = (\n  { __typename?: 'Mutation' }\n  & { login: (\n    { __typename?: 'AuthResponse' }\n    & Pick<AuthResponse, 'accessToken' | 'refreshToken'>\n  ) }\n);\n\nexport type MaintenanceLoginMutationVariables = Exact<{\n  access_id: Scalars['String'];\n  password: Scalars['String'];\n}>;\n\n\nexport type MaintenanceLoginMutation = (\n  { __typename?: 'Mutation' }\n  & { maintenanceLogin: (\n    { __typename?: 'AuthResponse' }\n    & Pick<AuthResponse, 'refreshToken' | 'accessToken'>\n  ) }\n);\n\nexport type PaypalCheckoutMutationVariables = Exact<{\n  products: Scalars['String'];\n  coupon: Scalars['String'];\n  US_ORDER: Scalars['Boolean'];\n}>;\n\n\nexport type PaypalCheckoutMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'paypalCheckout'>\n);\n\nexport type ValidateCouponMutationVariables = Exact<{\n  coupon_name: Scalars['String'];\n}>;\n\n\nexport type ValidateCouponMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'validateCoupon'>\n);\n\n\nexport const AddPaypalOrderDocument = gql`\n    mutation addPaypalOrder($user_id: String!, $coupon: String!, $products: String!, $US_ORDER: Boolean!, $purchase_units: String!) {\n  addPaypalOrder(\n    user_id: $user_id\n    coupon: $coupon\n    products: $products\n    purchase_units: $purchase_units\n    US_ORDER: $US_ORDER\n  )\n}\n    `;\nexport type AddPaypalOrderMutationFn = Apollo.MutationFunction<AddPaypalOrderMutation, AddPaypalOrderMutationVariables>;\n\n/**\n * __useAddPaypalOrderMutation__\n *\n * To run a mutation, you first call `useAddPaypalOrderMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useAddPaypalOrderMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [addPaypalOrderMutation, { data, loading, error }] = useAddPaypalOrderMutation({\n *   variables: {\n *      user_id: // value for 'user_id'\n *      coupon: // value for 'coupon'\n *      products: // value for 'products'\n *      US_ORDER: // value for 'US_ORDER'\n *      purchase_units: // value for 'purchase_units'\n *   },\n * });\n */\nexport function useAddPaypalOrderMutation(baseOptions?: Apollo.MutationHookOptions<AddPaypalOrderMutation, AddPaypalOrderMutationVariables>) {\n        return Apollo.useMutation<AddPaypalOrderMutation, AddPaypalOrderMutationVariables>(AddPaypalOrderDocument, baseOptions);\n      }\nexport type AddPaypalOrderMutationHookResult = ReturnType<typeof useAddPaypalOrderMutation>;\nexport type AddPaypalOrderMutationResult = Apollo.MutationResult<AddPaypalOrderMutation>;\nexport type AddPaypalOrderMutationOptions = Apollo.BaseMutationOptions<AddPaypalOrderMutation, AddPaypalOrderMutationVariables>;\nexport const CheckoutDocument = gql`\n    mutation checkout($token: String!, $user_id: String!, $products: String!, $shipping_info: String!, $billing_info: String!, $coupon: String!) {\n  checkout(\n    token: $token\n    user_id: $user_id\n    products: $products\n    shipping_info: $shipping_info\n    billing_info: $billing_info\n    coupon: $coupon\n  )\n}\n    `;\nexport type CheckoutMutationFn = Apollo.MutationFunction<CheckoutMutation, CheckoutMutationVariables>;\n\n/**\n * __useCheckoutMutation__\n *\n * To run a mutation, you first call `useCheckoutMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useCheckoutMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [checkoutMutation, { data, loading, error }] = useCheckoutMutation({\n *   variables: {\n *      token: // value for 'token'\n *      user_id: // value for 'user_id'\n *      products: // value for 'products'\n *      shipping_info: // value for 'shipping_info'\n *      billing_info: // value for 'billing_info'\n *      coupon: // value for 'coupon'\n *   },\n * });\n */\nexport function useCheckoutMutation(baseOptions?: Apollo.MutationHookOptions<CheckoutMutation, CheckoutMutationVariables>) {\n        return Apollo.useMutation<CheckoutMutation, CheckoutMutationVariables>(CheckoutDocument, baseOptions);\n      }\nexport type CheckoutMutationHookResult = ReturnType<typeof useCheckoutMutation>;\nexport type CheckoutMutationResult = Apollo.MutationResult<CheckoutMutation>;\nexport type CheckoutMutationOptions = Apollo.BaseMutationOptions<CheckoutMutation, CheckoutMutationVariables>;\nexport const GetAnnouncementsDocument = gql`\n    query getAnnouncements {\n  getAnnouncements {\n    id\n    text\n  }\n}\n    `;\n\n/**\n * __useGetAnnouncementsQuery__\n *\n * To run a query within a React component, call `useGetAnnouncementsQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetAnnouncementsQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetAnnouncementsQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useGetAnnouncementsQuery(baseOptions?: Apollo.QueryHookOptions<GetAnnouncementsQuery, GetAnnouncementsQueryVariables>) {\n        return Apollo.useQuery<GetAnnouncementsQuery, GetAnnouncementsQueryVariables>(GetAnnouncementsDocument, baseOptions);\n      }\nexport function useGetAnnouncementsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetAnnouncementsQuery, GetAnnouncementsQueryVariables>) {\n          return Apollo.useLazyQuery<GetAnnouncementsQuery, GetAnnouncementsQueryVariables>(GetAnnouncementsDocument, baseOptions);\n        }\nexport type GetAnnouncementsQueryHookResult = ReturnType<typeof useGetAnnouncementsQuery>;\nexport type GetAnnouncementsLazyQueryHookResult = ReturnType<typeof useGetAnnouncementsLazyQuery>;\nexport type GetAnnouncementsQueryResult = Apollo.QueryResult<GetAnnouncementsQuery, GetAnnouncementsQueryVariables>;\nexport const GetCurrUserDocument = gql`\n    query getCurrUser {\n  getCurrUser {\n    email\n    uuid\n    user_id\n  }\n}\n    `;\n\n/**\n * __useGetCurrUserQuery__\n *\n * To run a query within a React component, call `useGetCurrUserQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetCurrUserQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetCurrUserQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useGetCurrUserQuery(baseOptions?: Apollo.QueryHookOptions<GetCurrUserQuery, GetCurrUserQueryVariables>) {\n        return Apollo.useQuery<GetCurrUserQuery, GetCurrUserQueryVariables>(GetCurrUserDocument, baseOptions);\n      }\nexport function useGetCurrUserLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetCurrUserQuery, GetCurrUserQueryVariables>) {\n          return Apollo.useLazyQuery<GetCurrUserQuery, GetCurrUserQueryVariables>(GetCurrUserDocument, baseOptions);\n        }\nexport type GetCurrUserQueryHookResult = ReturnType<typeof useGetCurrUserQuery>;\nexport type GetCurrUserLazyQueryHookResult = ReturnType<typeof useGetCurrUserLazyQuery>;\nexport type GetCurrUserQueryResult = Apollo.QueryResult<GetCurrUserQuery, GetCurrUserQueryVariables>;\nexport const GetMaintenanceDocument = gql`\n    query getMaintenance {\n  getMaintenance\n}\n    `;\n\n/**\n * __useGetMaintenanceQuery__\n *\n * To run a query within a React component, call `useGetMaintenanceQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetMaintenanceQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetMaintenanceQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useGetMaintenanceQuery(baseOptions?: Apollo.QueryHookOptions<GetMaintenanceQuery, GetMaintenanceQueryVariables>) {\n        return Apollo.useQuery<GetMaintenanceQuery, GetMaintenanceQueryVariables>(GetMaintenanceDocument, baseOptions);\n      }\nexport function useGetMaintenanceLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetMaintenanceQuery, GetMaintenanceQueryVariables>) {\n          return Apollo.useLazyQuery<GetMaintenanceQuery, GetMaintenanceQueryVariables>(GetMaintenanceDocument, baseOptions);\n        }\nexport type GetMaintenanceQueryHookResult = ReturnType<typeof useGetMaintenanceQuery>;\nexport type GetMaintenanceLazyQueryHookResult = ReturnType<typeof useGetMaintenanceLazyQuery>;\nexport type GetMaintenanceQueryResult = Apollo.QueryResult<GetMaintenanceQuery, GetMaintenanceQueryVariables>;\nexport const GetProductDocument = gql`\n    query getProduct($product_id: Float!) {\n  getProduct(product_id: $product_id) {\n    product_id\n    name\n    desc\n    price\n    stock\n    org_stock\n    exp_date\n    images {\n      img_id\n      img_url\n    }\n  }\n}\n    `;\n\n/**\n * __useGetProductQuery__\n *\n * To run a query within a React component, call `useGetProductQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetProductQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetProductQuery({\n *   variables: {\n *      product_id: // value for 'product_id'\n *   },\n * });\n */\nexport function useGetProductQuery(baseOptions: Apollo.QueryHookOptions<GetProductQuery, GetProductQueryVariables>) {\n        return Apollo.useQuery<GetProductQuery, GetProductQueryVariables>(GetProductDocument, baseOptions);\n      }\nexport function useGetProductLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetProductQuery, GetProductQueryVariables>) {\n          return Apollo.useLazyQuery<GetProductQuery, GetProductQueryVariables>(GetProductDocument, baseOptions);\n        }\nexport type GetProductQueryHookResult = ReturnType<typeof useGetProductQuery>;\nexport type GetProductLazyQueryHookResult = ReturnType<typeof useGetProductLazyQuery>;\nexport type GetProductQueryResult = Apollo.QueryResult<GetProductQuery, GetProductQueryVariables>;\nexport const GetProductsDocument = gql`\n    query getProducts {\n  getProducts {\n    product_id\n    name\n    desc\n    price\n    stock\n    org_stock\n    exp_date\n    images {\n      img_id\n      img_url\n    }\n  }\n}\n    `;\n\n/**\n * __useGetProductsQuery__\n *\n * To run a query within a React component, call `useGetProductsQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetProductsQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetProductsQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useGetProductsQuery(baseOptions?: Apollo.QueryHookOptions<GetProductsQuery, GetProductsQueryVariables>) {\n        return Apollo.useQuery<GetProductsQuery, GetProductsQueryVariables>(GetProductsDocument, baseOptions);\n      }\nexport function useGetProductsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetProductsQuery, GetProductsQueryVariables>) {\n          return Apollo.useLazyQuery<GetProductsQuery, GetProductsQueryVariables>(GetProductsDocument, baseOptions);\n        }\nexport type GetProductsQueryHookResult = ReturnType<typeof useGetProductsQuery>;\nexport type GetProductsLazyQueryHookResult = ReturnType<typeof useGetProductsLazyQuery>;\nexport type GetProductsQueryResult = Apollo.QueryResult<GetProductsQuery, GetProductsQueryVariables>;\nexport const GetProductsByIdsDocument = gql`\n    query getProductsByIds($products_str: String!) {\n  getProductsByIds(products_str: $products_str) {\n    product_id\n    name\n    desc\n    price\n    stock\n    org_stock\n    exp_date\n    images {\n      img_id\n      img_url\n    }\n    options {\n      option_id\n      name\n      price\n      stock\n      index\n    }\n  }\n}\n    `;\n\n/**\n * __useGetProductsByIdsQuery__\n *\n * To run a query within a React component, call `useGetProductsByIdsQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetProductsByIdsQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetProductsByIdsQuery({\n *   variables: {\n *      products_str: // value for 'products_str'\n *   },\n * });\n */\nexport function useGetProductsByIdsQuery(baseOptions: Apollo.QueryHookOptions<GetProductsByIdsQuery, GetProductsByIdsQueryVariables>) {\n        return Apollo.useQuery<GetProductsByIdsQuery, GetProductsByIdsQueryVariables>(GetProductsByIdsDocument, baseOptions);\n      }\nexport function useGetProductsByIdsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetProductsByIdsQuery, GetProductsByIdsQueryVariables>) {\n          return Apollo.useLazyQuery<GetProductsByIdsQuery, GetProductsByIdsQueryVariables>(GetProductsByIdsDocument, baseOptions);\n        }\nexport type GetProductsByIdsQueryHookResult = ReturnType<typeof useGetProductsByIdsQuery>;\nexport type GetProductsByIdsLazyQueryHookResult = ReturnType<typeof useGetProductsByIdsLazyQuery>;\nexport type GetProductsByIdsQueryResult = Apollo.QueryResult<GetProductsByIdsQuery, GetProductsByIdsQueryVariables>;\nexport const GetProductsOptionsDocument = gql`\n    query getProductsOptions($product_id: Float!) {\n  getProductsOptions(product_id: $product_id) {\n    option_id\n    name\n    price\n    stock\n    index\n  }\n}\n    `;\n\n/**\n * __useGetProductsOptionsQuery__\n *\n * To run a query within a React component, call `useGetProductsOptionsQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetProductsOptionsQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetProductsOptionsQuery({\n *   variables: {\n *      product_id: // value for 'product_id'\n *   },\n * });\n */\nexport function useGetProductsOptionsQuery(baseOptions: Apollo.QueryHookOptions<GetProductsOptionsQuery, GetProductsOptionsQueryVariables>) {\n        return Apollo.useQuery<GetProductsOptionsQuery, GetProductsOptionsQueryVariables>(GetProductsOptionsDocument, baseOptions);\n      }\nexport function useGetProductsOptionsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetProductsOptionsQuery, GetProductsOptionsQueryVariables>) {\n          return Apollo.useLazyQuery<GetProductsOptionsQuery, GetProductsOptionsQueryVariables>(GetProductsOptionsDocument, baseOptions);\n        }\nexport type GetProductsOptionsQueryHookResult = ReturnType<typeof useGetProductsOptionsQuery>;\nexport type GetProductsOptionsLazyQueryHookResult = ReturnType<typeof useGetProductsOptionsLazyQuery>;\nexport type GetProductsOptionsQueryResult = Apollo.QueryResult<GetProductsOptionsQuery, GetProductsOptionsQueryVariables>;\nexport const GetSectionByIdDocument = gql`\n    query getSectionById($section_id: Float!) {\n  getSectionById(section_id: $section_id) {\n    section_id\n    thumbnail\n    name\n  }\n}\n    `;\n\n/**\n * __useGetSectionByIdQuery__\n *\n * To run a query within a React component, call `useGetSectionByIdQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetSectionByIdQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetSectionByIdQuery({\n *   variables: {\n *      section_id: // value for 'section_id'\n *   },\n * });\n */\nexport function useGetSectionByIdQuery(baseOptions: Apollo.QueryHookOptions<GetSectionByIdQuery, GetSectionByIdQueryVariables>) {\n        return Apollo.useQuery<GetSectionByIdQuery, GetSectionByIdQueryVariables>(GetSectionByIdDocument, baseOptions);\n      }\nexport function useGetSectionByIdLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetSectionByIdQuery, GetSectionByIdQueryVariables>) {\n          return Apollo.useLazyQuery<GetSectionByIdQuery, GetSectionByIdQueryVariables>(GetSectionByIdDocument, baseOptions);\n        }\nexport type GetSectionByIdQueryHookResult = ReturnType<typeof useGetSectionByIdQuery>;\nexport type GetSectionByIdLazyQueryHookResult = ReturnType<typeof useGetSectionByIdLazyQuery>;\nexport type GetSectionByIdQueryResult = Apollo.QueryResult<GetSectionByIdQuery, GetSectionByIdQueryVariables>;\nexport const GetSectionsDocument = gql`\n    query getSections {\n  getSections {\n    section_id\n    name\n    thumbnail\n  }\n}\n    `;\n\n/**\n * __useGetSectionsQuery__\n *\n * To run a query within a React component, call `useGetSectionsQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetSectionsQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetSectionsQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useGetSectionsQuery(baseOptions?: Apollo.QueryHookOptions<GetSectionsQuery, GetSectionsQueryVariables>) {\n        return Apollo.useQuery<GetSectionsQuery, GetSectionsQueryVariables>(GetSectionsDocument, baseOptions);\n      }\nexport function useGetSectionsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetSectionsQuery, GetSectionsQueryVariables>) {\n          return Apollo.useLazyQuery<GetSectionsQuery, GetSectionsQueryVariables>(GetSectionsDocument, baseOptions);\n        }\nexport type GetSectionsQueryHookResult = ReturnType<typeof useGetSectionsQuery>;\nexport type GetSectionsLazyQueryHookResult = ReturnType<typeof useGetSectionsLazyQuery>;\nexport type GetSectionsQueryResult = Apollo.QueryResult<GetSectionsQuery, GetSectionsQueryVariables>;\nexport const GetSectionsProductsDocument = gql`\n    query getSectionsProducts($section_id: Float!) {\n  getSectionsProducts(section_id: $section_id) {\n    product_id\n    name\n    desc\n    price\n    stock\n    org_stock\n    images {\n      img_id\n      img_url\n      index\n    }\n  }\n}\n    `;\n\n/**\n * __useGetSectionsProductsQuery__\n *\n * To run a query within a React component, call `useGetSectionsProductsQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetSectionsProductsQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetSectionsProductsQuery({\n *   variables: {\n *      section_id: // value for 'section_id'\n *   },\n * });\n */\nexport function useGetSectionsProductsQuery(baseOptions: Apollo.QueryHookOptions<GetSectionsProductsQuery, GetSectionsProductsQueryVariables>) {\n        return Apollo.useQuery<GetSectionsProductsQuery, GetSectionsProductsQueryVariables>(GetSectionsProductsDocument, baseOptions);\n      }\nexport function useGetSectionsProductsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetSectionsProductsQuery, GetSectionsProductsQueryVariables>) {\n          return Apollo.useLazyQuery<GetSectionsProductsQuery, GetSectionsProductsQueryVariables>(GetSectionsProductsDocument, baseOptions);\n        }\nexport type GetSectionsProductsQueryHookResult = ReturnType<typeof useGetSectionsProductsQuery>;\nexport type GetSectionsProductsLazyQueryHookResult = ReturnType<typeof useGetSectionsProductsLazyQuery>;\nexport type GetSectionsProductsQueryResult = Apollo.QueryResult<GetSectionsProductsQuery, GetSectionsProductsQueryVariables>;\nexport const GetShippingCostDocument = gql`\n    query getShippingCost($US_ORDER: Boolean!, $products: String!) {\n  getShippingCost(US_ORDER: $US_ORDER, products: $products)\n}\n    `;\n\n/**\n * __useGetShippingCostQuery__\n *\n * To run a query within a React component, call `useGetShippingCostQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetShippingCostQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetShippingCostQuery({\n *   variables: {\n *      US_ORDER: // value for 'US_ORDER'\n *      products: // value for 'products'\n *   },\n * });\n */\nexport function useGetShippingCostQuery(baseOptions: Apollo.QueryHookOptions<GetShippingCostQuery, GetShippingCostQueryVariables>) {\n        return Apollo.useQuery<GetShippingCostQuery, GetShippingCostQueryVariables>(GetShippingCostDocument, baseOptions);\n      }\nexport function useGetShippingCostLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetShippingCostQuery, GetShippingCostQueryVariables>) {\n          return Apollo.useLazyQuery<GetShippingCostQuery, GetShippingCostQueryVariables>(GetShippingCostDocument, baseOptions);\n        }\nexport type GetShippingCostQueryHookResult = ReturnType<typeof useGetShippingCostQuery>;\nexport type GetShippingCostLazyQueryHookResult = ReturnType<typeof useGetShippingCostLazyQuery>;\nexport type GetShippingCostQueryResult = Apollo.QueryResult<GetShippingCostQuery, GetShippingCostQueryVariables>;\nexport const GetSocialsDocument = gql`\n    query getSocials($component: String!) {\n  getSocials(component: $component) {\n    id\n    index\n    social_url\n    social_logo\n    display\n  }\n}\n    `;\n\n/**\n * __useGetSocialsQuery__\n *\n * To run a query within a React component, call `useGetSocialsQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetSocialsQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetSocialsQuery({\n *   variables: {\n *      component: // value for 'component'\n *   },\n * });\n */\nexport function useGetSocialsQuery(baseOptions: Apollo.QueryHookOptions<GetSocialsQuery, GetSocialsQueryVariables>) {\n        return Apollo.useQuery<GetSocialsQuery, GetSocialsQueryVariables>(GetSocialsDocument, baseOptions);\n      }\nexport function useGetSocialsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetSocialsQuery, GetSocialsQueryVariables>) {\n          return Apollo.useLazyQuery<GetSocialsQuery, GetSocialsQueryVariables>(GetSocialsDocument, baseOptions);\n        }\nexport type GetSocialsQueryHookResult = ReturnType<typeof useGetSocialsQuery>;\nexport type GetSocialsLazyQueryHookResult = ReturnType<typeof useGetSocialsLazyQuery>;\nexport type GetSocialsQueryResult = Apollo.QueryResult<GetSocialsQuery, GetSocialsQueryVariables>;\nexport const GetUsersOrdersDocument = gql`\n    query getUsersOrders {\n  getUsersOrders {\n    products {\n      product_id\n      name\n      desc\n      price\n      stock\n      exp_date\n      quantityOrdered\n      productSubtotal\n      images {\n        img_id\n        img_url\n        index\n      }\n    }\n    order_id\n    tracking_num\n    order_total\n    coupon\n    discount\n    shipping\n    date_of_purchase\n  }\n}\n    `;\n\n/**\n * __useGetUsersOrdersQuery__\n *\n * To run a query within a React component, call `useGetUsersOrdersQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetUsersOrdersQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetUsersOrdersQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useGetUsersOrdersQuery(baseOptions?: Apollo.QueryHookOptions<GetUsersOrdersQuery, GetUsersOrdersQueryVariables>) {\n        return Apollo.useQuery<GetUsersOrdersQuery, GetUsersOrdersQueryVariables>(GetUsersOrdersDocument, baseOptions);\n      }\nexport function useGetUsersOrdersLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetUsersOrdersQuery, GetUsersOrdersQueryVariables>) {\n          return Apollo.useLazyQuery<GetUsersOrdersQuery, GetUsersOrdersQueryVariables>(GetUsersOrdersDocument, baseOptions);\n        }\nexport type GetUsersOrdersQueryHookResult = ReturnType<typeof useGetUsersOrdersQuery>;\nexport type GetUsersOrdersLazyQueryHookResult = ReturnType<typeof useGetUsersOrdersLazyQuery>;\nexport type GetUsersOrdersQueryResult = Apollo.QueryResult<GetUsersOrdersQuery, GetUsersOrdersQueryVariables>;\nexport const LoginDocument = gql`\n    mutation login($user_id: String!, $email: String!) {\n  login(user_id: $user_id, email: $email) {\n    accessToken\n    refreshToken\n  }\n}\n    `;\nexport type LoginMutationFn = Apollo.MutationFunction<LoginMutation, LoginMutationVariables>;\n\n/**\n * __useLoginMutation__\n *\n * To run a mutation, you first call `useLoginMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useLoginMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [loginMutation, { data, loading, error }] = useLoginMutation({\n *   variables: {\n *      user_id: // value for 'user_id'\n *      email: // value for 'email'\n *   },\n * });\n */\nexport function useLoginMutation(baseOptions?: Apollo.MutationHookOptions<LoginMutation, LoginMutationVariables>) {\n        return Apollo.useMutation<LoginMutation, LoginMutationVariables>(LoginDocument, baseOptions);\n      }\nexport type LoginMutationHookResult = ReturnType<typeof useLoginMutation>;\nexport type LoginMutationResult = Apollo.MutationResult<LoginMutation>;\nexport type LoginMutationOptions = Apollo.BaseMutationOptions<LoginMutation, LoginMutationVariables>;\nexport const MaintenanceLoginDocument = gql`\n    mutation maintenanceLogin($access_id: String!, $password: String!) {\n  maintenanceLogin(access_id: $access_id, password: $password) {\n    refreshToken\n    accessToken\n  }\n}\n    `;\nexport type MaintenanceLoginMutationFn = Apollo.MutationFunction<MaintenanceLoginMutation, MaintenanceLoginMutationVariables>;\n\n/**\n * __useMaintenanceLoginMutation__\n *\n * To run a mutation, you first call `useMaintenanceLoginMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useMaintenanceLoginMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [maintenanceLoginMutation, { data, loading, error }] = useMaintenanceLoginMutation({\n *   variables: {\n *      access_id: // value for 'access_id'\n *      password: // value for 'password'\n *   },\n * });\n */\nexport function useMaintenanceLoginMutation(baseOptions?: Apollo.MutationHookOptions<MaintenanceLoginMutation, MaintenanceLoginMutationVariables>) {\n        return Apollo.useMutation<MaintenanceLoginMutation, MaintenanceLoginMutationVariables>(MaintenanceLoginDocument, baseOptions);\n      }\nexport type MaintenanceLoginMutationHookResult = ReturnType<typeof useMaintenanceLoginMutation>;\nexport type MaintenanceLoginMutationResult = Apollo.MutationResult<MaintenanceLoginMutation>;\nexport type MaintenanceLoginMutationOptions = Apollo.BaseMutationOptions<MaintenanceLoginMutation, MaintenanceLoginMutationVariables>;\nexport const PaypalCheckoutDocument = gql`\n    mutation paypalCheckout($products: String!, $coupon: String!, $US_ORDER: Boolean!) {\n  paypalCheckout(products: $products, coupon: $coupon, US_ORDER: $US_ORDER)\n}\n    `;\nexport type PaypalCheckoutMutationFn = Apollo.MutationFunction<PaypalCheckoutMutation, PaypalCheckoutMutationVariables>;\n\n/**\n * __usePaypalCheckoutMutation__\n *\n * To run a mutation, you first call `usePaypalCheckoutMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `usePaypalCheckoutMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [paypalCheckoutMutation, { data, loading, error }] = usePaypalCheckoutMutation({\n *   variables: {\n *      products: // value for 'products'\n *      coupon: // value for 'coupon'\n *      US_ORDER: // value for 'US_ORDER'\n *   },\n * });\n */\nexport function usePaypalCheckoutMutation(baseOptions?: Apollo.MutationHookOptions<PaypalCheckoutMutation, PaypalCheckoutMutationVariables>) {\n        return Apollo.useMutation<PaypalCheckoutMutation, PaypalCheckoutMutationVariables>(PaypalCheckoutDocument, baseOptions);\n      }\nexport type PaypalCheckoutMutationHookResult = ReturnType<typeof usePaypalCheckoutMutation>;\nexport type PaypalCheckoutMutationResult = Apollo.MutationResult<PaypalCheckoutMutation>;\nexport type PaypalCheckoutMutationOptions = Apollo.BaseMutationOptions<PaypalCheckoutMutation, PaypalCheckoutMutationVariables>;\nexport const ValidateCouponDocument = gql`\n    mutation validateCoupon($coupon_name: String!) {\n  validateCoupon(coupon_name: $coupon_name)\n}\n    `;\nexport type ValidateCouponMutationFn = Apollo.MutationFunction<ValidateCouponMutation, ValidateCouponMutationVariables>;\n\n/**\n * __useValidateCouponMutation__\n *\n * To run a mutation, you first call `useValidateCouponMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useValidateCouponMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [validateCouponMutation, { data, loading, error }] = useValidateCouponMutation({\n *   variables: {\n *      coupon_name: // value for 'coupon_name'\n *   },\n * });\n */\nexport function useValidateCouponMutation(baseOptions?: Apollo.MutationHookOptions<ValidateCouponMutation, ValidateCouponMutationVariables>) {\n        return Apollo.useMutation<ValidateCouponMutation, ValidateCouponMutationVariables>(ValidateCouponDocument, baseOptions);\n      }\nexport type ValidateCouponMutationHookResult = ReturnType<typeof useValidateCouponMutation>;\nexport type ValidateCouponMutationResult = Apollo.MutationResult<ValidateCouponMutation>;\nexport type ValidateCouponMutationOptions = Apollo.BaseMutationOptions<ValidateCouponMutation, ValidateCouponMutationVariables>;","import { FaInstagram, FaEnvelope, FaTwitter, FaFacebook } from \"react-icons/fa\";\r\nimport {\r\n    useGetAnnouncementsQuery,\r\n    useGetSocialsQuery,\r\n} from \"../../generated/graphql\";\r\nimport anime from \"animejs\";\r\nimport { useEffect } from \"react\";\r\n\r\n// const pickIntro = () => {\r\n//     const animations = [\r\n//         {\r\n//             targets: \".announcement-1 .letter\",\r\n//             translateX: [40, 0],\r\n//             translateZ: 0,\r\n//             opacity: [0, 1],\r\n//             easing: \"easeOutExpo\",\r\n//             duration: 1200,\r\n//             delay: (el, i) => 500 + 30 * i,\r\n//         },\r\n//     ]; //define animations here\r\n//     let index = Math.floor(Math.random() * animations.length - 1 + 1);\r\n//     return animations[index];\r\n// };\r\n\r\n// const pickOutro = () => {\r\n//     const animations = [\r\n//         {\r\n//             targets: \".announcement-1 .letter\",\r\n//             translateY: [0, -100],\r\n//             opacity: [1, 0],\r\n//             easing: \"easeInExpo\",\r\n//             duration: 1200,\r\n//             delay: (el, i) => 100 + 30 * i,\r\n//         },\r\n//     ]; //define animations here\r\n//     let index = Math.floor(Math.random() * animations.length - 1 + 1);\r\n//     return animations[index];\r\n// };\r\n\r\nconst GetSocials = () => {\r\n    const { data, loading } = useGetSocialsQuery({\r\n        variables: {\r\n            component: \"footer\",\r\n        },\r\n    });\r\n    const sdata = data,\r\n        sloading = loading;\r\n    return { sdata, sloading };\r\n};\r\n\r\nconst AnnouncementBar = () => {\r\n    const { sdata, sloading } = GetSocials();\r\n    const { data, loading, error } = useGetAnnouncementsQuery();\r\n\r\n    useEffect(() => {\r\n        // let timelines = [] as any[];\r\n\r\n        if (!!data && !!document.getElementById(`announcement-0`)) {\r\n            for (let i = 0; i < data.getAnnouncements.length; i++) {\r\n                var textWrapper = document.getElementById(`announcement-${i}`);\r\n                textWrapper!.innerHTML = textWrapper!.textContent!.replace(\r\n                    /\\S/g,\r\n                    \"<span class='letter'>$&</span>\"\r\n                );\r\n            }\r\n\r\n            let tl = 0;\r\n            anime\r\n                .timeline({\r\n                    loop: true,\r\n                    loopBegin: () => {\r\n                        if (!document.getElementById(`announcement-${tl}`)) {\r\n                            tl = 0;\r\n                        }\r\n                        if (document.getElementById(`announcement-${tl}`)) {\r\n                            document.getElementById(\r\n                                `announcement-${tl}`\r\n                            )!.style.display = \"block\";\r\n                        }\r\n                    },\r\n                    loopComplete: () => {\r\n                        if (document.getElementById(`announcement-${tl}`)) {\r\n                            document.getElementById(\r\n                                `announcement-${tl}`\r\n                            )!.style.display = \"none\";\r\n                            tl++;\r\n                        }\r\n                    },\r\n                })\r\n                .add({\r\n                    targets: `.announcement .letter`,\r\n                    translateY: [100, 0],\r\n                    translateZ: 0,\r\n                    opacity: [0, 1],\r\n                    easing: \"easeOutExpo\",\r\n                    duration: 1400,\r\n                    delay: (el, i) => 300 + 30 * i,\r\n                })\r\n                .add(\r\n                    {\r\n                        targets: `.announcement .letter`,\r\n                        translateX: [0, -30],\r\n                        opacity: [1, 0],\r\n                        easing: \"easeOutQuart\",\r\n                        duration: 1000,\r\n                        delay: (el, i) => 100 + 30 * i,\r\n                    },\r\n                    \"+=25000\"\r\n                );\r\n        }\r\n    }, [data]);\r\n\r\n    if (loading || sloading) {\r\n        return <></>;\r\n    }\r\n\r\n    if (error || !data || data.getAnnouncements.length === 0) {\r\n        return <></>;\r\n    }\r\n\r\n    return (\r\n        <div\r\n            style={{\r\n                width: \"100%\",\r\n                backgroundColor: \"rgb(13, 3, 3)\",\r\n                color: \"#fff\",\r\n                zIndex: 3,\r\n                position: \"relative\",\r\n            }}\r\n        >\r\n            <div\r\n                className=\"container\"\r\n                style={{ display: \"flex\", justifyContent: \"space-between\" }}\r\n            >\r\n                <span\r\n                    className=\"right  noselect\"\r\n                    style={{ color: \"rgb(13, 3, 3)\" }}\r\n                >\r\n                    <FaEnvelope />\r\n                    <FaInstagram />\r\n                </span>\r\n\r\n                <>\r\n                    {data?.getAnnouncements.length === 0 ? (\r\n                        <>Follow us on our socials</>\r\n                    ) : (\r\n                        <span id=\"announcement\">\r\n                            {data?.getAnnouncements.map((_val, i) => {\r\n                                return (\r\n                                    <span\r\n                                        key={i}\r\n                                        id={`announcement-${i}`}\r\n                                        className=\"announcement \"\r\n                                    >\r\n                                        {data.getAnnouncements[i].text}\r\n                                    </span>\r\n                                );\r\n                            })}\r\n                        </span>\r\n                    )}\r\n                </>\r\n\r\n                <span className=\"right\">\r\n                    {!!sdata && sdata.getSocials ? (\r\n                        <>\r\n                            {sdata.getSocials.map((_val, i) => {\r\n                                if (sdata.getSocials[i].display) {\r\n                                    return (\r\n                                        <a\r\n                                            id=\"social-link\"\r\n                                            key={i}\r\n                                            href={\r\n                                                sdata.getSocials[i].social_url\r\n                                            }\r\n                                            style={{\r\n                                                width: \"30px\",\r\n                                                height: \"30px\",\r\n                                                marginRight: \"7px\",\r\n                                            }}\r\n                                        >\r\n                                            <SocialIcon\r\n                                                social_logo={\r\n                                                    sdata.getSocials[i]\r\n                                                        .social_logo\r\n                                                }\r\n                                            />\r\n                                        </a>\r\n                                    );\r\n                                } else {\r\n                                    return null;\r\n                                }\r\n                            })}\r\n                        </>\r\n                    ) : (\r\n                        <>\r\n                            <a\r\n                                href=\"mailto:cantrelatejp@gmail.com\"\r\n                                style={{ color: \"#fff\" }}\r\n                            >\r\n                                <FaEnvelope\r\n                                    style={{\r\n                                        marginRight: \"5px\",\r\n                                        marginLeft: \"5px\",\r\n                                    }}\r\n                                />\r\n                            </a>\r\n\r\n                            <a\r\n                                href=\"https://www.instagram.com/cantrelate.jp/\"\r\n                                style={{ color: \"#fff\" }}\r\n                            >\r\n                                <FaInstagram />\r\n                            </a>\r\n                        </>\r\n                    )}\r\n                </span>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default AnnouncementBar;\r\n\r\nconst SocialIcon: React.FC<{ social_logo: string }> = ({ social_logo }) => {\r\n    switch (social_logo) {\r\n        case \"I\": {\r\n            return (\r\n                <FaInstagram\r\n                    style={{\r\n                        height: 22,\r\n                        width: 22,\r\n                    }}\r\n                />\r\n            );\r\n        }\r\n\r\n        case \"E\": {\r\n            return (\r\n                <FaEnvelope\r\n                    style={{\r\n                        height: 22,\r\n                        width: 22,\r\n                    }}\r\n                />\r\n            );\r\n        }\r\n        case \"T\": {\r\n            return (\r\n                <FaTwitter\r\n                    style={{\r\n                        height: 22,\r\n                        width: 22,\r\n                    }}\r\n                />\r\n            );\r\n        }\r\n        case \"F\": {\r\n            return (\r\n                <FaFacebook\r\n                    style={{\r\n                        height: 22,\r\n                        width: 22,\r\n                    }}\r\n                />\r\n            );\r\n        }\r\n\r\n        default: {\r\n            return <>ERROR</>;\r\n        }\r\n    }\r\n};\r\n","const Logo = () => {\r\n    return (\r\n        <a href=\"#/home\" className=\"brand-logo\">\r\n            Cant Relate .JP\r\n        </a>\r\n    );\r\n};\r\n\r\nexport default Logo;\r\n","import { useGoogleLogin } from \"react-google-login\";\r\nimport { setAccessToken } from \"../../accessToken\";\r\nimport { checkAuth } from \"../../CheckAuth\";\r\nimport { useLoginMutation } from \"../../generated/graphql\";\r\nimport \"../../css/navbar.scss\";\r\nimport { useEffect } from \"react\";\r\nimport M from \"materialize-css\";\r\nimport AnnouncementBar from \"./AnnouncementBar\";\r\nimport Logo from \"./Logo\";\r\n\r\nconst Navbar = () => {\r\n    useEffect(() => {\r\n        var elems = document.querySelectorAll(\".sidenav\");\r\n        M.Sidenav.init(elems);\r\n    });\r\n    const [login] = useLoginMutation();\r\n\r\n    const handler = async res => {\r\n        let response = await login({\r\n            variables: {\r\n                user_id: res.googleId,\r\n                email: res.profileObj.email,\r\n            },\r\n        });\r\n\r\n        setAccessToken(response.data?.login.accessToken!);\r\n        localStorage.setItem(\"iru5\", response.data?.login.refreshToken!);\r\n        window.location.reload();\r\n    };\r\n\r\n    const { signIn } = useGoogleLogin({\r\n        clientId:\r\n            \"767129492168-gloagc4m640fgeegm6if58heehkpup7d.apps.googleusercontent.com\",\r\n        onSuccess: handler,\r\n    });\r\n\r\n    const logout = () => {\r\n        localStorage.setItem(\"iru5\", \"\");\r\n        setAccessToken(\"\");\r\n        window.location.reload();\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <header style={{ position: \"sticky\", top: 0, zIndex: 997 }}>\r\n                <AnnouncementBar />\r\n                <div\r\n                    style={{ zIndex: 4, position: \"relative\" }}\r\n                    className=\"noselect\"\r\n                >\r\n                    <nav style={{ backgroundColor: \"#0a0a0a\" }}>\r\n                        <div className=\"nav-wrapper\">\r\n                            <Logo />\r\n\r\n                            <a\r\n                                href=\"#/\"\r\n                                data-target=\"mobile-demo\"\r\n                                className=\"sidenav-trigger left\"\r\n                            >\r\n                                <i className=\"material-icons noselect\">menu</i>\r\n                            </a>\r\n\r\n                            <ul\r\n                                id=\"nav\"\r\n                                className=\"center\"\r\n                                style={{\r\n                                    left: \"50%\",\r\n                                    transform: \"translateX(-50%)\",\r\n                                    position: \"absolute\",\r\n                                }}\r\n                            >\r\n                                {/* <li>\r\n                                    <a href=\"#/home\">HOME</a>\r\n                                </li> */}\r\n                                <li>\r\n                                    <a href=\"#/products\">PRODUCTS</a>\r\n                                </li>\r\n\r\n                                <li>\r\n                                    {checkAuth() ? (\r\n                                        <a href=\"#/my-orders\">MY ORDERS</a>\r\n                                    ) : (\r\n                                        // eslint-disable-next-line\r\n                                        <a\r\n                                            onClick={async () => {\r\n                                                await signIn();\r\n                                            }}\r\n                                        >\r\n                                            MY ORDERS\r\n                                        </a>\r\n                                    )}\r\n                                </li>\r\n\r\n                                <li>\r\n                                    <a href=\"#/my-cart\">CART</a>\r\n                                </li>\r\n                            </ul>\r\n                            {checkAuth() ? (\r\n                                <i\r\n                                    id=\"desktop-logout\"\r\n                                    className=\"material-icons right noselect\"\r\n                                    style={{ marginRight: \"15%\" }}\r\n                                    onClick={() => logout()}\r\n                                >\r\n                                    exit_to_app\r\n                                </i>\r\n                            ) : (\r\n                                <></>\r\n                            )}\r\n                            <a\r\n                                href=\"#/my-cart\"\r\n                                className=\"right white-text\"\r\n                                style={{ color: \"#000\", marginRight: \"18px\" }}\r\n                            >\r\n                                <i className=\"material-icons\" id=\"mobile-cart\">\r\n                                    shopping_cart\r\n                                </i>\r\n                            </a>\r\n                        </div>\r\n                    </nav>\r\n                </div>\r\n            </header>\r\n            <ul\r\n                className=\"sidenav\"\r\n                id=\"mobile-demo\"\r\n                style={{\r\n                    backgroundColor: \"rgba(0, 0, 0, 0.95)\",\r\n                    paddingTop: \"42px\",\r\n                }}\r\n            >\r\n                <li>\r\n                    <a\r\n                        style={{ color: \"#fff\", textAlign: \"center\" }}\r\n                        href=\"#/products\"\r\n                    >\r\n                        Products\r\n                    </a>\r\n                </li>\r\n                <li>\r\n                    {checkAuth() ? (\r\n                        <a\r\n                            style={{ color: \"#fff\", textAlign: \"center\" }}\r\n                            href=\"#/my-orders\"\r\n                        >\r\n                            My Orders\r\n                        </a>\r\n                    ) : (\r\n                        // eslint-disable-next-line\r\n                        <a\r\n                            style={{ color: \"#fff\", textAlign: \"center\" }}\r\n                            onClick={() => {\r\n                                signIn();\r\n                            }}\r\n                        >\r\n                            My Orders\r\n                        </a>\r\n                    )}\r\n                </li>\r\n\r\n                <li>\r\n                    {checkAuth() ? (\r\n                        <a\r\n                            href=\"#/\"\r\n                            style={{ color: \"#fff\", textAlign: \"center\" }}\r\n                            onClick={() => logout()}\r\n                        >\r\n                            Logout\r\n                        </a>\r\n                    ) : (\r\n                        <></>\r\n                    )}\r\n                </li>\r\n            </ul>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Navbar;\r\n","const CopyrightBar = () => {\r\n    return (\r\n        <div\r\n            style={{\r\n                width: \"100%\",\r\n                display: \"flex\",\r\n                justifyContent: \"center\",\r\n                border: \"1px solid\",\r\n            }}\r\n        >\r\n            <span\r\n                style={{\r\n                    marginTop: \"5px\",\r\n                    marginBottom: \"5px\",\r\n                    fontSize: \"26.5px\",\r\n                    fontWeight: 550,\r\n                }}\r\n            >\r\n                © 2021 CANT RELATE.JP\r\n            </span>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default CopyrightBar;\r\n","import CopyrightBar from \"./CopyrightBar\";\r\nimport { FaInstagram, FaEnvelope, FaTwitter, FaFacebook } from \"react-icons/fa\";\r\nimport { useGetSocialsQuery } from \"../../generated/graphql\";\r\nimport \"../../css/footer.scss\";\r\n\r\nconst Footer = () => {\r\n    const { data } = useGetSocialsQuery({\r\n        variables: {\r\n            component: \"footer\",\r\n        },\r\n    });\r\n\r\n    return (\r\n        <span>\r\n            <footer\r\n                className=\"noselect\"\r\n                style={{\r\n                    backgroundColor: \"#0a0a0a\",\r\n                    width: \"100%\",\r\n                    height: \"280px\",\r\n                }}\r\n            >\r\n                <div className=\"container\">\r\n                    <div\r\n                        className=\"row\"\r\n                        style={{\r\n                            width: \"100%\",\r\n                            display: \"flex\",\r\n                            justifyContent: \"space-between\",\r\n                        }}\r\n                    >\r\n                        <div className=\"col s12 l6 hide-on-small-only \">\r\n                            <div className=\"footer-logo\">\r\n                                <h1>Cant</h1>\r\n                                <h1>Relate</h1>\r\n                                <h1>.JP</h1>\r\n                            </div>\r\n                        </div>\r\n\r\n                        <div className=\"col s12 l4 \">\r\n                            <ul id=\"footer-info\">\r\n                                <li>\r\n                                    <a\r\n                                        href=\"#/shipping_policy\"\r\n                                        className=\"white-text\"\r\n                                    >\r\n                                        <h4 style={{ fontWeight: 600 }}>\r\n                                            Shipping Policy\r\n                                        </h4>\r\n                                    </a>\r\n                                </li>\r\n                                <li>\r\n                                    <a href=\"#/contact\" className=\"white-text\">\r\n                                        <h4\r\n                                            style={{\r\n                                                marginTop: \"0px\",\r\n                                                fontWeight: 600,\r\n                                            }}\r\n                                        >\r\n                                            Contact Us\r\n                                        </h4>\r\n                                    </a>\r\n                                </li>\r\n                                <li>\r\n                                    <a href=\"#/FAQ\" className=\"white-text\">\r\n                                        <h4\r\n                                            style={{\r\n                                                marginTop: \"0px\",\r\n                                                fontWeight: 600,\r\n                                            }}\r\n                                        >\r\n                                            FAQ\r\n                                        </h4>\r\n                                    </a>\r\n                                </li>\r\n                                <li>\r\n                                    {!!data && data.getSocials ? (\r\n                                        <>\r\n                                            {data.getSocials.map((_val, i) => {\r\n                                                if (\r\n                                                    data.getSocials[i].display\r\n                                                ) {\r\n                                                    return (\r\n                                                        <a\r\n                                                            id=\"social-link\"\r\n                                                            key={i}\r\n                                                            href={\r\n                                                                data.getSocials[\r\n                                                                    i\r\n                                                                ].social_url\r\n                                                            }\r\n                                                            style={{\r\n                                                                width: \"30px\",\r\n                                                                height: \"30px\",\r\n                                                                marginRight:\r\n                                                                    \"7px\",\r\n                                                            }}\r\n                                                        >\r\n                                                            <SocialIcon\r\n                                                                social_logo={\r\n                                                                    data\r\n                                                                        .getSocials[\r\n                                                                        i\r\n                                                                    ]\r\n                                                                        .social_logo\r\n                                                                }\r\n                                                            />\r\n                                                        </a>\r\n                                                    );\r\n                                                } else {\r\n                                                    return null;\r\n                                                }\r\n                                            })}\r\n                                        </>\r\n                                    ) : (\r\n                                        <>\r\n                                            <a\r\n                                                id=\"social-link\"\r\n                                                href=\"https://www.instagram.com/cantrelate.jp/\"\r\n                                            >\r\n                                                <FaInstagram\r\n                                                    style={{\r\n                                                        width: \"30px\",\r\n                                                        height: \"30px\",\r\n                                                        marginRight: \"7px\",\r\n                                                    }}\r\n                                                />\r\n                                            </a>\r\n                                            <a\r\n                                                id=\"social-link\"\r\n                                                href=\"mailto:cantrelatejp@gmail.com\"\r\n                                            >\r\n                                                <FaEnvelope\r\n                                                    style={{\r\n                                                        width: \"30px\",\r\n                                                        height: \"30px\",\r\n                                                    }}\r\n                                                />\r\n                                            </a>\r\n                                        </>\r\n                                    )}\r\n                                </li>\r\n                            </ul>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </footer>\r\n            <CopyrightBar />\r\n        </span>\r\n    );\r\n};\r\n\r\nexport default Footer;\r\n\r\nconst SocialIcon: React.FC<{ social_logo: string }> = ({ social_logo }) => {\r\n    switch (social_logo) {\r\n        case \"I\": {\r\n            return (\r\n                <FaInstagram\r\n                    style={{\r\n                        height: 30,\r\n                        width: 30,\r\n                    }}\r\n                />\r\n            );\r\n        }\r\n\r\n        case \"E\": {\r\n            return (\r\n                <FaEnvelope\r\n                    style={{\r\n                        height: 30,\r\n                        width: 30,\r\n                    }}\r\n                />\r\n            );\r\n        }\r\n        case \"T\": {\r\n            return (\r\n                <FaTwitter\r\n                    style={{\r\n                        height: 30,\r\n                        width: 30,\r\n                    }}\r\n                />\r\n            );\r\n        }\r\n        case \"F\": {\r\n            return (\r\n                <FaFacebook\r\n                    style={{\r\n                        height: 30,\r\n                        width: 30,\r\n                    }}\r\n                />\r\n            );\r\n        }\r\n\r\n        default: {\r\n            return <>ERROR</>;\r\n        }\r\n    }\r\n};\r\n","import {\r\n    useGetProductsQuery,\r\n    useGetSectionsQuery,\r\n} from \"../../generated/graphql\";\r\nimport \"../../css/products.scss\";\r\nimport { useEffect } from \"react\";\r\nimport anime from \"animejs\";\r\n\r\nconst GetSections = () => {\r\n    const { data, loading } = useGetSectionsQuery();\r\n    let sdata = data,\r\n        sloading = loading;\r\n    return { sdata, sloading };\r\n};\r\n\r\nconst Products = () => {\r\n    const { data, loading } = useGetProductsQuery();\r\n    const { sdata, sloading } = GetSections();\r\n\r\n    useEffect(() => {\r\n        if (!loading && !sloading) {\r\n            if (!!document.getElementById(\"products-grid\")) {\r\n                document\r\n                    .getElementById(\"products-grid\")!\r\n                    .classList.remove(\"hide\");\r\n            }\r\n            anime({\r\n                duration: function (_t, i) {\r\n                    return 900 + i * 75;\r\n                },\r\n                targets: \".products-grid .card-content\",\r\n                easing: \"easeOutExpo\",\r\n                // delay: function (t, i) {\r\n                //     return i * 50;\r\n                // },\r\n                opacity: { value: [0, 1], easing: \"linear\" },\r\n                scale: [0, 1],\r\n                delay: anime.stagger(150, { start: 100 }),\r\n            });\r\n            anime({\r\n                duration: function (_t, i) {\r\n                    return 900 + i * 75;\r\n                },\r\n                targets: \".products-grid .card\",\r\n                easing: \"easeOutExpo\",\r\n                // delay: function (t, i) {\r\n                //     return i * 50;\r\n                // },\r\n                opacity: { value: [0, 1], easing: \"linear\" },\r\n                scale: [0, 1],\r\n                delay: anime.stagger(150, { start: 100 }),\r\n            });\r\n        }\r\n    });\r\n\r\n    if (loading || sloading) {\r\n        return <></>;\r\n    }\r\n\r\n    return (\r\n        <div className=\"container\" style={{ width: \"80%\" }}>\r\n            {!!sdata && sdata.getSections.length !== 0 ? (\r\n                <>\r\n                    <h1\r\n                        className=\"center-align\"\r\n                        style={{\r\n                            marginTop: \"60px\",\r\n                            marginBottom: \"60px\",\r\n                            fontWeight: 600,\r\n                        }}\r\n                    >\r\n                        Sections\r\n                    </h1>\r\n\r\n                    <div className=\"sections-grid\">\r\n                        {sdata.getSections.map((_val, i) => {\r\n                            let section = sdata.getSections[i];\r\n                            return (\r\n                                <div\r\n                                    className=\"card z-depth-0 black-text\"\r\n                                    style={{\r\n                                        margin: \"0px 8px 32px 8px\",\r\n                                    }}\r\n                                    key={i}\r\n                                >\r\n                                    <a\r\n                                        className=\"black-text\"\r\n                                        href={`#/view-section:${section.section_id}`}\r\n                                    >\r\n                                        <div className=\"container\">\r\n                                            <div className=\"card-image\">\r\n                                                <img\r\n                                                    src={section.thumbnail}\r\n                                                    alt={section.name}\r\n                                                />\r\n                                            </div>\r\n                                        </div>\r\n\r\n                                        <div className=\"card-content\">\r\n                                            <span className=\"card-title\">\r\n                                                <h5 className=\"center-align\">\r\n                                                    {section.name}\r\n                                                </h5>\r\n                                            </span>\r\n                                            <span\r\n                                                style={{\r\n                                                    display: \"flex\",\r\n                                                    justifyContent: \"center\",\r\n                                                }}\r\n                                            ></span>\r\n                                        </div>\r\n                                    </a>\r\n                                </div>\r\n                            );\r\n                        })}\r\n                    </div>\r\n                </>\r\n            ) : null}\r\n\r\n            {!!data ? (\r\n                <>\r\n                    <h1\r\n                        className=\"center-align\"\r\n                        style={{\r\n                            marginTop: \"60px\",\r\n                            marginBottom: \"60px\",\r\n                            fontWeight: 600,\r\n                        }}\r\n                    >\r\n                        Products\r\n                    </h1>\r\n\r\n                    <div id=\"products-grid\" className=\"products-grid hide\">\r\n                        {data?.getProducts.map((_val, i) => {\r\n                            let product: any = data.getProducts[i];\r\n                            return (\r\n                                <div className=\"card z-depth-0 \" key={i}>\r\n                                    <a\r\n                                        className=\"black-text\"\r\n                                        href={`#/product-details:${product.product_id}`}\r\n                                    >\r\n                                        <div className=\"container\">\r\n                                            <div className=\"card-image\">\r\n                                                <img\r\n                                                    src={\r\n                                                        !product.images[0] ||\r\n                                                        !product.images[0]\r\n                                                            .img_url\r\n                                                            ? \"https://materializecss.com/images/sample-1.jpg\"\r\n                                                            : product.images[0]\r\n                                                                  .img_url\r\n                                                    }\r\n                                                    alt={product.name}\r\n                                                />\r\n                                            </div>\r\n                                        </div>\r\n\r\n                                        <div className=\"card-content\">\r\n                                            <span className=\"card-title\">\r\n                                                <h5 className=\"center-align\">\r\n                                                    {product.name}\r\n                                                </h5>\r\n                                            </span>\r\n                                            <span\r\n                                                style={{\r\n                                                    display: \"flex\",\r\n                                                    justifyContent: \"center\",\r\n                                                }}\r\n                                            >\r\n                                                <p\r\n                                                    className=\"product-price\"\r\n                                                    style={{ fontSize: \"16px\" }}\r\n                                                >\r\n                                                    $\r\n                                                    {Number(\r\n                                                        product.price / 100\r\n                                                    ).toFixed(2)}\r\n                                                </p>\r\n                                            </span>\r\n                                        </div>\r\n                                    </a>\r\n                                </div>\r\n                            );\r\n                        })}\r\n                    </div>\r\n                </>\r\n            ) : null}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Products;\r\n","import { useGetUsersOrdersQuery } from \"../generated/graphql\";\r\nimport { useLocation } from \"react-router-dom\";\r\n// import anime from \"animejs\";\r\nimport { Sorting } from \"../Sorting\";\r\n\r\ninterface UserOrders {\r\n    products: [\r\n        {\r\n            product_id: number;\r\n            name: string;\r\n            desc: string;\r\n            price: number;\r\n            stock: number;\r\n            exp_date?: string;\r\n            quantityOrdered: number;\r\n            productSubtotal: number;\r\n            images: [\r\n                {\r\n                    img_id: number;\r\n                    img_url: string;\r\n                    index: number;\r\n                }\r\n            ];\r\n        }\r\n    ];\r\n    shipping: string;\r\n    order_total: number;\r\n    order_id: number;\r\n    tracking_num?: string;\r\n    coupon: string;\r\n    discount: string;\r\n    date_of_purchase: string;\r\n}\r\n\r\nconst calcSubtotals = (products: any[]) => {\r\n    let Subtotal: any = 0,\r\n        sTotal: any = 100;\r\n\r\n    for (let i = 0; i < products.length; i++) {\r\n        Subtotal += products[i].productSubtotal!;\r\n        sTotal += products[i].quantityOrdered * 50;\r\n    }\r\n\r\n    let productsSubtotal = Number(Subtotal / 100).toFixed(2);\r\n\r\n    if (sTotal > 500) {\r\n        sTotal = 500;\r\n    }\r\n\r\n    let shippingTotal = Number(sTotal / 100).toFixed(2);\r\n\r\n    return { productsSubtotal, shippingTotal };\r\n};\r\n\r\nconst showDetails = (i, tmp) => {\r\n    // if (document.getElementById(`card-header-${i}`)!.clientHeight > 50)\r\n    if (\r\n        !document\r\n            .getElementById(`order-details-row-${i}`)!\r\n            .classList.contains(\"hide\")\r\n    ) {\r\n        document\r\n            .getElementById(`order-details-row-${i}`)!\r\n            .classList.add(\"hide\");\r\n\r\n        // anime({\r\n        //     targets: `.card-header-${i}`,\r\n        //     height: \"48.5px\",\r\n        //     easing: \"linear\",\r\n        //     duration: 400,\r\n        //     complete: () => {\r\n        //         setTimeout(() => {\r\n        //             document.getElementById(\r\n        //                 \"details-span\"\r\n        //             )!.style.pointerEvents = \"auto\";\r\n        //         }, 50);\r\n        //     },\r\n        // });\r\n    } else {\r\n        const { productsSubtotal, shippingTotal } = calcSubtotals(\r\n            tmp[i].products\r\n        );\r\n\r\n        document.getElementById(\r\n            `subtotal-${i}`\r\n        )!.innerHTML = `$${productsSubtotal}`;\r\n\r\n        document.getElementById(`tax-${i}`)!.innerHTML = `$${Number(\r\n            Number(productsSubtotal) * 0.095\r\n        ).toFixed(2)}`;\r\n\r\n        document.getElementById(\r\n            `shippingTotal-${i}`\r\n        )!.innerHTML = `$${shippingTotal}`;\r\n\r\n        document\r\n            .getElementById(`order-details-row-${i}`)!\r\n            .classList.remove(\"hide\");\r\n\r\n        // anime({\r\n        //     targets: `.card-header-${i}`,\r\n        //     height: \"215px\",\r\n        //     easing: \"linear\",\r\n        //     duration: 350,\r\n        //     complete: () => {\r\n        //         document\r\n        //             .getElementById(`order-details-row-${i}`)!\r\n        //             .classList.remove(\"hide\");\r\n\r\n        //         anime({\r\n        //             targets: `.order-details-${i} .el`,\r\n        //             opacity: [0, 1],\r\n        //             delay: anime.stagger(50),\r\n        //             complete: () => {\r\n        //                 setTimeout(() => {\r\n        //                     document.getElementById(\r\n        //                         \"details-span\"\r\n        //                     )!.style.pointerEvents = \"auto\";\r\n        //                 }, 15);\r\n        //             },\r\n        //         });\r\n        //     },\r\n        // });\r\n    }\r\n};\r\n\r\nconst UsersOrders = () => {\r\n    const location: any = useLocation();\r\n\r\n    const { sortByProp } = Sorting();\r\n\r\n    if (!!location.state) {\r\n        if (location.state.reload) {\r\n            window.location.reload();\r\n        }\r\n    }\r\n\r\n    const { data, loading, error } = useGetUsersOrdersQuery();\r\n\r\n    if (loading) {\r\n        return <></>;\r\n    }\r\n\r\n    if (error) {\r\n        return <></>;\r\n    }\r\n\r\n    if (!data) {\r\n        //redirect\r\n        return <></>;\r\n    }\r\n\r\n    let sortedOrders: [UserOrders] = sortByProp(\r\n        data.getUsersOrders,\r\n        \"order_id\",\r\n        true\r\n    );\r\n\r\n    return (\r\n        <>\r\n            {!!sortedOrders ? (\r\n                <>\r\n                    <div className=\"container\" style={{ minHeight: \"70vh\" }}>\r\n                        <div\r\n                            style={{\r\n                                display: \"flex\",\r\n                                justifyContent: \"center\",\r\n                            }}\r\n                        >\r\n                            <h3>Your Purchases</h3>\r\n                        </div>\r\n                        <>\r\n                            {sortedOrders.map((_val, i) => {\r\n                                let amountOff = Number(\r\n                                    (sortedOrders[i].order_total *\r\n                                        Number(\r\n                                            \"0.\" + sortedOrders[i].discount\r\n                                        )) /\r\n                                        100\r\n                                ).toFixed(2);\r\n\r\n                                let str, dateOfPurchase;\r\n                                if (sortedOrders[i].date_of_purchase) {\r\n                                    str = sortedOrders[\r\n                                        i\r\n                                    ].date_of_purchase.split(\" \");\r\n                                    dateOfPurchase = `${str[0]} ${str[1]} ${str[2]} ${str[3]}`;\r\n                                }\r\n\r\n                                let shipping = JSON.parse(\r\n                                    sortedOrders[i].shipping\r\n                                );\r\n                                return (\r\n                                    <div className=\"row z-depth-1\" key={i}>\r\n                                        <div\r\n                                            className=\"col s12\"\r\n                                            style={{ padding: \"0px\" }}\r\n                                        >\r\n                                            <div\r\n                                                className={`card-header card-header-${i} row`}\r\n                                                id={`card-header-${i}`}\r\n                                                style={{\r\n                                                    borderLeft:\r\n                                                        \"5px solid #ff0000\",\r\n                                                    paddingTop: \"13px\",\r\n                                                    paddingBottom: \"13px\",\r\n                                                    paddingRight: \"25px\",\r\n                                                    paddingLeft: \"20px\",\r\n                                                    margin: \"0px\",\r\n                                                    zIndex: 4,\r\n                                                    position: \"relative\",\r\n                                                }}\r\n                                            >\r\n                                                <span className=\"col s7 m4\">\r\n                                                    <span\r\n                                                        style={{\r\n                                                            color: \"#1d252c\",\r\n                                                            paddingRight:\r\n                                                                \"1rem\",\r\n                                                            fontWeight: 700,\r\n                                                        }}\r\n                                                    >\r\n                                                        Order ID\r\n                                                    </span>\r\n                                                    <span>\r\n                                                        CR-\r\n                                                        {\r\n                                                            sortedOrders[i]\r\n                                                                .order_id\r\n                                                        }\r\n                                                    </span>\r\n                                                </span>\r\n\r\n                                                <span className=\"hide-on-med-and-down col l3\">\r\n                                                    {sortedOrders[i]\r\n                                                        .date_of_purchase ? (\r\n                                                        <span>\r\n                                                            {dateOfPurchase}\r\n                                                        </span>\r\n                                                    ) : (\r\n                                                        <></>\r\n                                                    )}\r\n                                                </span>\r\n\r\n                                                <span className=\"bold col s5 m4\">\r\n                                                    <span>\r\n                                                        <span className=\"hide-on-small-only left\">\r\n                                                            $\r\n                                                            {Number(\r\n                                                                sortedOrders[i]\r\n                                                                    .order_total /\r\n                                                                    100\r\n                                                            ).toFixed(2)}{\" \"}\r\n                                                            {sortedOrders[i]\r\n                                                                .discount ? (\r\n                                                                <span className=\"hide-on-med-and-down\">\r\n                                                                    (\r\n                                                                    <span\r\n                                                                        style={{\r\n                                                                            color:\r\n                                                                                \"rgb(255, 0, 0)\",\r\n                                                                        }}\r\n                                                                    >\r\n                                                                        -$\r\n                                                                        {\r\n                                                                            amountOff\r\n                                                                        }\r\n                                                                    </span>\r\n                                                                    )\r\n                                                                </span>\r\n                                                            ) : (\r\n                                                                <></>\r\n                                                            )}\r\n                                                        </span>\r\n                                                        <span\r\n                                                            id=\"details-span\"\r\n                                                            className=\"noselect right\"\r\n                                                            onClick={() => {\r\n                                                                // document.getElementById(\r\n                                                                //     \"details-span\"\r\n                                                                // )!.style.pointerEvents =\r\n                                                                //     \"none\";\r\n                                                                showDetails(\r\n                                                                    i,\r\n                                                                    sortedOrders\r\n                                                                );\r\n                                                            }}\r\n                                                        >\r\n                                                            Details\r\n                                                        </span>\r\n                                                    </span>\r\n                                                </span>\r\n\r\n                                                <div\r\n                                                    className=\"row hide\"\r\n                                                    id={`order-details-row-${i}`}\r\n                                                    style={{\r\n                                                        marginTop: \"32px\",\r\n                                                    }}\r\n                                                >\r\n                                                    <div className=\"col s12 m5\">\r\n                                                        <span\r\n                                                            className={`order-details-${i}`}\r\n                                                        >\r\n                                                            <span className=\"el\">\r\n                                                                <span className=\"left\">\r\n                                                                    Subtotal\r\n                                                                </span>\r\n                                                                <span\r\n                                                                    className=\"right semi-bold\"\r\n                                                                    id={`subtotal-${i}`}\r\n                                                                ></span>\r\n                                                            </span>\r\n\r\n                                                            <br />\r\n\r\n                                                            <span className=\"el\">\r\n                                                                <span className=\"left\">\r\n                                                                    Tax\r\n                                                                </span>\r\n                                                                <span\r\n                                                                    className=\"right semi-bold\"\r\n                                                                    id={`tax-${i}`}\r\n                                                                ></span>\r\n                                                            </span>\r\n\r\n                                                            <br />\r\n\r\n                                                            <span className=\"el\">\r\n                                                                <span className=\"left\">\r\n                                                                    Shipping\r\n                                                                </span>\r\n                                                                <span\r\n                                                                    className=\"right semi-bold\"\r\n                                                                    id={`shippingTotal-${i}`}\r\n                                                                ></span>\r\n                                                            </span>\r\n\r\n                                                            <>\r\n                                                                {!sortedOrders[\r\n                                                                    i\r\n                                                                ].coupon ? (\r\n                                                                    <></>\r\n                                                                ) : (\r\n                                                                    <span className=\"el\">\r\n                                                                        <br />\r\n                                                                        <div\r\n                                                                            className=\"divider\"\r\n                                                                            style={{\r\n                                                                                marginTop:\r\n                                                                                    \"4px\",\r\n                                                                                marginBottom:\r\n                                                                                    \"4px\",\r\n                                                                            }}\r\n                                                                        ></div>\r\n                                                                        <span className=\"left\">\r\n                                                                            Coupon(\r\n                                                                            {\r\n                                                                                sortedOrders[\r\n                                                                                    i\r\n                                                                                ]\r\n                                                                                    .coupon\r\n                                                                            }\r\n                                                                            )\r\n                                                                        </span>\r\n                                                                        <span className=\"right\">\r\n                                                                            {\r\n                                                                                sortedOrders[\r\n                                                                                    i\r\n                                                                                ]\r\n                                                                                    .discount\r\n                                                                            }\r\n                                                                            % (\r\n                                                                            <span className=\"red-text bold\">\r\n                                                                                -$\r\n                                                                                {\r\n                                                                                    amountOff\r\n                                                                                }\r\n                                                                            </span>\r\n                                                                            )\r\n                                                                        </span>\r\n                                                                    </span>\r\n                                                                )}\r\n                                                            </>\r\n\r\n                                                            <br />\r\n\r\n                                                            <span className=\"el\">\r\n                                                                <div\r\n                                                                    className=\"divider\"\r\n                                                                    style={{\r\n                                                                        marginTop:\r\n                                                                            \"4px\",\r\n                                                                        marginBottom:\r\n                                                                            \"4px\",\r\n                                                                    }}\r\n                                                                ></div>\r\n                                                                <span className=\"left\">\r\n                                                                    Order Total\r\n                                                                </span>\r\n                                                                <span className=\"right bold\">\r\n                                                                    $\r\n                                                                    {Number(\r\n                                                                        sortedOrders[\r\n                                                                            i\r\n                                                                        ]\r\n                                                                            .order_total /\r\n                                                                            100\r\n                                                                    ).toFixed(\r\n                                                                        2\r\n                                                                    )}\r\n                                                                </span>\r\n                                                            </span>\r\n                                                        </span>\r\n                                                    </div>\r\n\r\n                                                    <div className=\"col s12 m5 offset-m2\">\r\n                                                        <span\r\n                                                            className={`shipping-details-${i}`}\r\n                                                        >\r\n                                                            <div\r\n                                                                style={{\r\n                                                                    width:\r\n                                                                        \"100%\",\r\n                                                                    borderLeft:\r\n                                                                        \" 4px solid black\",\r\n                                                                    paddingLeft:\r\n                                                                        \"15px\",\r\n                                                                }}\r\n                                                            >\r\n                                                                <p className=\"bold\">\r\n                                                                    {!shipping ? (\r\n                                                                        <></>\r\n                                                                    ) : (\r\n                                                                        <>\r\n                                                                            {\r\n                                                                                shipping.name\r\n                                                                            }\r\n                                                                            <br />\r\n                                                                            {\r\n                                                                                shipping.line1\r\n                                                                            }\r\n                                                                            <br />\r\n                                                                            {\r\n                                                                                shipping.city\r\n                                                                            }\r\n                                                                            ,{\" \"}\r\n                                                                            {\r\n                                                                                shipping.state\r\n                                                                            }{\" \"}\r\n                                                                            {\r\n                                                                                shipping.postal_code\r\n                                                                            }\r\n                                                                            <br />\r\n                                                                            {\r\n                                                                                shipping.country\r\n                                                                            }\r\n                                                                        </>\r\n                                                                    )}\r\n                                                                </p>\r\n                                                            </div>\r\n                                                        </span>\r\n                                                    </div>\r\n                                                </div>\r\n                                            </div>\r\n\r\n                                            <div className=\"divider\"></div>\r\n\r\n                                            <div\r\n                                                className=\"card-body\"\r\n                                                style={{\r\n                                                    backgroundColor: \"white\",\r\n                                                    zIndex: 2,\r\n                                                    position: \"relative\",\r\n                                                }}\r\n                                            >\r\n                                                {sortedOrders[i].products.map(\r\n                                                    (_val, j) => {\r\n                                                        return (\r\n                                                            <div\r\n                                                                className=\"row\"\r\n                                                                key={j}\r\n                                                            >\r\n                                                                <div className=\"col s12 m4\">\r\n                                                                    <img\r\n                                                                        alt=\"product\"\r\n                                                                        style={{\r\n                                                                            width:\r\n                                                                                \"100%\",\r\n                                                                        }}\r\n                                                                        src={\r\n                                                                            sortedOrders[\r\n                                                                                i\r\n                                                                            ]\r\n                                                                                .products[\r\n                                                                                j\r\n                                                                            ]\r\n                                                                                .images[0]\r\n                                                                                .img_url\r\n                                                                        }\r\n                                                                    />\r\n                                                                </div>\r\n                                                                <div\r\n                                                                    style={{\r\n                                                                        display:\r\n                                                                            \"flex\",\r\n                                                                        flexDirection:\r\n                                                                            \"column\",\r\n                                                                        justifyContent:\r\n                                                                            \"space-between\",\r\n                                                                        height:\r\n                                                                            \"100%\",\r\n                                                                        paddingLeft: 0,\r\n                                                                    }}\r\n                                                                    className=\"col m2 offset-m1 hide-on-small-only\"\r\n                                                                >\r\n                                                                    <p\r\n                                                                        className=\"flow-text\"\r\n                                                                        style={{\r\n                                                                            fontSize:\r\n                                                                                \"16px\",\r\n                                                                            fontWeight:\r\n                                                                                \"bold\",\r\n                                                                        }}\r\n                                                                    >\r\n                                                                        {\r\n                                                                            sortedOrders[\r\n                                                                                i\r\n                                                                            ]\r\n                                                                                .products[\r\n                                                                                j\r\n                                                                            ]\r\n                                                                                .name\r\n                                                                        }\r\n                                                                    </p>\r\n                                                                    <p className=\"hide-on-small-only\">\r\n                                                                        Qty:{\" \"}\r\n                                                                        {\r\n                                                                            sortedOrders[\r\n                                                                                i\r\n                                                                            ]\r\n                                                                                .products[\r\n                                                                                j\r\n                                                                            ]\r\n                                                                                .quantityOrdered\r\n                                                                        }{\" \"}\r\n                                                                        ($\r\n                                                                        {Number(\r\n                                                                            sortedOrders[\r\n                                                                                i\r\n                                                                            ]\r\n                                                                                .products[\r\n                                                                                j\r\n                                                                            ]\r\n                                                                                .productSubtotal /\r\n                                                                                100\r\n                                                                        ).toFixed(\r\n                                                                            2\r\n                                                                        )}\r\n                                                                        )\r\n                                                                    </p>\r\n                                                                </div>\r\n\r\n                                                                <div\r\n                                                                    style={{\r\n                                                                        display:\r\n                                                                            \"flex\",\r\n                                                                        justifyContent:\r\n                                                                            \"center\",\r\n                                                                    }}\r\n                                                                    className=\"col s12 hide-on-med-and-up\"\r\n                                                                >\r\n                                                                    <p\r\n                                                                        className=\"flow-text\"\r\n                                                                        style={{\r\n                                                                            fontSize:\r\n                                                                                \"16px\",\r\n                                                                            fontWeight:\r\n                                                                                \"bold\",\r\n                                                                        }}\r\n                                                                    >\r\n                                                                        {\r\n                                                                            sortedOrders[\r\n                                                                                i\r\n                                                                            ]\r\n                                                                                .products[\r\n                                                                                j\r\n                                                                            ]\r\n                                                                                .name\r\n                                                                        }\r\n                                                                    </p>\r\n                                                                </div>\r\n\r\n                                                                {j === 0 ? (\r\n                                                                    <>\r\n                                                                        <div className=\"col offset-m1 m3 hide-on-small-only\">\r\n                                                                            {!sortedOrders[\r\n                                                                                i\r\n                                                                            ]\r\n                                                                                .tracking_num ? (\r\n                                                                                <>\r\n                                                                                    <p\r\n                                                                                        style={{\r\n                                                                                            fontWeight: 700,\r\n                                                                                        }}\r\n                                                                                    >\r\n                                                                                        Order\r\n                                                                                        is\r\n                                                                                        being\r\n                                                                                        proccessed\r\n                                                                                    </p>\r\n                                                                                    <div\r\n                                                                                        style={{\r\n                                                                                            width:\r\n                                                                                                \"100%\",\r\n                                                                                            borderBottom:\r\n                                                                                                \" 4px solid #ff0000\",\r\n                                                                                        }}\r\n                                                                                    ></div>\r\n                                                                                </>\r\n                                                                            ) : (\r\n                                                                                <>\r\n                                                                                    <p\r\n                                                                                        style={{\r\n                                                                                            fontWeight: 700,\r\n                                                                                        }}\r\n                                                                                    >\r\n                                                                                        Shipped{\" \"}\r\n                                                                                        =&gt;{\" \"}\r\n                                                                                        <a\r\n                                                                                            href={`https://www.google.com/search?q=${sortedOrders[i].tracking_num}`}\r\n                                                                                        >\r\n                                                                                            {\r\n                                                                                                sortedOrders[\r\n                                                                                                    i\r\n                                                                                                ]\r\n                                                                                                    .tracking_num\r\n                                                                                            }\r\n                                                                                        </a>\r\n                                                                                    </p>\r\n                                                                                    <div\r\n                                                                                        style={{\r\n                                                                                            width:\r\n                                                                                                \"100%\",\r\n                                                                                            borderBottom:\r\n                                                                                                \" 4px solid green\",\r\n                                                                                        }}\r\n                                                                                    ></div>\r\n                                                                                </>\r\n                                                                            )}\r\n                                                                        </div>\r\n\r\n                                                                        <div\r\n                                                                            className=\"col s12 hide-on-med-and-up\"\r\n                                                                            style={{}}\r\n                                                                        >\r\n                                                                            {!sortedOrders[\r\n                                                                                i\r\n                                                                            ]\r\n                                                                                .tracking_num ? (\r\n                                                                                <>\r\n                                                                                    <p\r\n                                                                                        style={{\r\n                                                                                            fontWeight: 700,\r\n                                                                                            display:\r\n                                                                                                \"flex\",\r\n                                                                                            justifyContent:\r\n                                                                                                \"center\",\r\n                                                                                            marginBottom:\r\n                                                                                                \"32px\",\r\n                                                                                        }}\r\n                                                                                    >\r\n                                                                                        <span\r\n                                                                                            style={{\r\n                                                                                                borderLeft:\r\n                                                                                                    \" 4px solid #ff0000\",\r\n                                                                                                paddingLeft:\r\n                                                                                                    \"10px\",\r\n                                                                                            }}\r\n                                                                                        >\r\n                                                                                            Order\r\n                                                                                            is\r\n                                                                                            being\r\n                                                                                            proccessed\r\n                                                                                        </span>\r\n                                                                                    </p>\r\n                                                                                </>\r\n                                                                            ) : (\r\n                                                                                <>\r\n                                                                                    <p\r\n                                                                                        style={{\r\n                                                                                            fontWeight: 700,\r\n                                                                                            display:\r\n                                                                                                \"flex\",\r\n                                                                                            justifyContent:\r\n                                                                                                \"center\",\r\n                                                                                            marginBottom:\r\n                                                                                                \"32px\",\r\n                                                                                        }}\r\n                                                                                    >\r\n                                                                                        <span\r\n                                                                                            style={{\r\n                                                                                                borderLeft:\r\n                                                                                                    \" 4px solid #008000\",\r\n                                                                                                paddingLeft:\r\n                                                                                                    \"10px\",\r\n                                                                                            }}\r\n                                                                                        >\r\n                                                                                            Shipped{\" \"}\r\n                                                                                            =&gt;{\" \"}\r\n                                                                                            <a\r\n                                                                                                href={`https://www.google.com/search?q=${sortedOrders[i].tracking_num}`}\r\n                                                                                            >\r\n                                                                                                {\r\n                                                                                                    sortedOrders[\r\n                                                                                                        i\r\n                                                                                                    ]\r\n                                                                                                        .tracking_num\r\n                                                                                                }\r\n                                                                                            </a>\r\n                                                                                        </span>\r\n                                                                                    </p>\r\n                                                                                </>\r\n                                                                            )}\r\n                                                                        </div>\r\n                                                                    </>\r\n                                                                ) : null}\r\n                                                                {sortedOrders[i]\r\n                                                                    .products\r\n                                                                    .length >\r\n                                                                    1 &&\r\n                                                                sortedOrders[i]\r\n                                                                    .products\r\n                                                                    .length -\r\n                                                                    1 !==\r\n                                                                    j ? (\r\n                                                                    <div\r\n                                                                        className=\"divider hide-on-med-and-up\"\r\n                                                                        style={{\r\n                                                                            marginLeft:\r\n                                                                                \"10%\",\r\n                                                                            width:\r\n                                                                                \"80%\",\r\n                                                                        }}\r\n                                                                    ></div>\r\n                                                                ) : (\r\n                                                                    <></>\r\n                                                                )}\r\n                                                            </div>\r\n                                                        );\r\n                                                    }\r\n                                                )}\r\n                                            </div>\r\n                                        </div>\r\n                                    </div>\r\n                                );\r\n                            })}\r\n                        </>\r\n                    </div>\r\n                </>\r\n            ) : (\r\n                <>\r\n                    <div style={{ display: \"flex\", justifyContent: \"center\" }}>\r\n                        <h1>You haven't ordered anything yet</h1>\r\n                    </div>\r\n                </>\r\n            )}\r\n        </>\r\n    );\r\n};\r\n\r\nexport default UsersOrders;\r\n","export const Sorting = () => {\r\n    //alphabetic sort\r\n    const sortByProp = (arr: any, prop: string, invert?: boolean) => {\r\n        let props = [] as any[];\r\n        arr.forEach((_val: any, i: any) => {\r\n            props[i] = arr[i][prop];\r\n        });\r\n\r\n        props.sort();\r\n        if (invert) {\r\n            props.reverse();\r\n        }\r\n\r\n        for (let i = 0; i < arr.length; i++) {\r\n            let j = i;\r\n            while (arr[i][prop] !== props[i]) {\r\n                let tmp = arr.slice(j, j + 2);\r\n                tmp.reverse();\r\n                arr[j] = tmp[0];\r\n                arr[j + 1] = tmp[1];\r\n                j = j + 1;\r\n\r\n                if (j === arr.length - 1) {\r\n                    j = i;\r\n                }\r\n\r\n                if (!arr[arr.length - 1]) {\r\n                    // remove undef index sometimes introduced by tmp.reverse()\r\n                    arr.pop();\r\n                }\r\n            }\r\n        }\r\n\r\n        if (!invert) {\r\n            return arr;\r\n        } else {\r\n            return arr;\r\n        }\r\n    };\r\n\r\n    return {\r\n        sortByProp,\r\n    };\r\n};\r\n","import { Product } from \"../RootReducer\";\r\n\r\nexport const addProductToCart = (product: Product) => {\r\n    return {\r\n        type: \"ADD_PRODUCT_TO_CART\",\r\n        product,\r\n    };\r\n};\r\n\r\nexport const resetCart = () => {\r\n    return { type: \"RESET_CART\" };\r\n};\r\n\r\nexport const changeQuantityOnProduct = (\r\n    newQuantity: number,\r\n    productIndex: number\r\n) => {\r\n    return { type: \"CHANGE_QUANTITY_ON_PRODUCT\", newQuantity, productIndex };\r\n};\r\n","import { Redirect } from \"react-router\";\r\nimport {\r\n    useGetProductQuery,\r\n    useGetProductsOptionsQuery,\r\n} from \"../../generated/graphql\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { addProductToCart } from \"../../redux/actions/userAction\";\r\nimport { useEffect, useState } from \"react\";\r\nimport anime from \"animejs\";\r\n\r\nconst GetProductOptions = () => {\r\n    var product_id;\r\n    if (process.env.NODE_ENV === \"production\") {\r\n        product_id = Number(window.location.href.split(\":\")[2]);\r\n    } else {\r\n        product_id = Number(window.location.href.split(\":\")[3]);\r\n    }\r\n\r\n    const { data, loading } = useGetProductsOptionsQuery({\r\n        variables: {\r\n            product_id,\r\n        },\r\n    });\r\n\r\n    let odata = data,\r\n        oloading = loading;\r\n\r\n    return {\r\n        odata,\r\n        oloading,\r\n    };\r\n};\r\n\r\nconst ProductDetails = () => {\r\n    let product_id: number;\r\n    if (process.env.NODE_ENV === \"production\") {\r\n        product_id = Number(window.location.href.split(\":\")[2]);\r\n    } else {\r\n        product_id = Number(window.location.href.split(\":\")[3]);\r\n    }\r\n\r\n    const dispatch = useDispatch();\r\n    const { odata, oloading } = GetProductOptions();\r\n    const { data, loading, error } = useGetProductQuery({\r\n        variables: {\r\n            product_id,\r\n        },\r\n    });\r\n\r\n    const [option, setOption] = useState({\r\n        name: \"\",\r\n        option_id: 0,\r\n        option_price: 0,\r\n        option_stock: 0,\r\n    });\r\n\r\n    useEffect(() => {\r\n        var elems = document.querySelectorAll(\".tooltipped\");\r\n        M.Tooltip.init(elems);\r\n        elems = document.querySelectorAll(\".carousel\");\r\n        M.Carousel.init(elems);\r\n\r\n        elems = document.querySelectorAll(\".dropdown-trigger\");\r\n        M.Dropdown.init(elems);\r\n\r\n        if (!loading) {\r\n            elems = document.querySelectorAll(\".tooltipped\");\r\n            M.Tooltip.init(elems);\r\n            elems = document.querySelectorAll(\".carousel\");\r\n            M.Carousel.init(elems);\r\n\r\n            elems = document.querySelectorAll(\".dropdown-trigger\");\r\n            M.Dropdown.init(elems);\r\n            // (stock * 100)/ org_stock\r\n            let percent = 50;\r\n            if (!data || !data!.getProduct.org_stock) {\r\n                percent = 100;\r\n            } else {\r\n                if (option.option_stock !== 0) {\r\n                    percent =\r\n                        (option.option_stock * 100) /\r\n                        data!.getProduct.org_stock;\r\n                } else {\r\n                    percent =\r\n                        (data!.getProduct.stock * 100) /\r\n                        data!.getProduct.org_stock;\r\n                }\r\n\r\n                if (percent > 100) {\r\n                    percent = 100;\r\n                }\r\n            }\r\n\r\n            anime({\r\n                targets: \".filler\",\r\n                width: [\"0%\", `${percent}%`],\r\n                easing: \"easeInOutExpo\",\r\n            });\r\n\r\n            if (!document.getElementById(\"product-img\")) {\r\n            } else {\r\n                if (data?.getProduct.stock === 0) {\r\n                    document.getElementById(\"product-img\")!.style.opacity =\r\n                        \"0.7\";\r\n                }\r\n            }\r\n        }\r\n    });\r\n\r\n    if (loading || oloading) {\r\n        return <></>;\r\n    }\r\n\r\n    if (!data || error || !odata) {\r\n        return <Redirect to=\"/products\" />;\r\n    }\r\n\r\n    let product: any = data!.getProduct;\r\n\r\n    // setTimeout(() => {\r\n    //     var instance = M.Carousel.getInstance(\r\n    //         document.getElementById(\"carousel-1\")!\r\n    //     );\r\n    //     instance.next();\r\n    // }, 5000);\r\n\r\n    return (\r\n        <div>\r\n            <h3 className=\"center-align\">{product.name}</h3>\r\n            <h6 className=\"center-align\">\r\n                {product.stock === 0 ? (\r\n                    <span style={{ color: \"#ff0000\", fontWeight: \"bold\" }}>\r\n                        SOLD OUT\r\n                    </span>\r\n                ) : (\r\n                    <>\r\n                        {odata.getProductsOptions.length === 0 ? (\r\n                            <>${Number(product.price / 100).toFixed(2)} </>\r\n                        ) : (\r\n                            <>\r\n                                {option.option_price ? (\r\n                                    <span\r\n                                        className=\"option-price-id\"\r\n                                        id=\"option-price-id\"\r\n                                    >\r\n                                        $\r\n                                        {Number(\r\n                                            option.option_price / 100\r\n                                        ).toFixed(2)}{\" \"}\r\n                                    </span>\r\n                                ) : (\r\n                                    <span style={{ opacity: 0 }}>$0.00</span>\r\n                                )}\r\n                            </>\r\n                        )}\r\n                    </>\r\n                )}\r\n            </h6>\r\n\r\n            <div className=\"row noselect\">\r\n                <div\r\n                    className=\"col s10 offset-s1 m4 offset-m2\"\r\n                    style={{ display: \"flex\", justifyContent: \"end\" }}\r\n                >\r\n                    {data.getProduct.images!.length > 1 ? (\r\n                        <>\r\n                            <div\r\n                                id=\"carousel-1\"\r\n                                className=\"carousel carousel-slider hide-on-small-only\"\r\n                            >\r\n                                {!data.getProduct.images ? (\r\n                                    <></>\r\n                                ) : (\r\n                                    <>\r\n                                        {data.getProduct.images.map(\r\n                                            (_val, i) => {\r\n                                                return (\r\n                                                    // eslint-disable-next-line\r\n                                                    <a\r\n                                                        className=\"carousel-item noselect\"\r\n                                                        key={i}\r\n                                                    >\r\n                                                        <span\r\n                                                            style={{\r\n                                                                display:\r\n                                                                    \"inline-block\",\r\n                                                                maxHeight:\r\n                                                                    \"350px\",\r\n                                                                height: \"100%\",\r\n                                                                width: \"10%\",\r\n                                                            }}\r\n                                                            onClick={() => {\r\n                                                                var instance = M.Carousel.getInstance(\r\n                                                                    document.getElementById(\r\n                                                                        \"carousel-1\"\r\n                                                                    )!\r\n                                                                );\r\n                                                                instance.prev();\r\n                                                            }}\r\n                                                        ></span>\r\n\r\n                                                        <img\r\n                                                            alt=\"product\"\r\n                                                            style={{\r\n                                                                maxHeight:\r\n                                                                    \"350px\",\r\n                                                                width: \"80%\",\r\n                                                            }}\r\n                                                            src={\r\n                                                                product.images[\r\n                                                                    i\r\n                                                                ].img_url || \"\"\r\n                                                            }\r\n                                                        />\r\n\r\n                                                        <span\r\n                                                            style={{\r\n                                                                display:\r\n                                                                    \"inline-block\",\r\n                                                                maxHeight:\r\n                                                                    \"350px\",\r\n                                                                height: \"100%\",\r\n                                                                width: \"10%\",\r\n                                                            }}\r\n                                                            onClick={() => {\r\n                                                                var instance = M.Carousel.getInstance(\r\n                                                                    document.getElementById(\r\n                                                                        \"carousel-1\"\r\n                                                                    )!\r\n                                                                );\r\n                                                                instance.next();\r\n                                                            }}\r\n                                                        ></span>\r\n                                                    </a>\r\n                                                );\r\n                                            }\r\n                                        )}\r\n                                    </>\r\n                                )}\r\n                            </div>\r\n\r\n                            <div\r\n                                id=\"carousel-2\"\r\n                                className=\"carousel carousel-slider show-on-small-only hide-on-med-and-up\"\r\n                                style={{ height: \"350px\" }}\r\n                            >\r\n                                {!data.getProduct.images ? (\r\n                                    <></>\r\n                                ) : (\r\n                                    <>\r\n                                        {data.getProduct.images.map(\r\n                                            (_val, i) => {\r\n                                                return (\r\n                                                    // eslint-disable-next-line\r\n                                                    <a\r\n                                                        className=\"carousel-item noselect\"\r\n                                                        key={i}\r\n                                                        style={{\r\n                                                            maxHeight: \"250px\",\r\n                                                            minHeight: \"100px\",\r\n                                                        }}\r\n                                                    >\r\n                                                        <span\r\n                                                            style={{\r\n                                                                display:\r\n                                                                    \"inline-block\",\r\n                                                                maxHeight:\r\n                                                                    \"250px\",\r\n                                                                height: \"100%\",\r\n                                                                width: \"10%\",\r\n                                                            }}\r\n                                                            onClick={() => {\r\n                                                                var instance = M.Carousel.getInstance(\r\n                                                                    document.getElementById(\r\n                                                                        \"carousel-2\"\r\n                                                                    )!\r\n                                                                );\r\n                                                                instance.prev();\r\n                                                            }}\r\n                                                        ></span>\r\n                                                        <img\r\n                                                            alt=\"product\"\r\n                                                            style={{\r\n                                                                maxHeight:\r\n                                                                    \"250px\",\r\n                                                                width: \"80%\",\r\n                                                            }}\r\n                                                            src={\r\n                                                                product.images[\r\n                                                                    i\r\n                                                                ].img_url || \"\"\r\n                                                            }\r\n                                                        />\r\n                                                        <span\r\n                                                            style={{\r\n                                                                display:\r\n                                                                    \"inline-block\",\r\n                                                                maxHeight:\r\n                                                                    \"250px\",\r\n                                                                height: \"100%\",\r\n                                                                width: \"10%\",\r\n                                                            }}\r\n                                                            onClick={() => {\r\n                                                                var instance = M.Carousel.getInstance(\r\n                                                                    document.getElementById(\r\n                                                                        \"carousel-2\"\r\n                                                                    )!\r\n                                                                );\r\n                                                                instance.next();\r\n                                                            }}\r\n                                                        ></span>\r\n                                                    </a>\r\n                                                );\r\n                                            }\r\n                                        )}\r\n                                    </>\r\n                                )}\r\n                            </div>\r\n                        </>\r\n                    ) : (\r\n                        <>\r\n                            <div>\r\n                                <img\r\n                                    id=\"product-img\"\r\n                                    src={\r\n                                        !product.images[0]\r\n                                            ? \"https://materializecss.com/images/sample-1.jpg\"\r\n                                            : product.images[0].img_url\r\n                                    }\r\n                                    alt=\"product\"\r\n                                    style={{ maxWidth: \"100%\" }}\r\n                                />\r\n                            </div>\r\n                        </>\r\n                    )}\r\n                </div>\r\n                <div className=\"col s10 offset-s1 m3 offset-m1\">\r\n                    <div\r\n                        style={{ marginBottom: \"16px\" }}\r\n                        className=\"hide-on-small-only\"\r\n                    >\r\n                        {product.desc}\r\n                    </div>\r\n                    <div className=\"centered\">\r\n                        <div\r\n                            style={{ marginBottom: \"16px\", marginTop: \"16px\" }}\r\n                            className=\"show-on-small hide-on-med-and-up\"\r\n                        >\r\n                            {product.desc}\r\n                        </div>\r\n                    </div>\r\n                    <div\r\n                        className=\"divider\"\r\n                        style={{ marginBottom: \"16px\" }}\r\n                    ></div>\r\n                    {/* eslint-disable-next-line */}\r\n\r\n                    {odata.getProductsOptions.length === 0 ? (\r\n                        <>\r\n                            <a\r\n                                className=\"tooltipped\"\r\n                                data-position=\"right\"\r\n                                data-tooltip={`${product.stock} remaining`}\r\n                            >\r\n                                <div\r\n                                    className=\"hide-on-small-only\"\r\n                                    style={{\r\n                                        height: \"55px\",\r\n                                        width: \"100%\",\r\n                                        border: \"1px solid black\",\r\n                                        marginBottom: \"16px\",\r\n                                    }}\r\n                                >\r\n                                    <span\r\n                                        className=\"filler\"\r\n                                        style={{\r\n                                            display: \"inline-block\",\r\n                                            height: \"100%\",\r\n                                            backgroundColor: \"#0d0303\",\r\n                                        }}\r\n                                    ></span>\r\n                                </div>\r\n                            </a>\r\n                        </>\r\n                    ) : (\r\n                        <a\r\n                            className=\"tooltipped\"\r\n                            data-position=\"right\"\r\n                            data-tooltip={`${option.option_stock} remaining`}\r\n                        >\r\n                            <div\r\n                                className=\"hide-on-small-only \"\r\n                                style={{\r\n                                    height: \"55px\",\r\n                                    width: \"100%\",\r\n                                    border: \"1px solid black\",\r\n                                    marginBottom: \"16px\",\r\n                                }}\r\n                            >\r\n                                <span\r\n                                    className=\"option-bar-filler\"\r\n                                    style={{\r\n                                        display: \"inline-block\",\r\n                                        height: \"100%\",\r\n                                        backgroundColor: \"#0d0303\",\r\n                                    }}\r\n                                ></span>\r\n                            </div>\r\n                        </a>\r\n                    )}\r\n\r\n                    {product.stock === 0 ? (\r\n                        <></>\r\n                    ) : (\r\n                        <>\r\n                            {odata.getProductsOptions.length !== 0 ? (\r\n                                <>\r\n                                    {/* eslint-disable-next-line */}\r\n                                    <a\r\n                                        className=\"dropdown-trigger btn select\"\r\n                                        data-target=\"dropdown1\"\r\n                                    >\r\n                                        <>\r\n                                            {\" \"}\r\n                                            {option.name ? (\r\n                                                <span>{option.name}</span>\r\n                                            ) : (\r\n                                                <>SELECT OPTION</>\r\n                                            )}\r\n                                        </>\r\n                                    </a>\r\n                                    <button\r\n                                        id=\"add-cart-btn\"\r\n                                        className=\"btn disabled\"\r\n                                        style={{\r\n                                            width: \"100%\",\r\n                                            backgroundColor: \"#0a0a0a\",\r\n                                            color: \"#fff\",\r\n                                            border: \"none\",\r\n                                            height: \"45px\",\r\n                                        }}\r\n                                        onClick={() => {\r\n                                            if (!!option) {\r\n                                                M.toast({\r\n                                                    html:\r\n                                                        \"Product was added to cart\",\r\n                                                });\r\n                                                let tmp = product;\r\n                                                tmp.option = option.name;\r\n                                                tmp.option_id =\r\n                                                    option.option_id;\r\n                                                tmp.option_price =\r\n                                                    option.option_price;\r\n                                                dispatch(addProductToCart(tmp));\r\n                                            }\r\n                                        }}\r\n                                    >\r\n                                        Add to Cart\r\n                                    </button>\r\n                                </>\r\n                            ) : (\r\n                                <button\r\n                                    id=\"add-cart-btn\"\r\n                                    style={{\r\n                                        width: \"100%\",\r\n                                        backgroundColor: \"#0a0a0a\",\r\n                                        color: \"#fff\",\r\n                                        border: \"none\",\r\n                                        height: \"45px\",\r\n                                    }}\r\n                                    onClick={() => {\r\n                                        M.toast({\r\n                                            html: \"Product was added to cart\",\r\n                                        });\r\n                                        dispatch(addProductToCart(product));\r\n                                    }}\r\n                                >\r\n                                    Add to Cart\r\n                                </button>\r\n                            )}\r\n                        </>\r\n                    )}\r\n\r\n                    <ul id=\"dropdown1\" className=\"dropdown-content\">\r\n                        <>\r\n                            {odata.getProductsOptions.map((_val, i) => {\r\n                                return (\r\n                                    <li\r\n                                        key={i}\r\n                                        onClick={() => {\r\n                                            let percent = 100;\r\n\r\n                                            percent =\r\n                                                odata.getProductsOptions[i]\r\n                                                    .stock;\r\n\r\n                                            if (percent > 100) {\r\n                                                percent = 100;\r\n                                            }\r\n\r\n                                            anime({\r\n                                                targets: \".option-bar-filler\",\r\n                                                width: [\"0%\", `${percent}%`],\r\n                                                easing: \"easeInOutExpo\",\r\n                                            });\r\n\r\n                                            setOption({\r\n                                                name:\r\n                                                    odata.getProductsOptions[i]\r\n                                                        .name,\r\n                                                option_id:\r\n                                                    odata.getProductsOptions[i]\r\n                                                        .option_id,\r\n                                                option_price:\r\n                                                    odata.getProductsOptions[i]\r\n                                                        .price,\r\n                                                option_stock:\r\n                                                    odata.getProductsOptions[i]\r\n                                                        .stock,\r\n                                            });\r\n\r\n                                            document\r\n                                                .getElementById(\"add-cart-btn\")!\r\n                                                .classList.remove(\"disabled\");\r\n                                        }}\r\n                                    >\r\n                                        {/* eslint-disable-next-line */}\r\n                                        <a>\r\n                                            {odata.getProductsOptions[i].name}\r\n                                        </a>\r\n                                    </li>\r\n                                );\r\n                            })}\r\n                        </>\r\n                    </ul>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ProductDetails;\r\n","import { useEffect, useState } from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { useGetProductsByIdsQuery } from \"../../generated/graphql\";\r\nimport { changeQuantityOnProduct } from \"../../redux/actions/userAction\";\r\nimport anime from \"animejs\";\r\n\r\nconst Cart = () => {\r\n    const products = useSelector(state => state.productsInCart);\r\n\r\n    const product_ids = [] as number[];\r\n\r\n    for (let i = 0; i < products.length; i++) {\r\n        let tmp = true;\r\n        for (let j = 0; j < product_ids.length; j++) {\r\n            if (product_ids[j] === products[i].product_id) {\r\n                tmp = false;\r\n            }\r\n        }\r\n\r\n        if (tmp) {\r\n            product_ids.push(products[i].product_id);\r\n        }\r\n    }\r\n\r\n    const products_str = JSON.stringify(product_ids);\r\n\r\n    const { data, loading, error } = useGetProductsByIdsQuery({\r\n        variables: {\r\n            products_str,\r\n        },\r\n    });\r\n\r\n    const dispatch = useDispatch();\r\n    const [state, setState] = useState({\r\n        refresh: false,\r\n        quantities: [],\r\n    });\r\n\r\n    const [total, setTotal] = useState(0);\r\n\r\n    useEffect(() => {\r\n        if (!!products) {\r\n            var tmp_total = 0;\r\n            for (let i = 0; i < products.length; i++) {\r\n                let product = products[i];\r\n                if (!product.option || product.option.length === 0) {\r\n                    if (state.quantities[i]) {\r\n                        tmp_total += products[i].price * state.quantities[i];\r\n                    } else {\r\n                        tmp_total += products[i].price * products[i].quantity;\r\n                    }\r\n                } else {\r\n                    if (state.quantities[i]) {\r\n                        tmp_total +=\r\n                            products[i].option_price * state.quantities[i];\r\n                    } else {\r\n                        tmp_total +=\r\n                            products[i].option_price * products[i].quantity;\r\n                    }\r\n                }\r\n            }\r\n\r\n            setTotal(tmp_total);\r\n            // setState({ ...state, refresh: !state.refresh });\r\n        }\r\n    });\r\n\r\n    if (loading) {\r\n        return <></>;\r\n    }\r\n\r\n    if (!!error) {\r\n        return (\r\n            <div style={{ minHeight: \"70vh\" }}>\r\n                <div\r\n                    className=\"row\"\r\n                    style={{ display: \"flex\", justifyContent: \"center\" }}\r\n                >\r\n                    <h5>Oops this is embarrasing</h5>\r\n                </div>\r\n\r\n                <div style={{ display: \"flex\", justifyContent: \"center\" }}>\r\n                    <div className=\"faq-wrapper\">\r\n                        <div\r\n                            style={{\r\n                                width: \"100%\",\r\n                                borderBottom: \" 4px solid #ff0000\",\r\n                            }}\r\n                        ></div>\r\n\r\n                        <h3 style={{ fontWeight: 550 }}>An error occured</h3>\r\n\r\n                        <p className=\"flow-text\" style={{ marginLeft: \"32px\" }}>\r\n                            <strong style={{ color: \"#ff0000\" }}>-</strong>{\" \"}\r\n                            Please try again later. If error persist contact us\r\n                            via instagram or email.\r\n                        </p>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    if (!products || products.length === 0) {\r\n        return (\r\n            <div style={{ minHeight: \"80vh\" }}>\r\n                <h3 className=\"center-align\">Your Shopping Cart Is Empty!</h3>\r\n                <a href=\"#/products\">\r\n                    <h6\r\n                        className=\"center-align\"\r\n                        style={{ marginBottom: \"16px\" }}\r\n                    >\r\n                        Click me to start shopping\r\n                    </h6>\r\n                </a>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    if (!!data) {\r\n        for (let i = 0; i < products.length; i++) {\r\n            // cart item validation\r\n            for (let j = 0; j < data.getProductsByIds.length; j++) {\r\n                if (\r\n                    products[i].product_id ===\r\n                    data.getProductsByIds[j].product_id\r\n                ) {\r\n                    if (!products[i].option) {\r\n                        if (\r\n                            products[i].quantity >\r\n                            data.getProductsByIds[j].stock\r\n                        ) {\r\n                            // edit the item\r\n                            products[i].name = data.getProductsByIds[j].name;\r\n                            products[i].price = data.getProductsByIds[j].price;\r\n                            products[i].quantity =\r\n                                data.getProductsByIds[j].stock;\r\n                            dispatch(\r\n                                changeQuantityOnProduct(\r\n                                    data.getProductsByIds[j].stock,\r\n                                    i\r\n                                )\r\n                            );\r\n                        }\r\n                    } else {\r\n                        if (\r\n                            !!data.getProductsByIds[j] &&\r\n                            !!data.getProductsByIds[j].options\r\n                        ) {\r\n                            for (\r\n                                let ii = 0;\r\n                                ii < data.getProductsByIds[j].options!.length;\r\n                                ii++\r\n                            ) {\r\n                                if (\r\n                                    products[i].option_id ===\r\n                                    data.getProductsByIds[j].options![ii]\r\n                                        .option_id\r\n                                ) {\r\n                                    //check stock\r\n                                    if (\r\n                                        products[i].quantity >\r\n                                        data.getProductsByIds[j].options![ii]\r\n                                            .stock\r\n                                    ) {\r\n                                        dispatch(\r\n                                            changeQuantityOnProduct(\r\n                                                data.getProductsByIds[j]\r\n                                                    .options![ii].stock,\r\n                                                i\r\n                                            )\r\n                                        );\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div style={{ minHeight: \"80vh\" }}>\r\n            <>\r\n                <h3 className=\"center-align\" style={{ fontWeight: \"bold\" }}>\r\n                    Cart\r\n                </h3>\r\n                <h6 className=\"center-align\" style={{ fontWeight: 600 }}>\r\n                    Subtotal(${Number(total / 100).toFixed(2)})\r\n                </h6>\r\n\r\n                <div className=\"row container\" style={{ marginTop: 20 }}>\r\n                    <div\r\n                        style={{\r\n                            width: \"100%\",\r\n                            borderBottom: \" 4px solid #980000\",\r\n                        }}\r\n                    ></div>\r\n                </div>\r\n\r\n                {products.map((_val, i) => {\r\n                    return (\r\n                        <div\r\n                            id={`product-${i}`}\r\n                            key={i}\r\n                            className={`product-${i} product row container`}\r\n                        >\r\n                            <div className={` col s12 m4 l4`}>\r\n                                <div className=\"centered\">\r\n                                    <img\r\n                                        alt=\"product\"\r\n                                        src={products[i].images[0].img_url}\r\n                                        style={{ width: \"75%\", height: \"75%\" }}\r\n                                    />\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"col s12 m3\">\r\n                                <h5 className=\"center-align hide-on-small-only\">\r\n                                    {products[i].name}{\" \"}\r\n                                    {!products[i].option ? (\r\n                                        <></>\r\n                                    ) : (\r\n                                        <span className=\"bold\">\r\n                                            ({products[i].option})\r\n                                        </span>\r\n                                    )}\r\n                                </h5>\r\n\r\n                                <h6 className=\"center-align show-on-small hide-on-med-and-up\">\r\n                                    {products[i].name}{\" \"}\r\n                                    <span className=\"bold\">\r\n                                        $\r\n                                        {!products[i].option_price ? (\r\n                                            <span>\r\n                                                {Number(\r\n                                                    products[i].price / 100\r\n                                                ).toFixed(2)}\r\n                                            </span>\r\n                                        ) : (\r\n                                            <span>\r\n                                                {Number(\r\n                                                    products[i].option_price /\r\n                                                        100\r\n                                                ).toFixed(2)}\r\n                                            </span>\r\n                                        )}{\" \"}\r\n                                        {!products[i].option ? (\r\n                                            <></>\r\n                                        ) : (\r\n                                            <>({products[i].option})</>\r\n                                        )}\r\n                                    </span>\r\n                                </h6>\r\n                            </div>\r\n\r\n                            <div\r\n                                className=\"col s4 offset-s4 offset-m1 m2 l2\"\r\n                                style={{\r\n                                    padding: \"0\",\r\n                                    display: \"flex\",\r\n                                    justifyContent: \"center\",\r\n                                }}\r\n                            >\r\n                                <input\r\n                                    type=\"text\"\r\n                                    value={\r\n                                        state.quantities[i] ||\r\n                                        state.quantities[i] === 0\r\n                                            ? state.quantities[i]\r\n                                            : products[i].quantity\r\n                                    }\r\n                                    minLength={0}\r\n                                    maxLength={2}\r\n                                    pattern=\"\\D\"\r\n                                    onBlur={e => {\r\n                                        dispatch(\r\n                                            changeQuantityOnProduct(\r\n                                                Number(e.target.value),\r\n                                                i\r\n                                            )\r\n                                        );\r\n\r\n                                        if (e.target.value === \"0\") {\r\n                                            let tmp = state.quantities;\r\n                                            tmp.splice(i, 1);\r\n\r\n                                            anime({\r\n                                                duration: 400,\r\n                                                targets: `.product-${i}`,\r\n                                                easing: \"easeOutExpo\",\r\n                                                opacity: {\r\n                                                    value: [1, 0],\r\n                                                    easing: \"linear\",\r\n                                                },\r\n                                                complete: function () {\r\n                                                    setState({\r\n                                                        ...state,\r\n                                                        quantities: tmp,\r\n                                                        refresh: !state.refresh,\r\n                                                    });\r\n                                                    if (\r\n                                                        !!document.getElementById(\r\n                                                            `product-${i}`\r\n                                                        )\r\n                                                    ) {\r\n                                                        document.getElementById(\r\n                                                            `product-${i}`\r\n                                                        )!.style.opacity = \"1\";\r\n                                                    }\r\n                                                },\r\n                                            });\r\n                                        }\r\n                                    }}\r\n                                    onChange={e => {\r\n                                        let tmp: any = state.quantities;\r\n\r\n                                        if (!e.target.value) {\r\n                                            tmp[i] = 0;\r\n                                            setState({\r\n                                                ...state,\r\n                                                quantities: tmp,\r\n                                            });\r\n                                        }\r\n\r\n                                        if (e.target.value.match(/\\d/g)) {\r\n                                            //check if value is less than stock\r\n                                            let foo = true;\r\n                                            for (\r\n                                                let j = 0;\r\n                                                j <\r\n                                                data!.getProductsByIds.length;\r\n                                                j++\r\n                                            ) {\r\n                                                if (\r\n                                                    data?.getProductsByIds[j]\r\n                                                        .options\r\n                                                ) {\r\n                                                    if (\r\n                                                        data?.getProductsByIds[\r\n                                                            j\r\n                                                        ].product_id ===\r\n                                                        products[i].product_id\r\n                                                    ) {\r\n                                                        for (\r\n                                                            let z = 0;\r\n                                                            z <\r\n                                                            data\r\n                                                                ?.getProductsByIds[\r\n                                                                j\r\n                                                            ].options!.length;\r\n                                                            z++\r\n                                                        ) {\r\n                                                            if (\r\n                                                                products[i]\r\n                                                                    .option_id ===\r\n                                                                data\r\n                                                                    ?.getProductsByIds[\r\n                                                                    j\r\n                                                                ].options![z]\r\n                                                                    .option_id\r\n                                                            ) {\r\n                                                                if (\r\n                                                                    Number(\r\n                                                                        e.target\r\n                                                                            .value\r\n                                                                    ) >\r\n                                                                    data\r\n                                                                        ?.getProductsByIds[\r\n                                                                        j\r\n                                                                    ].options![\r\n                                                                        z\r\n                                                                    ].stock\r\n                                                                ) {\r\n                                                                    foo = false;\r\n                                                                    tmp[\r\n                                                                        i\r\n                                                                    ] = Number(\r\n                                                                        data\r\n                                                                            ?.getProductsByIds[\r\n                                                                            j\r\n                                                                        ]\r\n                                                                            .options![\r\n                                                                            z\r\n                                                                        ].stock\r\n                                                                    );\r\n                                                                    setState({\r\n                                                                        ...state,\r\n                                                                        quantities: tmp,\r\n                                                                    });\r\n                                                                    break;\r\n                                                                }\r\n                                                            }\r\n                                                        }\r\n                                                    }\r\n                                                }\r\n                                            }\r\n\r\n                                            if (foo) {\r\n                                                tmp[i] = Number(e.target.value);\r\n                                                setState({\r\n                                                    ...state,\r\n                                                    quantities: tmp,\r\n                                                });\r\n                                            }\r\n                                        }\r\n                                    }}\r\n                                    style={{\r\n                                        textAlign: \"center\",\r\n                                        border: \"1px solid #000\",\r\n                                        height: \"56px\",\r\n                                        width: \"56px\",\r\n                                    }}\r\n                                />\r\n                            </div>\r\n\r\n                            <div className=\"col hide-on-small-only m1 l2 bold\">\r\n                                $\r\n                                {!products[i].option_price ? (\r\n                                    <span>\r\n                                        {Number(\r\n                                            products[i].price / 100\r\n                                        ).toFixed(2)}\r\n                                    </span>\r\n                                ) : (\r\n                                    <span>\r\n                                        {Number(\r\n                                            products[i].option_price / 100\r\n                                        ).toFixed(2)}\r\n                                    </span>\r\n                                )}\r\n                            </div>\r\n                        </div>\r\n                    );\r\n                })}\r\n                <div\r\n                    style={{\r\n                        width: \"100%\",\r\n                        display: \"flex\",\r\n                        justifyContent: \"center\",\r\n                        marginBottom: \"40px\",\r\n                    }}\r\n                >\r\n                    <a className=\"btn checkout-btn\" href=\"#/checkout\">\r\n                        checkout\r\n                    </a>\r\n                </div>\r\n            </>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Cart;\r\n","const Paid = () => {\r\n    return (\r\n        <div style={{ minHeight: \"80vh\" }}>\r\n            <div className=\"centered\">\r\n                <h3>Success</h3>\r\n            </div>\r\n\r\n            <div\r\n                style={{\r\n                    width: \"100%\",\r\n                    display: \"flex\",\r\n                    justifyContent: \"center\",\r\n                }}\r\n            >\r\n                <div\r\n                    style={{\r\n                        width: \"50%\",\r\n                        borderBottom: \" 4px solid #ff0000\",\r\n                    }}\r\n                ></div>\r\n            </div>\r\n\r\n            <div className=\"centered\">\r\n                <div className=\"faq-wrapper\">\r\n                    <blockquote\r\n                        style={{\r\n                            borderLeft: \"5px solid black\",\r\n                            marginTop: \"64px\",\r\n                        }}\r\n                    >\r\n                        <h3 style={{ fontWeight: 550 }}>\r\n                            We Received your order.\r\n                        </h3>\r\n\r\n                        <p className=\"flow-text\" style={{ marginLeft: \"32px\" }}>\r\n                            <strong style={{ color: \"#ff0000\" }}>-</strong>{\" \"}\r\n                            Please check your Paypal, Email, or the My-Orders\r\n                            page for updates.\r\n                        </p>\r\n                    </blockquote>\r\n\r\n                    <blockquote\r\n                        style={{\r\n                            borderLeft: \"5px solid #ff0000\",\r\n                            marginTop: \"64px\",\r\n                        }}\r\n                    >\r\n                        <h3 style={{ fontWeight: 550 }} className=\"noselect\">\r\n                            Thank you for shopping with Us! ٩(\r\n                            <span style={{ color: \"pink\" }}>♡</span>ε\r\n                            <span style={{ color: \"pink\" }}>♡</span>\r\n                            )۶\r\n                        </h3>\r\n                    </blockquote>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Paid;\r\n","import { useEffect, useRef, useState } from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport {\r\n    useCheckoutMutation,\r\n    useGetCurrUserQuery,\r\n    useValidateCouponMutation,\r\n    usePaypalCheckoutMutation,\r\n    useAddPaypalOrderMutation,\r\n    useGetShippingCostQuery,\r\n} from \"../../generated/graphql\";\r\nimport { CardElement } from \"@stripe/react-stripe-js\";\r\nimport { Redirect } from \"react-router\";\r\nimport { checkAuth } from \"../../CheckAuth\";\r\nimport { resetCart } from \"../../redux/actions/userAction\";\r\nimport Paid from \"./Paid\";\r\n\r\nfunction CardSection() {\r\n    const CARD_ELEMENT_OPTIONS: any = {\r\n        iconStyle: \"solid\",\r\n        hidePostalCode: true,\r\n        style: {\r\n            base: {\r\n                iconColor: \"rgb(240, 57, 122)\",\r\n                color: \"rgb(240, 57, 122)\",\r\n                fontSize: \"16px\",\r\n                fontFamily: '\"Open Sans\", sans-serif',\r\n                fontSmoothing: \"antialiased\",\r\n                \"::placeholder\": {\r\n                    color: \"#CFD7DF\",\r\n                },\r\n            },\r\n\r\n            invalid: {\r\n                color: \"#e5424d\",\r\n                \":focus\": {\r\n                    color: \"#303238\",\r\n                },\r\n            },\r\n        },\r\n    };\r\n\r\n    return <CardElement options={CARD_ELEMENT_OPTIONS} />;\r\n}\r\n\r\nconst Checkout = props => {\r\n    const { data } = useGetCurrUserQuery();\r\n    const products = useSelector(state => state.productsInCart);\r\n\r\n    const products_str = JSON.stringify(products);\r\n\r\n    const sh_res = useGetShippingCostQuery({\r\n        variables: {\r\n            US_ORDER: true,\r\n            products: products_str,\r\n        },\r\n    });\r\n\r\n    const [checkout] = useCheckoutMutation();\r\n    const [validateCoupon] = useValidateCouponMutation();\r\n    const [paypalCheckout] = usePaypalCheckoutMutation();\r\n    const [addPaypalOrder] = useAddPaypalOrderMutation();\r\n    const [discountPH, setDiscountPH] = useState(0);\r\n    const dispatch = useDispatch();\r\n    const [coupon, setCoupon] = useState(\"\");\r\n    const [subtotal, setSubtotal] = useState(-1);\r\n    const [Total, setTotal] = useState(-1);\r\n    const [shipping, setShipping] = useState(-1);\r\n    const [billing, setBilling] = useState({\r\n        refresh: false,\r\n        email: \"\",\r\n        name: \"\",\r\n        address: {\r\n            city: \"\",\r\n            line1: \"\",\r\n            zip: \"\",\r\n            state: \"\",\r\n            country: \"\",\r\n        },\r\n    });\r\n\r\n    const [paidFor, setPaidFor] = useState(false);\r\n    const [err, setError] = useState(\"\");\r\n    const [US_ORDER, SET_US_ORDER] = useState(true);\r\n    const [address, setAddress] = useState({\r\n        city: \"\",\r\n        line1: \"\",\r\n        zip: \"\",\r\n        state: \"\",\r\n        email: \"\",\r\n        name: \"\",\r\n        country: \"\",\r\n    });\r\n\r\n    const paypalRef = useRef();\r\n    const couponRef: any = useRef();\r\n    couponRef.current = coupon;\r\n\r\n    useEffect(() => {\r\n        let tmp: any = paypalRef.current;\r\n        var elems = document.querySelectorAll(\".autocomplete\");\r\n        M.Autocomplete.init(elems, {\r\n            data: {\r\n                Alabama: null,\r\n                Alaska: null,\r\n                Arizona: null,\r\n                Arkansas: null,\r\n                California: null,\r\n                Colorado: null,\r\n                Connecticut: null,\r\n                Delaware: null,\r\n                Florida: null,\r\n                Georgia: null,\r\n                Hawaii: null,\r\n                Idaho: null,\r\n                Illinois: null,\r\n                Indiana: null,\r\n                Iowa: null,\r\n                Kansas: null,\r\n                Kentucky: null,\r\n                Louisiana: null,\r\n                Maine: null,\r\n                Maryland: null,\r\n                Massachusettes: null,\r\n                Michigan: null,\r\n                Minnesota: null,\r\n                Mississippi: null,\r\n                Missouri: null,\r\n                Montana: null,\r\n                Nebraska: null,\r\n                Nevada: null,\r\n                \"New Hampshire\": null,\r\n                \"New Jersey\": null,\r\n                \"New Mexico\": null,\r\n                \"New York\": null,\r\n                \"North Carolina\": null,\r\n                \"North Dakota\": null,\r\n                Ohio: null,\r\n                Oklahoma: null,\r\n                Oregon: null,\r\n                Pennsylvania: null,\r\n                \"Rhode Island\": null,\r\n                \"South Carolina\": null,\r\n                \"South Dakota\": null,\r\n                Tennessee: null,\r\n                Texas: null,\r\n                Utah: null,\r\n                Vermont: null,\r\n                Virginia: null,\r\n                Washington: null,\r\n                \"West Virginia\": null,\r\n                Wisconsin: null,\r\n                Wyoming: null,\r\n            },\r\n        });\r\n\r\n        if (sh_res.data && !sh_res.loading) {\r\n            setShipping(Number(sh_res.data.getShippingCost));\r\n        }\r\n        let win = window as any;\r\n        try {\r\n            if (!!tmp && tmp.children.length === 0) {\r\n                win.paypal\r\n                    .Buttons({\r\n                        createOrder: async (data, actions) => {\r\n                            let products_str = JSON.stringify(products);\r\n\r\n                            let price = await paypalCheckout({\r\n                                variables: {\r\n                                    products: products_str,\r\n                                    coupon: couponRef.current || \"NONE\",\r\n                                    US_ORDER,\r\n                                },\r\n                            });\r\n\r\n                            if (!price) {\r\n                                return;\r\n                            } else {\r\n                                return actions.order.create({\r\n                                    purchase_units: [\r\n                                        {\r\n                                            description: \"product.description\",\r\n                                            amount: {\r\n                                                currency_code: \"USD\",\r\n                                                value: Number(\r\n                                                    Number(\r\n                                                        price.data\r\n                                                            ?.paypalCheckout\r\n                                                    ) / 100\r\n                                                ).toFixed(2),\r\n                                            },\r\n                                        },\r\n                                    ],\r\n                                });\r\n                            }\r\n                        },\r\n                        onApprove: async (_ppdata, actions) => {\r\n                            const order = await actions.order.capture();\r\n                            let products_str = JSON.stringify(products),\r\n                                purchaseUnits_str = JSON.stringify(\r\n                                    order.purchase_units\r\n                                ),\r\n                                user_id;\r\n                            if (\r\n                                !data ||\r\n                                !data.getCurrUser ||\r\n                                !data.getCurrUser.user_id\r\n                            ) {\r\n                                user_id =\r\n                                    order.purchase_units[0].payee.email_address;\r\n                            } else {\r\n                                user_id = data!.getCurrUser!.user_id!;\r\n                            }\r\n                            // validate order info here paypal order here\r\n                            addPaypalOrder({\r\n                                variables: {\r\n                                    coupon: couponRef.current || \"NONE\",\r\n                                    products: products_str,\r\n                                    purchase_units: purchaseUnits_str,\r\n                                    user_id,\r\n                                    US_ORDER,\r\n                                },\r\n                            });\r\n                            setPaidFor(true);\r\n                        },\r\n                        onError: async err => {\r\n                            console.log(\"err :>> \", err);\r\n                            let products_str = JSON.stringify(products);\r\n                            var price: any = await paypalCheckout({\r\n                                variables: {\r\n                                    products: products_str,\r\n                                    coupon,\r\n                                    US_ORDER,\r\n                                },\r\n                            });\r\n                            setError(price.data.paypalCheckout);\r\n                        },\r\n                    })\r\n                    .render(paypalRef.current);\r\n            } else {\r\n            }\r\n        } catch {\r\n            setError(\"DONT_KNOW\");\r\n        }\r\n    }, [Total, addPaypalOrder, coupon, data, paypalCheckout, products]);\r\n\r\n    if (sh_res.loading) {\r\n        return <> </>;\r\n    }\r\n    if (!!err) {\r\n        return (\r\n            <div style={{ minHeight: \"70vh\" }}>\r\n                <div\r\n                    className=\"row\"\r\n                    style={{ display: \"flex\", justifyContent: \"center\" }}\r\n                >\r\n                    <h1>Oops this is embarrasing</h1>\r\n                </div>\r\n\r\n                <div style={{ display: \"flex\", justifyContent: \"center\" }}>\r\n                    <div className=\"faq-wrapper\">\r\n                        <div\r\n                            style={{\r\n                                width: \"100%\",\r\n                                borderBottom: \" 4px solid black\",\r\n                            }}\r\n                        ></div>\r\n\r\n                        <h3 style={{ fontWeight: 550 }}>\r\n                            It looks like{\" \"}\r\n                            <span style={{ color: \"rgb(230, 19, 19)\" }}>\r\n                                {err}\r\n                            </span>\r\n                        </h3>\r\n\r\n                        <p className=\"flow-text\" style={{ marginLeft: \"32px\" }}>\r\n                            <strong style={{ color: \"#ff0000\" }}>-</strong> If\r\n                            you believe this is an error please contact us via\r\n                            instagram or email.\r\n                        </p>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    if (paidFor) {\r\n        dispatch(resetCart());\r\n        return <Paid />;\r\n    }\r\n\r\n    if (!products || products.length === 0) {\r\n        return <Redirect to=\"/my-cart\" />;\r\n    }\r\n\r\n    const handleSubmit = async () => {\r\n        let payBtn = document.getElementById(\"stripe-pay-btn\")!;\r\n        payBtn.classList.add(\"disabled\");\r\n        const { stripe, elements } = props;\r\n        if (!stripe || !elements) {\r\n            return;\r\n        }\r\n\r\n        const card = elements.getElement(CardElement);\r\n        const result = await stripe.createToken(card);\r\n\r\n        if (result.error) {\r\n            M.toast({ html: `${result.error.message}` });\r\n            console.log(\"result.error :>> \", result.error);\r\n        } else {\r\n            let tmp: any = address;\r\n            tmp.email = address.email;\r\n            let products_str = JSON.stringify(products),\r\n                token_str = JSON.stringify(result.token),\r\n                shipping_str = JSON.stringify(tmp);\r\n\r\n            let user_id;\r\n            if (!data) {\r\n                user_id = \"NONE\";\r\n            } else {\r\n                user_id = data.getCurrUser!.user_id!;\r\n            }\r\n\r\n            let billing_str = \"\";\r\n            if (billing.refresh) {\r\n                billing_str = JSON.stringify(billing);\r\n            } else {\r\n                billing_str = \"NONE\";\r\n            }\r\n\r\n            let response = await checkout({\r\n                variables: {\r\n                    token: token_str,\r\n                    user_id,\r\n                    products: products_str,\r\n                    shipping_info: shipping_str,\r\n                    billing_info: billing_str,\r\n                    coupon,\r\n                },\r\n            });\r\n\r\n            if (!response!.data!.checkout) {\r\n                M.toast({ html: \"Failed to checkout\" });\r\n                M.toast({ html: \"Please double check your details\" });\r\n            } else if (response!.data!.checkout) {\r\n                setPaidFor(true);\r\n            }\r\n        }\r\n        payBtn.classList.remove(\"disabled\");\r\n    };\r\n\r\n    if (subtotal === -1) {\r\n        let tmp_subtotal = 0;\r\n\r\n        for (let i = 0; i < products.length; i++) {\r\n            let product = products[i];\r\n            if (!product.option || product.option.length === 0) {\r\n                tmp_subtotal += products[i].price * products[i].quantity;\r\n            } else {\r\n                tmp_subtotal += products[i].option_price * products[i].quantity;\r\n            }\r\n        }\r\n\r\n        let tax = Math.round(tmp_subtotal * 0.095);\r\n\r\n        // shipping not added to subtotal bc it isn't rerendered if a coupon is added\r\n        setTotal(tmp_subtotal + tax);\r\n        setSubtotal(tmp_subtotal);\r\n    }\r\n\r\n    const validateForm = () => {\r\n        let tmp_email = address.email;\r\n        if (checkAuth()) {\r\n            tmp_email = \"placeholder\";\r\n        }\r\n\r\n        if (\r\n            !address.name ||\r\n            !tmp_email ||\r\n            !address.line1 ||\r\n            !address.city ||\r\n            !address.zip ||\r\n            !address.state ||\r\n            billing.refresh\r\n        ) {\r\n            if (!tmp_email && document.getElementById(\"email\")) {\r\n                document.getElementById(\"email\")!.classList.add(\"invalid\");\r\n            }\r\n            if (!address.name) {\r\n                document.getElementById(\"name\")!.classList.add(\"invalid\");\r\n            }\r\n\r\n            if (!address.line1) {\r\n                document.getElementById(\"address\")!.classList.add(\"invalid\");\r\n            }\r\n\r\n            if (!address.city) {\r\n                document.getElementById(\"city\")!.classList.add(\"invalid\");\r\n            }\r\n\r\n            if (!address.zip) {\r\n                document.getElementById(\"zip\")!.classList.add(\"invalid\");\r\n            }\r\n\r\n            if (!address.state) {\r\n                document.getElementById(\"state\")!.classList.add(\"invalid\");\r\n            }\r\n\r\n            if (billing.refresh) {\r\n                if (\r\n                    !billing.name ||\r\n                    !billing.email ||\r\n                    !billing.address.line1 ||\r\n                    !billing.address.city ||\r\n                    !billing.address.zip ||\r\n                    !billing.address.state\r\n                ) {\r\n                    if (!billing.name) {\r\n                        document\r\n                            .getElementById(\"billing_name\")!\r\n                            .classList.add(\"invalid\");\r\n                    }\r\n\r\n                    if (!billing.email) {\r\n                        document\r\n                            .getElementById(\"billing_email\")!\r\n                            .classList.add(\"invalid\");\r\n                    }\r\n\r\n                    if (!billing.address.line1) {\r\n                        document\r\n                            .getElementById(\"billing_address\")!\r\n                            .classList.add(\"invalid\");\r\n                    }\r\n\r\n                    if (!billing.address.city) {\r\n                        document\r\n                            .getElementById(\"billing_city\")!\r\n                            .classList.add(\"invalid\");\r\n                    }\r\n\r\n                    if (!billing.address.zip) {\r\n                        document\r\n                            .getElementById(\"billing_zip\")!\r\n                            .classList.add(\"invalid\");\r\n                    }\r\n\r\n                    if (!billing.address.state) {\r\n                        document\r\n                            .getElementById(\"billing_state\")!\r\n                            .classList.add(\"invalid\");\r\n                    }\r\n                }\r\n            }\r\n\r\n            M.toast({\r\n                html: \"Please fill in the missing data\",\r\n            });\r\n        } else {\r\n            handleSubmit();\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"row\" style={{ height: \"100%\", margin: \"0\" }}>\r\n            <div className=\"col s12 m6\">\r\n                <div className=\"container\" style={{ marginTop: \"50px\" }}>\r\n                    <div className=\"row\">\r\n                        <a href=\"#/my-cart\">\r\n                            <svg\r\n                                style={{ marginRight: \"8px\" }}\r\n                                focusable=\"false\"\r\n                                width=\"12\"\r\n                                height=\"12\"\r\n                                viewBox=\"0 0 16 16\"\r\n                            >\r\n                                <path\r\n                                    d=\"M3.417 7H15a1 1 0 0 1 0 2H3.417l4.591 4.591a1 1 0 0 1-1.415 1.416l-6.3-6.3a1 1 0 0 1 0-1.414l6.3-6.3A1 1 0 0 1 8.008 2.41z\"\r\n                                    fillRule=\"evenodd\"\r\n                                ></path>\r\n                            </svg>\r\n                            <span>Back To Cart</span>\r\n                        </a>\r\n                    </div>\r\n                    <div>\r\n                        <div\r\n                            className=\"ProductSummary container\"\r\n                            style={{ marginTop: \"32px\" }}\r\n                        >\r\n                            <div\r\n                                className=\"ProductSummary-info\"\r\n                                style={{\r\n                                    display: \"flex\",\r\n                                    flexDirection: \"column\",\r\n                                }}\r\n                            >\r\n                                <span\r\n                                    style={{\r\n                                        color: \"rgba(26,26,26,.6)\",\r\n                                        fontWeight: \"bold\",\r\n                                    }}\r\n                                >\r\n                                    Total\r\n                                </span>\r\n                                <span\r\n                                    style={{\r\n                                        fontSize: \"36px\",\r\n                                        letterSpacing: \"-.03rem\",\r\n                                        color: \"#303030\",\r\n                                    }}\r\n                                >\r\n                                    $\r\n                                    {Number((Total + shipping) / 100).toFixed(\r\n                                        2\r\n                                    )}\r\n                                    {/* ${Number(Total / 100).toFixed(2)} */}\r\n                                </span>\r\n                                <span\r\n                                    style={{\r\n                                        marginTop: \"32px\",\r\n                                        marginBottom: \"32px\",\r\n                                    }}\r\n                                    id=\"Products-summary\"\r\n                                >\r\n                                    {products.map((_val, i) => {\r\n                                        return (\r\n                                            <div\r\n                                                key={i}\r\n                                                className=\"product\"\r\n                                                style={{\r\n                                                    marginBottom: \"16px\",\r\n                                                    display: \"flex\",\r\n                                                    justifyContent:\r\n                                                        \"space-between\",\r\n                                                }}\r\n                                            >\r\n                                                <div\r\n                                                    className=\"product-name\"\r\n                                                    style={{\r\n                                                        fontSize: \"16px\",\r\n                                                        fontWeight: 600,\r\n                                                    }}\r\n                                                >\r\n                                                    {products[i].name}{\" \"}\r\n                                                    {!products[i].option ? (\r\n                                                        <></>\r\n                                                    ) : (\r\n                                                        <span className=\"bold\">\r\n                                                            (\r\n                                                            {products[i].option}\r\n                                                            )\r\n                                                        </span>\r\n                                                    )}{\" \"}\r\n                                                    x{products[i].quantity}\r\n                                                </div>\r\n                                                <div\r\n                                                    className=\"product-subtotal\"\r\n                                                    style={{ fontWeight: 390 }}\r\n                                                >\r\n                                                    $\r\n                                                    {!products[i]\r\n                                                        .option_price ? (\r\n                                                        <span>\r\n                                                            {Number(\r\n                                                                (products[i]\r\n                                                                    .price *\r\n                                                                    products[i]\r\n                                                                        .quantity) /\r\n                                                                    100\r\n                                                            ).toFixed(2)}\r\n                                                        </span>\r\n                                                    ) : (\r\n                                                        <span>\r\n                                                            {Number(\r\n                                                                (products[i]\r\n                                                                    .option_price *\r\n                                                                    products[i]\r\n                                                                        .quantity) /\r\n                                                                    100\r\n                                                            ).toFixed(2)}\r\n                                                        </span>\r\n                                                    )}\r\n                                                </div>\r\n                                            </div>\r\n                                        );\r\n                                    })}\r\n                                    <div\r\n                                        className=\"subtotal\"\r\n                                        style={{\r\n                                            paddingBottom: \"16px\",\r\n                                            paddingTop: \"16px\",\r\n                                            display: \"flex\",\r\n                                            justifyContent: \"space-between\",\r\n                                        }}\r\n                                    >\r\n                                        <span>Subtotal</span>\r\n                                        <span>\r\n                                            ${Number(subtotal / 100).toFixed(2)}\r\n                                        </span>\r\n                                    </div>\r\n                                    <div className=\"divider\"></div>\r\n\r\n                                    <div\r\n                                        id=\"coupon-applied\"\r\n                                        style={{\r\n                                            display: \"none\",\r\n                                            justifyContent: \"space-between\",\r\n                                        }}\r\n                                    >\r\n                                        {shipping === 0 ? (\r\n                                            <></>\r\n                                        ) : (\r\n                                            <>\r\n                                                <span>Coupon Applied</span>\r\n                                                <span\r\n                                                    style={{\r\n                                                        fontWeight: \"bold\",\r\n                                                    }}\r\n                                                >\r\n                                                    -\r\n                                                    {Number(\r\n                                                        discountPH / 100\r\n                                                    ).toFixed(2)}\r\n                                                </span>\r\n                                            </>\r\n                                        )}\r\n                                    </div>\r\n                                    <div className=\"row\" id=\"promocode-input\">\r\n                                        <div className=\"col s8\">\r\n                                            <div className=\"input-field\">\r\n                                                <input\r\n                                                    id=\"PromoCode\"\r\n                                                    type=\"text\"\r\n                                                    className=\"validate\"\r\n                                                    value={coupon}\r\n                                                    onChange={e => {\r\n                                                        setCoupon(\r\n                                                            e.target.value.toLowerCase()\r\n                                                        );\r\n                                                    }}\r\n                                                />\r\n                                                <label htmlFor=\"PromoCode\">\r\n                                                    Add a promotion code\r\n                                                </label>\r\n                                                <span\r\n                                                    id=\"coupon-helper\"\r\n                                                    className=\"helper-text\"\r\n                                                    data-error=\" \"\r\n                                                ></span>\r\n                                            </div>\r\n                                        </div>\r\n                                        <div className=\"col s3\">\r\n                                            <button\r\n                                                className=\"btn\"\r\n                                                style={{\r\n                                                    backgroundColor: \"#0a0a0a\",\r\n                                                    marginTop: \"25px\",\r\n                                                    marginBottom: \"15px\",\r\n                                                }}\r\n                                                onClick={async () => {\r\n                                                    //validate  coupon\r\n                                                    if (coupon.length !== 0) {\r\n                                                        let type = await validateCoupon(\r\n                                                            {\r\n                                                                variables: {\r\n                                                                    coupon_name: coupon,\r\n                                                                },\r\n                                                            }\r\n                                                        );\r\n                                                        if (\r\n                                                            type.data!\r\n                                                                .validateCoupon ===\r\n                                                            \"INVALID\"\r\n                                                        ) {\r\n                                                            document\r\n                                                                .getElementById(\r\n                                                                    \"PromoCode\"\r\n                                                                )!\r\n                                                                .classList.add(\r\n                                                                    \"invalid\"\r\n                                                                );\r\n\r\n                                                            document.getElementById(\r\n                                                                \"coupon-helper\"\r\n                                                            )!.attributes[\r\n                                                                \"data-error\"\r\n                                                            ].nodeValue = `The coupon you entered(${coupon}) is not valid`;\r\n\r\n                                                            setCoupon(\"\");\r\n                                                        } else if (\r\n                                                            type.data!\r\n                                                                .validateCoupon ===\r\n                                                            \"FREE_SHIPPING\"\r\n                                                        ) {\r\n                                                            // Handle Free Shipping here\r\n                                                            setShipping(0);\r\n                                                            document.getElementById(\r\n                                                                \"promocode-input\"\r\n                                                            )!.style.display =\r\n                                                                \"none\";\r\n                                                            // replace promo input and submit button with a icon that shows the coupon and discount applied\r\n                                                            document.getElementById(\r\n                                                                \"coupon-applied\"\r\n                                                            )!.style.display =\r\n                                                                \"flex\";\r\n                                                        } else {\r\n                                                            // amount to subtract from subtotal = subtotal * percentage\r\n                                                            let percentage =\r\n                                                                \"0.\" +\r\n                                                                type.data!\r\n                                                                    .validateCoupon;\r\n\r\n                                                            let discount = Math.round(\r\n                                                                subtotal *\r\n                                                                    Number(\r\n                                                                        percentage\r\n                                                                    )\r\n                                                            );\r\n\r\n                                                            let tmp = subtotal;\r\n                                                            tmp -= discount;\r\n\r\n                                                            let tax = Math.round(\r\n                                                                tmp * 0.095\r\n                                                            );\r\n\r\n                                                            setTotal(tmp + tax);\r\n                                                            setSubtotal(tmp);\r\n                                                            setDiscountPH(\r\n                                                                discount\r\n                                                            );\r\n\r\n                                                            // hide promo input and submit button\r\n                                                            document.getElementById(\r\n                                                                \"promocode-input\"\r\n                                                            )!.style.display =\r\n                                                                \"none\";\r\n                                                            // replace promo input and submit button with a icon that shows the coupon and discount applied\r\n                                                            document.getElementById(\r\n                                                                \"coupon-applied\"\r\n                                                            )!.style.display =\r\n                                                                \"flex\";\r\n                                                        }\r\n                                                    }\r\n                                                }}\r\n                                            >\r\n                                                Submit\r\n                                            </button>\r\n                                        </div>\r\n                                    </div>\r\n\r\n                                    <span\r\n                                        style={{\r\n                                            marginTop: \"8px\",\r\n                                            marginBottom: \"16px\",\r\n                                            display: \"flex\",\r\n                                            justifyContent: \"space-between\",\r\n                                        }}\r\n                                    >\r\n                                        <span>Sales Tax</span>\r\n                                        <span style={{ fontWeight: \"bold\" }}>\r\n                                            $\r\n                                            {Number(\r\n                                                Math.round(subtotal * 0.095) /\r\n                                                    100\r\n                                            ).toFixed(2)}\r\n                                        </span>\r\n                                    </span>\r\n\r\n                                    <span\r\n                                        style={{\r\n                                            marginTop: \"8px\",\r\n                                            marginBottom: \"16px\",\r\n                                            display: \"flex\",\r\n                                            justifyContent: \"space-between\",\r\n                                        }}\r\n                                    >\r\n                                        <span>Shipping </span>\r\n                                        <span style={{ fontWeight: \"bold\" }}>\r\n                                            ${Number(shipping / 100).toFixed(2)}\r\n                                        </span>\r\n                                    </span>\r\n\r\n                                    <div className=\"divider\"></div>\r\n\r\n                                    <span\r\n                                        style={{\r\n                                            marginTop: \"16px\",\r\n                                            display: \"flex\",\r\n                                            justifyContent: \"space-between\",\r\n                                        }}\r\n                                    >\r\n                                        <span>Total Due</span>\r\n                                        <span>\r\n                                            $\r\n                                            {Number(\r\n                                                (Total + shipping) / 100\r\n                                            ).toFixed(2)}\r\n                                        </span>\r\n                                    </span>\r\n                                </span>\r\n                            </div>\r\n                            <div className=\"row\">\r\n                                <div className=\"centered\">\r\n                                    <p\r\n                                        onClick={() => {\r\n                                            SET_US_ORDER(false);\r\n                                        }}\r\n                                    >\r\n                                        <label>\r\n                                            <input type=\"checkbox\" />\r\n                                            <span>\r\n                                                This is an international Order\r\n                                            </span>\r\n                                        </label>\r\n                                    </p>\r\n                                </div>\r\n                            </div>\r\n                            <div\r\n                                style={{\r\n                                    display: \"flex\",\r\n                                    justifyContent: \"center\",\r\n                                    marginTop: \"32px\",\r\n                                }}\r\n                            >\r\n                                <div\r\n                                    style={{\r\n                                        width: \"85%\",\r\n                                        maxWidth: \"600px\",\r\n                                    }}\r\n                                    ref={paypalRef as any}\r\n                                />\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className=\"col s12 m6 z-depth-3\" style={{ minHeight: \"97vh\" }}>\r\n                <div className=\"container \" style={{}}>\r\n                    {/* <div style={{ display: \"flex\", justifyContent: \"center\" }}>\r\n                        <h5>Or</h5>\r\n                    </div> */}\r\n\r\n                    <h3>Shipping Information </h3>\r\n                    <h6>\r\n                        <strong style={{ color: \"#ff0000\" }}>*</strong>(US/USD\r\n                        ONLY) Please use Paypal for international orders\r\n                    </h6>\r\n                    <div className=\"centered\">\r\n                        <div\r\n                            style={{\r\n                                width: \"100%\",\r\n                                marginTop: 8,\r\n                                marginBottom: 8,\r\n                                borderRadius: \"15px\",\r\n                                borderBottom: \" 4px solid rgb(64, 3, 3)\",\r\n                            }}\r\n                        ></div>\r\n                    </div>\r\n                    {checkAuth() ? (\r\n                        <></>\r\n                    ) : (\r\n                        <div className=\"input-field\">\r\n                            <input\r\n                                id=\"email\"\r\n                                type=\"text\"\r\n                                value={address.email}\r\n                                onChange={e =>\r\n                                    setAddress({\r\n                                        ...address,\r\n                                        email: e.target.value,\r\n                                    })\r\n                                }\r\n                            />\r\n                            <label htmlFor=\"email\">Email</label>\r\n                            <span\r\n                                className=\"helper-text\"\r\n                                data-error=\"Please your email\"\r\n                            ></span>\r\n                        </div>\r\n                    )}\r\n                    <div className=\"input-field\">\r\n                        <input\r\n                            id=\"name\"\r\n                            value={address.name}\r\n                            type=\"text\"\r\n                            onChange={e =>\r\n                                setAddress({\r\n                                    ...address,\r\n                                    name: e.target.value,\r\n                                })\r\n                            }\r\n                        />\r\n                        <label htmlFor=\"name\">Name</label>\r\n                        <span\r\n                            className=\"helper-text\"\r\n                            data-error=\"Please your name\"\r\n                        ></span>\r\n                    </div>\r\n                    <div className=\"input-field\">\r\n                        <input\r\n                            id=\"address\"\r\n                            value={address.line1}\r\n                            type=\"text\"\r\n                            onChange={e =>\r\n                                setAddress({\r\n                                    ...address,\r\n                                    line1: e.target.value,\r\n                                })\r\n                            }\r\n                        />\r\n                        <label htmlFor=\"address\">Address</label>\r\n                        <span\r\n                            className=\"helper-text\"\r\n                            data-error=\"Please your address\"\r\n                        ></span>\r\n                    </div>\r\n                    <div className=\"row\">\r\n                        <div className=\"col s6\">\r\n                            <div className=\"input-field\">\r\n                                <input\r\n                                    id=\"city\"\r\n                                    value={address.city}\r\n                                    type=\"text\"\r\n                                    onChange={e =>\r\n                                        setAddress({\r\n                                            ...address,\r\n                                            city: e.target.value,\r\n                                        })\r\n                                    }\r\n                                />\r\n                                <label htmlFor=\"city\">City</label>\r\n                                <span\r\n                                    className=\"helper-text\"\r\n                                    data-error=\"Please your city\"\r\n                                ></span>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"col s6\">\r\n                            <div className=\"input-field\">\r\n                                <input\r\n                                    id=\"zip\"\r\n                                    value={address.zip}\r\n                                    type=\"text\"\r\n                                    onChange={e =>\r\n                                        setAddress({\r\n                                            ...address,\r\n                                            zip: e.target.value,\r\n                                        })\r\n                                    }\r\n                                />\r\n                                <label htmlFor=\"zip\">Zip</label>\r\n                                <span\r\n                                    className=\"helper-text\"\r\n                                    data-error=\"Please your zip\"\r\n                                ></span>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"input-field\">\r\n                        <input\r\n                            id=\"state\"\r\n                            value={address.state}\r\n                            className=\"autocomplete\"\r\n                            type=\"text\"\r\n                            onChange={e =>\r\n                                setAddress({\r\n                                    ...address,\r\n                                    state: e.target.value,\r\n                                })\r\n                            }\r\n                        />\r\n                        <label htmlFor=\"state\">State</label>\r\n                        <span\r\n                            className=\"helper-text\"\r\n                            data-error=\"Please Pick a State\"\r\n                        ></span>\r\n                    </div>\r\n                    <div className=\"divider\"></div>\r\n                    <p>\r\n                        <label>\r\n                            <input\r\n                                type=\"checkbox\"\r\n                                id=\"Billing_input\"\r\n                                onClick={() => {\r\n                                    setBilling({\r\n                                        refresh: !billing.refresh,\r\n                                        email: \"\",\r\n                                        name: \"\",\r\n                                        address: {\r\n                                            city: \"\",\r\n                                            line1: \"\",\r\n                                            zip: \"\",\r\n                                            state: \"\",\r\n                                            country: \"\",\r\n                                        },\r\n                                    });\r\n                                }}\r\n                            />\r\n                            <span>Billing is different from shipping</span>\r\n                        </label>\r\n                    </p>\r\n                    {billing.refresh ? (\r\n                        <>\r\n                            <h2\r\n                                style={{\r\n                                    color: \"rgba(26,26,26,.9)\",\r\n                                    fontWeight: 500,\r\n                                    fontSize: \"16px\",\r\n                                }}\r\n                            >\r\n                                Billing Information\r\n                            </h2>\r\n                            <div className=\"input-field\">\r\n                                <input\r\n                                    id=\"billing_email\"\r\n                                    type=\"text\"\r\n                                    value={billing.email}\r\n                                    onChange={e =>\r\n                                        setBilling({\r\n                                            ...billing,\r\n                                            email: e.target.value,\r\n                                        })\r\n                                    }\r\n                                />\r\n                                <label htmlFor=\"billing_email\">\r\n                                    Billing Email\r\n                                </label>\r\n                                <span\r\n                                    className=\"helper-text\"\r\n                                    data-error=\"Please enter a your email\"\r\n                                ></span>\r\n                            </div>\r\n                            <div className=\"input-field\">\r\n                                <input\r\n                                    id=\"billing_name\"\r\n                                    value={billing.name}\r\n                                    type=\"text\"\r\n                                    onChange={e =>\r\n                                        setBilling({\r\n                                            ...billing,\r\n                                            name: e.target.value,\r\n                                        })\r\n                                    }\r\n                                />\r\n                                <label htmlFor=\"billing_name\">Name</label>\r\n                                <span\r\n                                    className=\"helper-text\"\r\n                                    data-error=\"Please enter a your name\"\r\n                                ></span>\r\n                            </div>\r\n                            <div className=\"input-field\">\r\n                                <input\r\n                                    id=\"billing_address\"\r\n                                    value={billing.address.line1}\r\n                                    type=\"text\"\r\n                                    onChange={e =>\r\n                                        setBilling({\r\n                                            ...billing,\r\n                                            address: {\r\n                                                ...billing.address,\r\n                                                line1: e.target.value,\r\n                                            },\r\n                                        })\r\n                                    }\r\n                                />\r\n                                <label htmlFor=\"billing_address\">Address</label>\r\n                                <span\r\n                                    className=\"helper-text\"\r\n                                    data-error=\"Please enter your address\"\r\n                                ></span>\r\n                            </div>\r\n\r\n                            <div className=\"row\">\r\n                                <div className=\"col s6\">\r\n                                    <div className=\"input-field\">\r\n                                        <input\r\n                                            id=\"billing_city\"\r\n                                            value={billing.address.city}\r\n                                            type=\"text\"\r\n                                            onChange={e =>\r\n                                                setBilling({\r\n                                                    ...billing,\r\n                                                    address: {\r\n                                                        ...billing.address,\r\n                                                        city: e.target.value,\r\n                                                    },\r\n                                                })\r\n                                            }\r\n                                        />\r\n                                        <label htmlFor=\"billing_city\">\r\n                                            City\r\n                                        </label>\r\n                                        <span\r\n                                            className=\"helper-text\"\r\n                                            data-error=\"Please enter your city\"\r\n                                        ></span>\r\n                                    </div>\r\n                                </div>\r\n                                <div className=\"col s6\">\r\n                                    <div className=\"input-field\">\r\n                                        <input\r\n                                            id=\"billing_zip\"\r\n                                            value={billing.address.zip}\r\n                                            type=\"text\"\r\n                                            onChange={e =>\r\n                                                setBilling({\r\n                                                    ...billing,\r\n                                                    address: {\r\n                                                        ...billing.address,\r\n                                                        zip: e.target.value,\r\n                                                    },\r\n                                                })\r\n                                            }\r\n                                        />\r\n                                        <label htmlFor=\"billing_zip\">Zip</label>\r\n                                        <span\r\n                                            className=\"helper-text\"\r\n                                            data-error=\"Please enter your zip\"\r\n                                        ></span>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n\r\n                            <div className=\"input-field\">\r\n                                <input\r\n                                    id=\"billing_state\"\r\n                                    value={billing.address.state}\r\n                                    className=\"autocomplete\"\r\n                                    type=\"text\"\r\n                                    onChange={e =>\r\n                                        setBilling({\r\n                                            ...billing,\r\n                                            address: {\r\n                                                ...billing.address,\r\n                                                state: e.target.value,\r\n                                            },\r\n                                        })\r\n                                    }\r\n                                />\r\n                                <label htmlFor=\"billing_state\">State</label>\r\n                                <span\r\n                                    className=\"helper-text\"\r\n                                    data-error=\"Please enter your state\"\r\n                                ></span>\r\n                            </div>\r\n                        </>\r\n                    ) : (\r\n                        <></>\r\n                    )}\r\n                    <h2\r\n                        style={{\r\n                            color: \"rgba(26,26,26,.9)\",\r\n                            fontWeight: 500,\r\n                            fontSize: \"16px\",\r\n                        }}\r\n                    >\r\n                        Payment Details\r\n                    </h2>\r\n                    <CardSection />\r\n                    <div\r\n                        style={{\r\n                            width: \"100%\",\r\n                            display: \"flex\",\r\n                            justifyContent: \"center\",\r\n                        }}\r\n                    >\r\n                        <button\r\n                            className=\"btn\"\r\n                            id=\"stripe-pay-btn\"\r\n                            style={{\r\n                                marginTop: \"16px\",\r\n                                marginBottom: \"64px\",\r\n                                width: \"380px\",\r\n                                backgroundColor: \"#0a0a0a\",\r\n                            }}\r\n                            onClick={() => {\r\n                                validateForm();\r\n                            }}\r\n                        >\r\n                            Pay ${Number((Total + shipping) / 100).toFixed(2)}\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Checkout;\r\n","import \"../css/faq.scss\";\r\n\r\nconst FAQ = () => {\r\n    var eyeColors = [\r\n        \"rgb(36, 146, 242)\",\r\n        \"rgb(154, 24, 213)\",\r\n        \"#ff0000\",\r\n        \"#000\",\r\n    ];\r\n    let eyeColor = eyeColors[Math.floor(Math.random() * eyeColors.length)];\r\n    return (\r\n        <>\r\n            <div\r\n                className=\"row\"\r\n                style={{ display: \"flex\", justifyContent: \"center\" }}\r\n            >\r\n                <h1>FAQ</h1>\r\n            </div>\r\n\r\n            <div style={{ display: \"flex\", justifyContent: \"center\" }}>\r\n                <div className=\"faq-wrapper\">\r\n                    <div\r\n                        style={{\r\n                            width: \"100%\",\r\n                            borderBottom: \" 4px solid #ff0000\",\r\n                        }}\r\n                    ></div>\r\n\r\n                    <h3 style={{ fontWeight: 550 }}>Late Orders</h3>\r\n                    <p className=\"flow-text\" style={{ marginLeft: \"32px\" }}>\r\n                        - Please be patient as the pandemic has slowed down mail\r\n                        times.\r\n                    </p>\r\n                    <div className=\"divider\"></div>\r\n                    <h3 style={{ fontWeight: 550 }}>Lost or Damaged Items</h3>\r\n                    <p className=\"flow-text\" style={{ marginLeft: \"32px\" }}>\r\n                        <strong style={{ color: \"#ff0000\" }}>-</strong> Please{\" \"}\r\n                        <a href=\"#/contact\"> contact us </a> about any lost or\r\n                        damaged items, and attach your order number.\r\n                    </p>\r\n\r\n                    <p className=\"flow-text\" style={{ marginLeft: \"32px\" }}>\r\n                        -{\" \"}\r\n                        <strong style={{ fontWeight: 550 }}>\r\n                            CantRelate.JP\r\n                        </strong>{\" \"}\r\n                        is not responsible for lost or damaged items, if your\r\n                        items have been lost or damaged. Please{\" \"}\r\n                        <a href=\"#/contact\"> contact us </a> .\r\n                    </p>\r\n\r\n                    <div className=\"divider\"></div>\r\n\r\n                    <h3 style={{ fontWeight: 550 }}>\r\n                        Incorrect Shipping Address\r\n                    </h3>\r\n\r\n                    <p className=\"flow-text\" style={{ marginLeft: \"32px\" }}>\r\n                        - Please double-check your orders before you place them.\r\n                    </p>\r\n\r\n                    <p className=\"flow-text\" style={{ marginLeft: \"32px\" }}>\r\n                        <strong style={{ color: \"#ff0000\" }}>-</strong> If wrong\r\n                        address is inputted,{\" \"}\r\n                        <strong style={{ fontWeight: 550 }}>\r\n                            please\r\n                            <a href=\"#/contact\"> contact us</a> as soon as\r\n                            possible\r\n                        </strong>\r\n                        . We will do our best to update your order.\r\n                    </p>\r\n\r\n                    <p className=\"flow-text\" style={{ marginLeft: \"32px\" }}>\r\n                        - However{\" \"}\r\n                        <strong style={{ fontWeight: 550 }}>\r\n                            CantRelate.JP\r\n                        </strong>{\" \"}\r\n                        is not responsible for the user's error, and we will not\r\n                        replace the order if it has been shipped.\r\n                    </p>\r\n\r\n                    <div className=\"divider\"></div>\r\n\r\n                    <h3 style={{ fontWeight: 550 }}>\r\n                        Thank you for checking out Can't Relate.JP!\r\n                    </h3>\r\n\r\n                    <p\r\n                        className=\"flow-text\"\r\n                        style={{\r\n                            fontWeight: 525,\r\n                            marginLeft: \"32px\",\r\n                        }}\r\n                    >\r\n                        <strong style={{ color: \"#ff0000\" }}>-</strong> Happy\r\n                        Shopping! ٩(\r\n                        <strong style={{ color: eyeColor }}>◕</strong>‿\r\n                        <strong style={{ color: eyeColor }}>◕</strong>\r\n                        ｡)۶\r\n                    </p>\r\n                </div>\r\n            </div>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default FAQ;\r\n","// import { useState } from \"react\";\r\n// import URI from \"../URI\";\r\nimport \"../css/contact.scss\";\r\nimport { FaInstagram, FaEnvelope } from \"react-icons/fa\";\r\n// import { useGetCurrUserQuery } from \"../generated/graphql\";\r\n// import axios from \"axios\";\r\n\r\nconst Contact = () => {\r\n    // const { data } = useGetCurrUserQuery();\r\n    // const [name, setName] = useState(\"\");\r\n    // const [email, setEmail] = useState(\"\");\r\n    // const [message, setMessage] = useState(\"\");\r\n    // const [orderNum, setOrderNum] = useState(\"\");\r\n\r\n    // const submitForm = () => {\r\n    //     let tmp_email;\r\n    //     if (!!data) {\r\n    //         tmp_email = data!.getCurrUser.email;\r\n    //     } else {\r\n    //         tmp_email = email;\r\n    //     }\r\n\r\n    //     axios({\r\n    //         method: \"POST\",\r\n    //         url: `${URI}/api/contact`,\r\n    //         data: {\r\n    //             name,\r\n    //             email: tmp_email,\r\n    //             message,\r\n    //             orderNum,\r\n    //         },\r\n    //     }).then((res: any) => {\r\n    //         if (res.data === \"SUCCess\") {\r\n    //             M.toast({ html: \"SUCCessfully sent message.\" });\r\n    //             setName(\"\");\r\n    //             setEmail(\"\");\r\n    //             setMessage(\"\");\r\n    //             setOrderNum(\"\");\r\n    //         } else {\r\n    //             //handle failure\r\n    //             M.toast({ html: \"Failed to send message.\" });\r\n    //             M.toast({ html: \"Please Contact Us via Instagram or Email\" });\r\n    //         }\r\n    //     });\r\n\r\n    //     // fetch(`${URI}/api/contact`, {\r\n    //     //     method: \"POST\",\r\n    //     //     body: JSON.stringify({\r\n    //     //         name,\r\n    //     //         email: tmp_email,\r\n    //     //         message,\r\n    //     //         orderNum,\r\n    //     //     }),\r\n    //     // }).\r\n    // };\r\n\r\n    return (\r\n        <div id=\"contact-form\" className=\"container\">\r\n            <div\r\n                className=\"row\"\r\n                style={{ display: \"flex\", justifyContent: \"center\" }}\r\n            >\r\n                <h1>Contact Us</h1>\r\n            </div>\r\n\r\n            <div\r\n                style={{\r\n                    display: \"flex\",\r\n                    justifyContent: \"center\",\r\n                    marginBottom: \"10px\",\r\n                }}\r\n            >\r\n                <span>\r\n                    <a\r\n                        href=\"mailto:cantrelatejp@gmail.com\"\r\n                        style={{ width: \"300px\" }}\r\n                    >\r\n                        <h6 className=\"bold\">\r\n                            <FaEnvelope\r\n                                style={{ marginRight: \"5px\", fontSize: \"20px\" }}\r\n                                className=\"left black-text\"\r\n                            />\r\n                            Cantrelatejp@gmail.com\r\n                        </h6>\r\n                    </a>\r\n                </span>\r\n            </div>\r\n\r\n            <div\r\n                style={{\r\n                    display: \"flex\",\r\n                    justifyContent: \"center\",\r\n                    marginBottom: \"10px\",\r\n                }}\r\n            >\r\n                <span>\r\n                    <a href=\"https://www.instagram.com/cantrelate.jp/\">\r\n                        <h6 className=\"bold\">\r\n                            <FaInstagram\r\n                                style={{ marginRight: \"5px\", fontSize: \"20px\" }}\r\n                                className=\"left black-text\"\r\n                            />\r\n                            @CantRelate.jp\r\n                        </h6>\r\n                    </a>\r\n                </span>\r\n            </div>\r\n\r\n            {/* <div style={{ display: \"flex\", justifyContent: \"center\" }}>\r\n                <div className=\"w-30\">\r\n                    <div style={{ display: \"flex\" }}>\r\n                        <label htmlFor=\"orderNum\">Order Number</label>\r\n                    </div>\r\n                    <input\r\n                        id=\"orderNum\"\r\n                        type=\"text\"\r\n                        className=\"validate browser-default\"\r\n                        value={orderNum}\r\n                        onChange={e => setOrderNum(e.target.value)}\r\n                    />\r\n                </div>\r\n            </div>\r\n\r\n            <div style={{ display: \"flex\", justifyContent: \"center\" }}>\r\n                <div className=\"w-30\">\r\n                    <div style={{ display: \"flex\" }}>\r\n                        <label htmlFor=\"message\">Message</label>\r\n                    </div>\r\n                    <textarea\r\n                        id=\"message\"\r\n                        className=\"validate browser-default\"\r\n                        value={message}\r\n                        onChange={e => setMessage(e.target.value)}\r\n                    />\r\n                </div>\r\n            </div>\r\n\r\n            <div style={{ display: \"flex\", justifyContent: \"center\" }}>\r\n                <div className=\"w-30\">\r\n                    <div style={{ display: \"flex\" }}>\r\n                        <label htmlFor=\"name\">Your Name</label>\r\n                    </div>\r\n                    <input\r\n                        id=\"name\"\r\n                        type=\"text\"\r\n                        className=\"validate browser-default\"\r\n                        value={name}\r\n                        onChange={e => setName(e.target.value)}\r\n                    />\r\n                </div>\r\n            </div>\r\n\r\n            {checkAuth() ? (\r\n                <></>\r\n            ) : (\r\n                <div style={{ display: \"flex\", justifyContent: \"center\" }}>\r\n                    <div className=\"w-30\">\r\n                        <div style={{ display: \"flex\" }}>\r\n                            <label className=\" browser-default\" htmlFor=\"email\">\r\n                                Your Email\r\n                            </label>\r\n                        </div>\r\n                        <input\r\n                            id=\"email\"\r\n                            type=\"text\"\r\n                            className=\"validate browser-default\"\r\n                            value={email}\r\n                            onChange={e => setEmail(e.target.value)}\r\n                        />\r\n                    </div>\r\n                </div>\r\n            )}\r\n            <div\r\n                className=\"row\"\r\n                style={{ display: \"flex\", justifyContent: \"center\" }}\r\n            >\r\n                <button\r\n                    className=\"btn black\"\r\n                    style={{ width: \"25%\", marginTop: \"30px\" }}\r\n                    onClick={() => submitForm()}\r\n                >\r\n                    Submit\r\n                </button>\r\n            </div> */}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Contact;\r\n","import \"../css/spolicy.scss\";\r\n\r\nconst ShippingPolicy = () => {\r\n    return (\r\n        <>\r\n            <div\r\n                style={{\r\n                    display: \"flex\",\r\n                    justifyContent: \"center\",\r\n                }}\r\n            >\r\n                <h3\r\n                    style={{\r\n                        fontWeight: 550,\r\n                    }}\r\n                >\r\n                    Shipping Policy\r\n                </h3>\r\n            </div>\r\n            <div\r\n                style={{\r\n                    width: \"100%\",\r\n                    display: \"flex\",\r\n                    justifyContent: \"center\",\r\n                }}\r\n            >\r\n                <div\r\n                    style={{\r\n                        width: \"50%\",\r\n                        borderBottom: \" 4px solid #ff0000\",\r\n                    }}\r\n                ></div>\r\n            </div>\r\n            <div style={{ display: \"flex\", justifyContent: \"center\" }}>\r\n                <div className=\"divider\"></div>\r\n\r\n                <div className=\"spolicy-wrapper\">\r\n                    <blockquote style={{ borderLeft: \"5px solid black\" }}>\r\n                        <h3 style={{ fontWeight: 550 }}>Preorders</h3>\r\n                        <p className=\"flow-text\" style={{ marginLeft: \"32px\" }}>\r\n                            - Please allow 2-3 weeks for orders to be processed\r\n                            after pre-orders close.\r\n                        </p>\r\n                    </blockquote>\r\n                    <div className=\"divider\"></div>\r\n                    <blockquote style={{ borderLeft: \"5px solid black\" }}>\r\n                        <h3 style={{ fontWeight: 550 }}>\r\n                            Apparel or other specialty items\r\n                        </h3>\r\n                        <p className=\"flow-text\" style={{ marginLeft: \"32px\" }}>\r\n                            - Please allow for 3-4 weeks as they are specialty\r\n                            items\r\n                        </p>\r\n                    </blockquote>\r\n                    <div className=\"divider\"></div>\r\n                    <blockquote style={{ borderLeft: \"5px solid #ff0000\" }}>\r\n                        <h3 style={{ fontWeight: 550 }}>\r\n                            Lost or damaged items\r\n                        </h3>\r\n                        <p className=\"flow-text\" style={{ marginLeft: \"32px\" }}>\r\n                            - Please contact via instagram or email.\r\n                        </p>\r\n                    </blockquote>\r\n                </div>\r\n            </div>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default ShippingPolicy;\r\n","const OrderSuccess = () => {\r\n    return <div>Your ordered was SUCCessful</div>;\r\n};\r\n\r\nexport default OrderSuccess;\r\n","import { Redirect } from \"react-router\";\r\nimport {\r\n    useGetSectionsProductsQuery,\r\n    useGetSectionByIdQuery,\r\n} from \"../../generated/graphql\";\r\n\r\nconst GetSection = section_id => {\r\n    const { data, loading } = useGetSectionByIdQuery({\r\n        variables: {\r\n            section_id,\r\n        },\r\n    });\r\n\r\n    let sdata = data,\r\n        sloading = loading;\r\n    return { sdata, sloading };\r\n};\r\n\r\nconst ViewSection = () => {\r\n    let section_id = 0;\r\n\r\n    if (process.env.NODE_ENV === \"production\") {\r\n        section_id = Number(window.location.href.split(\":\")[2]);\r\n    } else {\r\n        section_id = Number(window.location.href.split(\":\")[3]);\r\n    }\r\n\r\n    const { sdata, sloading } = GetSection(section_id);\r\n    const { data, loading, error } = useGetSectionsProductsQuery({\r\n        variables: {\r\n            section_id,\r\n        },\r\n    });\r\n\r\n    if (loading || sloading) {\r\n        return <></>;\r\n    }\r\n\r\n    if (error || !data || !sdata) {\r\n        return <Redirect to=\"/products\" />;\r\n    }\r\n\r\n    return (\r\n        <div className=\"container\">\r\n            <h1\r\n                className=\"center-align\"\r\n                style={{\r\n                    marginTop: \"60px\",\r\n                    marginBottom: \"60px\",\r\n                    fontWeight: 600,\r\n                }}\r\n            >\r\n                {sdata.getSectionById.name}\r\n            </h1>\r\n\r\n            <div className=\"products-grid\">\r\n                {data.getSectionsProducts.map((_val, i) => {\r\n                    let product = data.getSectionsProducts[i];\r\n                    return (\r\n                        <>\r\n                            <div\r\n                                className=\"card z-depth-0\"\r\n                                style={{\r\n                                    margin: \"0px 8px 32px 8px\",\r\n                                }}\r\n                                key={i}\r\n                            >\r\n                                <a\r\n                                    className=\"black-text\"\r\n                                    href={`#/product-details:${product.product_id}`}\r\n                                >\r\n                                    <div className=\"container\">\r\n                                        <div className=\"card-image\">\r\n                                            <img\r\n                                                src={product.images![0].img_url}\r\n                                                alt={product.name}\r\n                                            />\r\n                                        </div>\r\n                                    </div>\r\n\r\n                                    <div className=\"card-content\">\r\n                                        <span className=\"card-title\">\r\n                                            <h5 className=\"center-align\">\r\n                                                {product.name}\r\n                                            </h5>\r\n                                        </span>\r\n                                        <span\r\n                                            style={{\r\n                                                display: \"flex\",\r\n                                                justifyContent: \"center\",\r\n                                            }}\r\n                                        >\r\n                                            <p\r\n                                                className=\"product-price\"\r\n                                                style={{ fontSize: \"16px\" }}\r\n                                            >\r\n                                                $\r\n                                                {Number(\r\n                                                    product.price / 100\r\n                                                ).toFixed(2)}\r\n                                            </p>\r\n                                        </span>\r\n                                    </div>\r\n                                </a>\r\n                            </div>\r\n                        </>\r\n                    );\r\n                })}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ViewSection;\r\n","import { Route, Redirect, Switch } from \"react-router-dom\";\r\nimport Products from \"../components/products/Products\";\r\nimport UsersOrders from \"../components/UsersOrders\";\r\nimport ProductDetails from \"../components/products/ProductDetails\";\r\nimport Cart from \"../components/checkout/Cart\";\r\nimport Checkout from \"../components/checkout/Checkout\";\r\nimport { Elements, ElementsConsumer } from \"@stripe/react-stripe-js\";\r\nimport { loadStripe } from \"@stripe/stripe-js\";\r\nimport FAQ from \"../components/FAQ\";\r\nimport Contact from \"../components/Contact\";\r\nimport ShippingPolicy from \"../components/ShippingPolicy\";\r\nimport OrderSuccess from \"../components/OrderSuccess\";\r\nimport ViewSection from \"../components/Sections/ViewSection\";\r\n\r\nexport const Routes = () => {\r\n    const stripePromise = loadStripe(\r\n        \"pk_test_51IM63dFngR9vHhwSep5ZkKLLach7ZP7BXFkDjSgo6FmQRdy8DOkV96RdHREb1L4vMgQ1fK6FlNfwDdlFX8zKdf1D00wHpHGbCC\"\r\n    );\r\n\r\n    return (\r\n        <Switch>\r\n            <Route exact path=\"/products\" render={() => <Products />} />\r\n            <Route\r\n                exact\r\n                path=\"/product-details:id\"\r\n                render={() => <ProductDetails />}\r\n            />\r\n            <Route exact path=\"/my-orders\" render={() => <UsersOrders />} />\r\n            <Route exact path=\"/my-cart\" render={() => <Cart />} />\r\n            <Route\r\n                exact\r\n                path=\"/checkout\"\r\n                render={() => (\r\n                    <Elements stripe={stripePromise}>\r\n                        <ElementsConsumer>\r\n                            {({ stripe, elements }) => (\r\n                                <Checkout stripe={stripe} elements={elements} />\r\n                            )}\r\n                        </ElementsConsumer>\r\n                    </Elements>\r\n                )}\r\n            />\r\n            <Route exact path=\"order-success\" render={() => <OrderSuccess />} />\r\n            <Route\r\n                exact\r\n                path=\"/shipping_policy\"\r\n                render={() => <ShippingPolicy />}\r\n            />\r\n            <Route exact path=\"/FAQ\" render={() => <FAQ />} />\r\n            <Route exact path=\"/contact\" render={() => <Contact />} />\r\n            <Route\r\n                exact\r\n                path=\"/view-section:id\"\r\n                render={() => <ViewSection />}\r\n            />\r\n            <Route render={() => <Redirect to=\"/products\" />} />\r\n        </Switch>\r\n    );\r\n};\r\n","import Navbar from \"./components/navbar/Navbar\";\r\nimport Footer from \"./components/footer/Footer\";\r\nimport { Routes } from \"./routes/Routes\";\r\nimport { HashRouter as Router } from \"react-router-dom\";\r\nimport \"./css/app.scss\";\r\nimport { useEffect } from \"react\";\r\n\r\nfunction App() {\r\n    useEffect(() => {\r\n        var elems = document.querySelectorAll(\".tooltipped\");\r\n        M.Tooltip.init(elems);\r\n        elems = document.querySelectorAll(\".carousel\");\r\n        M.Carousel.init(elems);\r\n\r\n        elems = document.querySelectorAll(\".dropdown-trigger\");\r\n        M.Dropdown.init(elems);\r\n    });\r\n    return (\r\n        <Router>\r\n            <div className=\"App\">\r\n                <div style={{ height: \"100%\", width: \"100%\" }}>\r\n                    <Navbar />\r\n                    <div className=\"contentWrapper\">\r\n                        <Routes />\r\n                    </div>\r\n                    <Footer />\r\n                </div>\r\n            </div>\r\n        </Router>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","import \"../css/Preloader.scss\";\r\nimport anime from \"animejs/lib/anime.es.js\";\r\nimport { useGetMaintenanceQuery } from \"../generated/graphql\";\r\n\r\n// const animation2 = () => {\r\n//     anime.timeline({ easing: \"easeInOutSine\", duration: 500 }).add({});\r\n// };\r\n\r\nconst reloadAnimation = () => {\r\n    anime({\r\n        targets: [\".reload-text\"],\r\n        opacity: [0, 0.75],\r\n        easing: \"easeInQuint\",\r\n        duration: 1000,\r\n        delay: (_el, i) => 15 * (i + 1),\r\n    });\r\n};\r\n\r\nconst Preloader = () => {\r\n    const { data, loading } = useGetMaintenanceQuery();\r\n\r\n    setTimeout(() => {\r\n        reloadAnimation();\r\n    }, 5000);\r\n\r\n    anime\r\n        .timeline({\r\n            easing: \"easeInOutSine\",\r\n            duration: 500,\r\n            elasticity: 400,\r\n            loop: true,\r\n        })\r\n        .add({\r\n            targets: [\".circle-1\", \".circle-3\"],\r\n            translateY: -24,\r\n        })\r\n        .add(\r\n            {\r\n                targets: [\".circle-2\", \".circle-4\"],\r\n                translateY: 24,\r\n            },\r\n            0\r\n        )\r\n        .add({\r\n            targets: [\".circle-1\", \".circle-3\"],\r\n            translateX: 40,\r\n        })\r\n        .add(\r\n            {\r\n                targets: [\".circle-2\", \".circle-4\"],\r\n                translateX: -40,\r\n            },\r\n            \"-= 500\"\r\n        )\r\n        .add({\r\n            targets: [\".circle-1\", \".circle-3\"],\r\n            translateY: 0,\r\n        })\r\n        .add(\r\n            {\r\n                targets: [\".circle-2\", \".circle-4\"],\r\n                translateY: 0,\r\n            },\r\n            \"-= 500\"\r\n        )\r\n\r\n        .add({\r\n            targets: [\".circle-2\", \".circle-4\"],\r\n            translateY: -24,\r\n        })\r\n        .add(\r\n            {\r\n                targets: [\".circle-1\", \".circle-3\"],\r\n                translateY: 24,\r\n            },\r\n            \"-= 500\"\r\n        )\r\n        .add({\r\n            targets: [\".circle-2\", \".circle-4\"],\r\n            translateX: 0,\r\n        })\r\n        .add(\r\n            {\r\n                targets: [\".circle-1\", \".circle-3\"],\r\n                translateX: 0,\r\n            },\r\n            \"-= 500\"\r\n        )\r\n        .add({\r\n            targets: [\".circle-2\", \".circle-4\"],\r\n            translateY: 0,\r\n        })\r\n        .add(\r\n            {\r\n                targets: [\".circle-1\", \".circle-3\"],\r\n                translateY: 0,\r\n            },\r\n            \"-= 500\"\r\n        );\r\n\r\n    return (\r\n        <div className=\"loadingWrapper\">\r\n            <div className=\"absolute-center\">\r\n                <div className=\"loader\">\r\n                    <div className=\"circle circle-1\"></div>\r\n                    <div className=\"circle circle-2\"></div>\r\n                    <div className=\"circle circle-3\"></div>\r\n                    <div className=\"circle circle-4\"></div>\r\n                </div>\r\n            </div>\r\n            <div className=\"reload-warning\">\r\n                <h4\r\n                    className=\"reload-text\"\r\n                    onClick={() => window.location.reload()}\r\n                >\r\n                    {!data || !data.getMaintenance || loading ? (\r\n                        <>Loading, please wait...</>\r\n                    ) : (\r\n                        <>App is in maintenance mode, please come back later.</>\r\n                    )}\r\n                </h4>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Preloader;\r\n","let URI = \"\";\r\n\r\nif (process.env.NODE_ENV === \"production\") {\r\n    URI = \"https://shrouded-plains-70355.herokuapp.com\";\r\n} else {\r\n    URI = \"http://localhost:4000\";\r\n}\r\n\r\nexport default URI;\r\n","import { useEffect, useState } from \"react\";\r\nimport { setAccessToken } from \"./accessToken\";\r\nimport App from \"./App\";\r\nimport Preloader from \"./components/Preloader\";\r\nimport { GetMaintenance } from \"./GetMaintenance\";\r\nimport URI from \"./URI\";\r\n\r\nconst AppWrapper = () => {\r\n    const maintance = GetMaintenance();\r\n    const [pageLoader, setPageLoader] = useState(true);\r\n\r\n    useEffect(() => {\r\n        //get new accessToken & refreshToken with fetch to URI/refresh_token\r\n        try {\r\n            let tmp = localStorage.getItem(\"iru5\") as string;\r\n            fetch(`${URI}/refresh_token`, {\r\n                method: \"POST\",\r\n                credentials: \"include\",\r\n                headers: {\r\n                    refreshToken: tmp,\r\n                },\r\n            }).then(async res => {\r\n                const { accessToken, refreshToken } = await res.json();\r\n                setAccessToken(accessToken);\r\n                localStorage.setItem(\"iru5\", refreshToken);\r\n                setPageLoader(false);\r\n            });\r\n        } catch {\r\n            setPageLoader(false);\r\n        }\r\n\r\n        try {\r\n            // let tmp = localStorage.getItem(\"main_qwf\") as string;\r\n            // fetch(`${URI}/maintenance_login`, {\r\n            //     method: \"POST\",\r\n            //     credentials: \"include\",\r\n            //     headers: {\r\n            //         refreshToken: tmp,\r\n            //     },\r\n            // }).then(async res => {\r\n            //     const { accessToken, refreshToken } = await res.json();\r\n            //     setMainAccessToken(accessToken);\r\n            //     localStorage.setItem(\"main_qwf\", refreshToken);\r\n            //     setMainLoader(false);\r\n            // });\r\n        } catch {}\r\n    }, [setPageLoader]);\r\n\r\n    if (pageLoader || !maintance || maintance.getMaintenance) {\r\n        return <Preloader />;\r\n    } else {\r\n        return <App />;\r\n    }\r\n};\r\n\r\nexport default AppWrapper;\r\n","import { useGetMaintenanceQuery } from \"./generated/graphql\";\r\n\r\nexport const GetMaintenance = () => {\r\n    const { data, loading } = useGetMaintenanceQuery();\r\n\r\n    if (!loading && !!data) {\r\n        let maintenance = data;\r\n        return maintenance;\r\n    }\r\n};\r\n","export interface Product {\r\n    product_id: number;\r\n    name: string;\r\n    price: number;\r\n    stock: number;\r\n    option?: string;\r\n    option_id?: number;\r\n}\r\n\r\nexport interface ProductInCart {\r\n    product_id: number;\r\n    name: string;\r\n    price: number;\r\n    stock: number;\r\n    quantity: number;\r\n    option?: string;\r\n    option_id?: number;\r\n}\r\n\r\nexport interface State {\r\n    productsInCart: [\r\n        {\r\n            product_id: number;\r\n            name: string;\r\n            price: number;\r\n            stock: number;\r\n            quantity: number;\r\n            option?: string;\r\n            option_id?: number;\r\n        }\r\n    ];\r\n}\r\n\r\nconst loadState = () => {\r\n    try {\r\n        let serializedState = localStorage.getItem(\"store-state\");\r\n        if (serializedState) {\r\n            let state = JSON.parse(serializedState);\r\n            return state;\r\n        }\r\n    } catch (err) {\r\n        console.log(\"err :>> \", err);\r\n    }\r\n};\r\n\r\nconst initState = loadState() || {\r\n    productsInCart: [],\r\n};\r\n\r\ntype Actions = {\r\n    type: string;\r\n    product?: Product;\r\n    newQuantity?: number;\r\n    productIndex?: number;\r\n};\r\n\r\nexport const RootReducer = (state = initState, action: Actions) => {\r\n    switch (action.type) {\r\n        case \"ADD_PRODUCT_TO_CART\": {\r\n            let products = loadState().productsInCart || [];\r\n\r\n            //if product is already in cart increase quantity instead of adding a new product\r\n            for (let i = 0; i < products.length; i++) {\r\n                if (products[i].product_id === action.product!.product_id) {\r\n                    //if product does not have an option\r\n                    if (!!action.product && !action.product.option) {\r\n                        products[i].quantity++;\r\n                        return { ...state, productsInCart: products };\r\n                    } else if (\r\n                        products[i].option_id === action.product!.option_id\r\n                    ) {\r\n                        products[i].quantity++;\r\n                        return { ...state, productsInCart: products };\r\n                    }\r\n                }\r\n            }\r\n\r\n            let newProduct: any = action.product;\r\n            newProduct.quantity = 1;\r\n\r\n            products.push(newProduct);\r\n            return { ...state, productsInCart: products };\r\n        }\r\n\r\n        case \"CHANGE_QUANTITY_ON_PRODUCT\": {\r\n            let productsInCart = state.productsInCart;\r\n            if (action.newQuantity === 0) {\r\n                //remove product if quantity is 0\r\n                productsInCart.splice(action.productIndex!, 1);\r\n            } else {\r\n                productsInCart[\r\n                    action.productIndex!\r\n                ].quantity = action.newQuantity!;\r\n            }\r\n            return { ...state, productsInCart };\r\n        }\r\n\r\n        case \"RESET_CART\": {\r\n            // delete localStorage items\r\n            localStorage.setItem(\"store-state\", \" \");\r\n            // dump state\r\n            return {};\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n","import { createStore } from \"redux\";\r\nimport { RootReducer } from \"./RootReducer\";\r\nimport { composeWithDevTools } from \"redux-devtools-extension\";\r\n\r\nconst saveState = state => {\r\n    try {\r\n        let serializedState = JSON.stringify(state);\r\n        localStorage.setItem(\"store-state\", serializedState);\r\n    } catch (err) {\r\n        console.log(\"err :>> \", err);\r\n    }\r\n};\r\n\r\nexport const store = createStore(RootReducer as any, composeWithDevTools());\r\n\r\nstore.subscribe(() => {\r\n    saveState(store.getState());\r\n});\r\n","import ReactDOM from \"react-dom\";\r\nimport AppWrapper from \"./AppWrapper\";\r\nimport ApolloClient from \"apollo-client\";\r\nimport { InMemoryCache } from \"apollo-cache-inmemory\";\r\nimport jwtDecode from \"jwt-decode\";\r\nimport { ApolloProvider } from \"@apollo/client\";\r\nimport { ApolloLink, Observable } from \"apollo-link\";\r\nimport { HttpLink } from \"apollo-link-http\";\r\nimport { onError } from \"apollo-link-error\";\r\nimport { TokenRefreshLink } from \"apollo-link-token-refresh\";\r\nimport { getAccessToken, setAccessToken } from \"./accessToken\";\r\nimport URI from \"./URI\";\r\nimport { Provider } from \"react-redux\";\r\nimport { store } from \"./redux/ReduxStore\";\r\n\r\nconst cache = new InMemoryCache({});\r\nconst requestLink = new ApolloLink(\r\n    (operation, forward) =>\r\n        new Observable(observer => {\r\n            let handle: any;\r\n            Promise.resolve(operation)\r\n                .then(operation => {\r\n                    const accessToken = getAccessToken();\r\n                    operation.setContext({\r\n                        headers: {\r\n                            authorization: accessToken\r\n                                ? `bearer ${accessToken}`\r\n                                : \"\",\r\n                        },\r\n                    });\r\n                })\r\n                .then(() => {\r\n                    handle = forward(operation).subscribe({\r\n                        next: observer.next.bind(observer),\r\n                        error: observer.error.bind(observer),\r\n                        complete: observer.complete.bind(observer),\r\n                    });\r\n                })\r\n                .catch(observer.error.bind(observer));\r\n\r\n            return () => {\r\n                if (handle) handle.unsubscribe();\r\n            };\r\n        })\r\n);\r\n\r\nconst client = new ApolloClient({\r\n    link: ApolloLink.from([\r\n        new TokenRefreshLink({\r\n            accessTokenField: \"accessToken\",\r\n            isTokenValidOrUndefined: () => {\r\n                const token = getAccessToken();\r\n\r\n                if (!token) {\r\n                    return true;\r\n                }\r\n\r\n                try {\r\n                    const { exp } = jwtDecode(token) as any;\r\n                    if (Date.now() >= exp * 1000) {\r\n                        return false;\r\n                    } else {\r\n                        return true;\r\n                    }\r\n                } catch {\r\n                    return false;\r\n                }\r\n            },\r\n            fetchAccessToken: () => {\r\n                return fetch(`${URI}/refresh_token`, {\r\n                    method: \"POST\",\r\n                    credentials: \"include\",\r\n                });\r\n            },\r\n            handleFetch: (accessToken: string) => {\r\n                setAccessToken(accessToken);\r\n            },\r\n            handleError: (err: any) => {\r\n                console.warn(\"Your refresh token is invalid. Try to relogin\");\r\n                console.error(err);\r\n            },\r\n        }) as any,\r\n        onError(({ graphQLErrors, networkError }) => {\r\n            console.log(graphQLErrors);\r\n            console.log(networkError);\r\n        }),\r\n        requestLink,\r\n        new HttpLink({\r\n            uri: `${URI}/graphql`,\r\n            credentials: \"include\",\r\n        }),\r\n    ]),\r\n    cache,\r\n});\r\n\r\nReactDOM.render(\r\n    <ApolloProvider client={client as any}>\r\n        <Provider store={store}>\r\n            <AppWrapper />\r\n        </Provider>\r\n    </ApolloProvider>,\r\n    document.getElementById(\"root\")\r\n);\r\n"],"sourceRoot":""}